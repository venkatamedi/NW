function queryBuilder($compile){return{restrict:"E",scope:{group:"=",params:"=",disablechange:"=",lastindex:"=",form:"=",index:"="},templateUrl:"js/components/task/queryBuilder/queryBuilder.html",compile:function(element,attrs){var content,directive;return content=element.contents().remove(),function(scope,element,attrs){scope.operators=[{name:"AND"},{name:"OR"}],scope.conditions=[{name:"=",id:"="},{name:"<>",id:"<>"},{name:"<",id:">"},{name:"<=",id:">="},{name:">",id:"<"},{name:">=",id:"<="},{name:"Is null",id:"Is null"},{name:"Is not null",id:"Is not null"}],scope.comboConditions=[{name:"="},{name:"<>"},{name:"Is null",id:"Is null"},{name:"Is not null",id:"Is not null"}],scope.changeParam=function(rule,field){rule.data=void 0,scope.data=void 0;var param=_.find(scope.params,{param_name:field});param&&(rule.type=param.param_type,rule.comboIndicator=param.COMBO_INDICATOR,"integer"!=rule.type&&"real"!=rule.type&&"number"!=rule.type||(rule.min=parseFloat(param.min_value),rule.max=parseFloat(param.max_value)),param.valid_values&&param.valid_values.length>0&&(rule.validValues=param.valid_values)),rule.field=field},scope.changeCondition=function(rule,condition){rule.condition=condition},scope.changeData=function(rule,data){rule.data=void 0!==data?data:void 0},scope.addCondition=function(){scope.group.rules.push({condition:"",field:"",data:void 0,operator:"AND"})},scope.disableIfNull=function(rule,condition){"Is null"===condition||"Is not null"===condition?(rule.disableThird=!0,rule.data=void 0):rule.disableThird=!1},scope.removeCondition=function(index){scope.group.rules.splice(index,1)},scope.addGroup=function(){scope.group.rules.push({group:{operator:"AND",rules:[]}})},scope.removeGroup=function(){"group"in scope.$parent&&scope.$parent.group.rules.splice(scope.$parent.$index,1)},directive||(directive=$compile(content)),element.append(directive(scope,(function($compile){return $compile})))}}}}angular.module("TDM-FE").directive("queryBuilder",["$compile",queryBuilder]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdGFzay9xdWVyeUJ1aWxkZXIvcXVlcnlCdWlsZGVyLmpzIl0sIm5hbWVzIjpbInF1ZXJ5QnVpbGRlciIsIiRjb21waWxlIiwicmVzdHJpY3QiLCJzY29wZSIsImdyb3VwIiwicGFyYW1zIiwiZGlzYWJsZWNoYW5nZSIsImxhc3RpbmRleCIsImZvcm0iLCJpbmRleCIsInRlbXBsYXRlVXJsIiwiY29tcGlsZSIsImVsZW1lbnQiLCJhdHRycyIsImNvbnRlbnQiLCJkaXJlY3RpdmUiLCJjb250ZW50cyIsInJlbW92ZSIsIm9wZXJhdG9ycyIsIm5hbWUiLCJjb25kaXRpb25zIiwiaWQiLCJjb21ib0NvbmRpdGlvbnMiLCJjaGFuZ2VQYXJhbSIsInJ1bGUiLCJmaWVsZCIsImRhdGEiLCJ1bmRlZmluZWQiLCJwYXJhbSIsIl8iLCJmaW5kIiwicGFyYW1fbmFtZSIsInR5cGUiLCJwYXJhbV90eXBlIiwiY29tYm9JbmRpY2F0b3IiLCJDT01CT19JTkRJQ0FUT1IiLCJtaW4iLCJwYXJzZUZsb2F0IiwibWluX3ZhbHVlIiwibWF4IiwibWF4X3ZhbHVlIiwidmFsaWRfdmFsdWVzIiwibGVuZ3RoIiwidmFsaWRWYWx1ZXMiLCJjaGFuZ2VDb25kaXRpb24iLCJjb25kaXRpb24iLCJjaGFuZ2VEYXRhIiwiYWRkQ29uZGl0aW9uIiwicnVsZXMiLCJwdXNoIiwib3BlcmF0b3IiLCJkaXNhYmxlSWZOdWxsIiwiZGlzYWJsZVRoaXJkIiwicmVtb3ZlQ29uZGl0aW9uIiwic3BsaWNlIiwiYWRkR3JvdXAiLCJyZW1vdmVHcm91cCIsIiRwYXJlbnQiLCIkaW5kZXgiLCJhcHBlbmQiLCJhbmd1bGFyIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTQSxhQUFhQyxVQUNsQixNQUFPLENBQ0hDLFNBQVUsSUFDVkMsTUFBTyxDQUNIQyxNQUFPLElBQ1BDLE9BQVEsSUFDUkMsY0FBZSxJQUNmQyxVQUFXLElBQ1hDLEtBQU0sSUFDTkMsTUFBTyxLQUVYQyxZQUFhLG9EQUNiQyxRQUFTLFNBQVVDLFFBQVNDLE9BQ3hCLElBQUlDLFFBQVNDLFVBRWIsT0FEQUQsUUFBVUYsUUFBUUksV0FBV0MsU0FDdEIsU0FBVWQsTUFBT1MsUUFBU0MsT0FFN0JWLE1BQU1lLFVBQVksQ0FDZCxDQUFDQyxLQUFNLE9BQ1AsQ0FBQ0EsS0FBTSxPQUdYaEIsTUFBTWlCLFdBQWEsQ0FDZixDQUNJRCxLQUFNLElBQ05FLEdBQUksS0FFUixDQUNJRixLQUFNLEtBQ05FLEdBQUksTUFFUixDQUNJRixLQUFNLElBQ05FLEdBQUksS0FFUixDQUNJRixLQUFNLEtBQ05FLEdBQUksTUFFUixDQUNJRixLQUFNLElBQ05FLEdBQUksS0FFUixDQUNJRixLQUFNLEtBQ05FLEdBQUksTUFFUixDQUNJRixLQUFNLFVBQ05FLEdBQUksV0FFUixDQUNJRixLQUFNLGNBQ05FLEdBQUksZ0JBSVpsQixNQUFNbUIsZ0JBQWtCLENBQ3BCLENBQUNILEtBQU0sS0FDUCxDQUFDQSxLQUFNLE1BQ1AsQ0FDSUEsS0FBTSxVQUNORSxHQUFJLFdBRVIsQ0FDSUYsS0FBTSxjQUNORSxHQUFJLGdCQUlabEIsTUFBTW9CLFlBQWMsU0FBVUMsS0FBTUMsT0FDaENELEtBQUtFLFVBQU9DLEVBQ1p4QixNQUFNdUIsVUFBT0MsRUFDYixJQUFJQyxNQUFRQyxFQUFFQyxLQUFLM0IsTUFBTUUsT0FBUSxDQUFDMEIsV0FBWU4sUUFDMUNHLFFBQ0FKLEtBQUtRLEtBQU9KLE1BQU1LLFdBQ2xCVCxLQUFLVSxlQUFpQk4sTUFBTU8sZ0JBQ1gsV0FBYlgsS0FBS1EsTUFBa0MsUUFBYlIsS0FBS1EsTUFBK0IsVUFBYlIsS0FBS1EsT0FDdERSLEtBQUtZLElBQU1DLFdBQVdULE1BQU1VLFdBQzVCZCxLQUFLZSxJQUFNRixXQUFXVCxNQUFNWSxZQUU1QlosTUFBTWEsY0FBZ0JiLE1BQU1hLGFBQWFDLE9BQVMsSUFDbERsQixLQUFLbUIsWUFBY2YsTUFBTWEsZUFHakNqQixLQUFLQyxNQUFRQSxPQUdqQnRCLE1BQU15QyxnQkFBa0IsU0FBVXBCLEtBQU1xQixXQUNwQ3JCLEtBQUtxQixVQUFZQSxXQUdyQjFDLE1BQU0yQyxXQUFhLFNBQVV0QixLQUFNRSxNQUsvQkYsS0FBS0UsVUFKUUMsSUFBVEQsS0FJUUEsVUFISUMsR0FNcEJ4QixNQUFNNEMsYUFBZSxXQUNqQjVDLE1BQU1DLE1BQU00QyxNQUFNQyxLQUFLLENBQ25CSixVQUFXLEdBQ1hwQixNQUFPLEdBQ1BDLFVBQU1DLEVBQ051QixTQUFVLFNBSWxCL0MsTUFBTWdELGNBQWdCLFNBQVUzQixLQUFNcUIsV0FFaEIsWUFBZEEsV0FBeUMsZ0JBQWRBLFdBRTNCckIsS0FBSzRCLGNBQWUsRUFDcEI1QixLQUFLRSxVQUFPQyxHQUVaSCxLQUFLNEIsY0FBZSxHQUk1QmpELE1BQU1rRCxnQkFBa0IsU0FBVTVDLE9BQzlCTixNQUFNQyxNQUFNNEMsTUFBTU0sT0FBTzdDLE1BQU8sSUFHcENOLE1BQU1vRCxTQUFXLFdBQ2JwRCxNQUFNQyxNQUFNNEMsTUFBTUMsS0FBSyxDQUNuQjdDLE1BQU8sQ0FDSDhDLFNBQVUsTUFDVkYsTUFBTyxPQUtuQjdDLE1BQU1xRCxZQUFjLFdBQ2hCLFVBQVdyRCxNQUFNc0QsU0FBV3RELE1BQU1zRCxRQUFRckQsTUFBTTRDLE1BQU1NLE9BQU9uRCxNQUFNc0QsUUFBUUMsT0FBUSxJQUd2RjNDLFlBQWNBLFVBQVlkLFNBQVNhLFVBRW5DRixRQUFRK0MsT0FBTzVDLFVBQVVaLE9BQU8sU0FBVUYsVUFDdEMsT0FBT0EsZ0JBTzNCMkQsUUFDQ0MsT0FBTyxVQUNQOUMsVUFBVSxlQUFnQixDQUFDLFdBQVlmIiwiZmlsZSI6ImNvbXBvbmVudHMvdGFzay9xdWVyeUJ1aWxkZXIvcXVlcnlCdWlsZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmZ1bmN0aW9uIHF1ZXJ5QnVpbGRlcigkY29tcGlsZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBncm91cDogJz0nLFxuICAgICAgICAgICAgcGFyYW1zOiAnPScsXG4gICAgICAgICAgICBkaXNhYmxlY2hhbmdlOiAnPScsXG4gICAgICAgICAgICBsYXN0aW5kZXg6ICc9JyxcbiAgICAgICAgICAgIGZvcm06ICc9JyxcbiAgICAgICAgICAgIGluZGV4OiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdqcy9jb21wb25lbnRzL3Rhc2svcXVlcnlCdWlsZGVyL3F1ZXJ5QnVpbGRlci5odG1sJyxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24gKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICB2YXIgY29udGVudCwgZGlyZWN0aXZlO1xuICAgICAgICAgICAgY29udGVudCA9IGVsZW1lbnQuY29udGVudHMoKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG5cbiAgICAgICAgICAgICAgICBzY29wZS5vcGVyYXRvcnMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnQU5EJ30sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnT1InfVxuICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5jb25kaXRpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnPScsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJz0nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICc8PicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJzw+J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnPCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJz4nXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICc8PScsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJz49J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnPicsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJzwnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICc+PScsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJzw9J1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSXMgbnVsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ0lzIG51bGwnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdJcyBub3QgbnVsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ0lzIG5vdCBudWxsJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgIHNjb3BlLmNvbWJvQ29uZGl0aW9ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAge25hbWU6ICc9J30sXG4gICAgICAgICAgICAgICAgICAgIHtuYW1lOiAnPD4nfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0lzIG51bGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdJcyBudWxsJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnSXMgbm90IG51bGwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdJcyBub3QgbnVsbCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5jaGFuZ2VQYXJhbSA9IGZ1bmN0aW9uIChydWxlLCBmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICBydWxlLmRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmRhdGEgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbSA9IF8uZmluZChzY29wZS5wYXJhbXMsIHtwYXJhbV9uYW1lOiBmaWVsZH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUudHlwZSA9IHBhcmFtLnBhcmFtX3R5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlLmNvbWJvSW5kaWNhdG9yID0gcGFyYW0uQ09NQk9fSU5ESUNBVE9SO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bGUudHlwZSA9PSAnaW50ZWdlcicgfHwgcnVsZS50eXBlID09ICdyZWFsJyB8fCBydWxlLnR5cGUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLm1pbiA9IHBhcnNlRmxvYXQocGFyYW0ubWluX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLm1heCA9IHBhcnNlRmxvYXQocGFyYW0ubWF4X3ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJhbS52YWxpZF92YWx1ZXMgJiYgcGFyYW0udmFsaWRfdmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLnZhbGlkVmFsdWVzID0gcGFyYW0udmFsaWRfdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcnVsZS5maWVsZCA9IGZpZWxkO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5jaGFuZ2VDb25kaXRpb24gPSBmdW5jdGlvbiAocnVsZSwgY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5jaGFuZ2VEYXRhID0gZnVuY3Rpb24gKHJ1bGUsIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZS5kYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHNjb3BlLmFkZENvbmRpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuZ3JvdXAucnVsZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb246ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3I6ICdBTkQnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5kaXNhYmxlSWZOdWxsID0gZnVuY3Rpb24gKHJ1bGUsIGNvbmRpdGlvbikge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25kaXRpb24gPT09IFwiSXMgbnVsbFwiIHx8IGNvbmRpdGlvbiA9PT0gXCJJcyBub3QgbnVsbFwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuZGlzYWJsZVRoaXJkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuZGF0YSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUuZGlzYWJsZVRoaXJkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzY29wZS5yZW1vdmVDb25kaXRpb24gPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuZ3JvdXAucnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuYWRkR3JvdXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmdyb3VwLnJ1bGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogJ0FORCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZXM6IFtdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzY29wZS5yZW1vdmVHcm91cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgXCJncm91cFwiIGluIHNjb3BlLiRwYXJlbnQgJiYgc2NvcGUuJHBhcmVudC5ncm91cC5ydWxlcy5zcGxpY2Uoc2NvcGUuJHBhcmVudC4kaW5kZXgsIDEpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUgfHwgKGRpcmVjdGl2ZSA9ICRjb21waWxlKGNvbnRlbnQpKTtcblxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGRpcmVjdGl2ZShzY29wZSwgZnVuY3Rpb24gKCRjb21waWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkY29tcGlsZTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5hbmd1bGFyXG4ubW9kdWxlKCdURE0tRkUnKVxuLmRpcmVjdGl2ZSgncXVlcnlCdWlsZGVyJywgWyckY29tcGlsZScsIHF1ZXJ5QnVpbGRlcl0pOyJdfQ==
