function requestedEntities(){return{restrict:"E",templateUrl:"js/components/task/tabs/requestedEntities/requestedEntities.html",scope:{content:"=",disabled:"=",form:"=",sourceEnvOwner:"=",targetEnvOwner:"=",back:"=",getSubTitle:"=",maxToCopy:"=",userRole:"="},controller:function($scope,TDMService,toastr,$timeout,AuthService,$state,DTOptionsBuilder,DTColumnBuilder,$q,$compile){var requestedEntitiesCtrl=this;requestedEntitiesCtrl.taskData=$scope.content,requestedEntitiesCtrl.subTitle=$scope.getSubTitle();var userRole=AuthService.getRole();requestedEntitiesCtrl.userRoleType=userRole.type,requestedEntitiesCtrl.entitiesPattern=new RegExp("^((\\s*.\\s*|-)+(?:,(\\s*.\\s*|-)+){0,"+(($scope.maxToCopy||1e9)-1)+"})?$"),requestedEntitiesCtrl.syntheticPattern="^[a-zA-Z0-9._-]+$",TDMService.getDateTimeFormat().then(data=>{requestedEntitiesCtrl.dateFormats=data}),requestedEntitiesCtrl.versionForLoadTo=new Date,requestedEntitiesCtrl.versionForLoadFrom=new Date,requestedEntitiesCtrl.versionForLoadFrom.setDate(requestedEntitiesCtrl.versionForLoadFrom.getDate()-30),requestedEntitiesCtrl.prepareParametersData=()=>{try{requestedEntitiesCtrl.filter=JSON.parse(requestedEntitiesCtrl.taskData.parameters)}catch(err){console.error(err.message)}finally{requestedEntitiesCtrl.filter?requestedEntitiesCtrl.filter.group||(requestedEntitiesCtrl.filter.group={rules:[]}):requestedEntitiesCtrl.filter={group:{rules:[]}}}};const rootLUs=requestedEntitiesCtrl.taskData.selectedLogicalUnits.filter(lu=>{const luOrig=(requestedEntitiesCtrl.taskData.allLogicalUnits||[]).find(it=>it.lu_name===lu.lu_name);return!(!luOrig||luOrig.lu_parent_name)});function buildSubQuery(rule){var field='"'+rule.field+'"';let condition=rule.condition;var data="'"+rule.data+"'";return"number"==rule.type&&(field+="::numeric[] ",data=rule.data),"Is null"===rule.condition||"Is not null"===rule.condition?"( "+field+" "+condition+" )":"( "+data+" "+condition+" ANY("+field+") )"}function computed(group){if(!group)return"";for(var str="(",i=0;i<group.rules.length;i++)if(group.rules[i].group)i==group.rules.length-1?str+=computed(group.rules[i].group):str+=computed(group.rules[i].group)+" "+group.rules[i].group.operator+" ";else{var data;if(void 0===group.rules[i].data&&"Is null"!=group.rules[i].condition&&"Is not null"!=group.rules[i].condition)return;if("real"==group.rules[i].type)data=group.rules[i].data.toLocaleString().indexOf(".")<=0?group.rules[i].data.toFixed(1):group.rules[i].data;else if("integer"==group.rules[i].type)data=Math.floor(group.rules[i].data);else if("combo"==group.rules[i].type){if(group.rules[i].validValues.indexOf(group.rules[i].data)<0&&"Is null"!=group.rules[i].condition&&"Is not null"!=group.rules[i].condition)return;data=group.rules[i].data}else data=group.rules[i].data;null==data&&(data=""),i==group.rules.length-1?str+=buildSubQuery(group.rules[i]):(str+=buildSubQuery(group.rules[i]),str+=" "+group.rules[i].operator+" ")}return str+")"}TDMService.getCustomLogicFlows(rootLUs.map(it=>it.lu_name)).then(response=>{requestedEntitiesCtrl.customLogicFlows=(response.result||[]).map(flow=>(flow.newFlowName=`${flow.luName}#${flow.flowName}`,flow)),"C"===requestedEntitiesCtrl.taskData.selection_method&&requestedEntitiesCtrl.taskData.selection_param_value&&requestedEntitiesCtrl.customLogicChange()}),requestedEntitiesCtrl.customLogicChange=()=>{if(requestedEntitiesCtrl.taskData.selection_param_value){const chosenFlow=requestedEntitiesCtrl.customLogicFlows.find(it=>it.newFlowName===requestedEntitiesCtrl.taskData.selection_param_value);chosenFlow&&(requestedEntitiesCtrl.flowDesc=chosenFlow.Description,TDMService.getCustomLogicParams(chosenFlow.luName,chosenFlow.flowName).then(response=>{if(requestedEntitiesCtrl.taskData.CustomLogicParams=response.result||[],requestedEntitiesCtrl.taskData.CustomLogicParams=requestedEntitiesCtrl.taskData.CustomLogicParams.map(it=>(it.displayName=it.name.replace("_"," "),it)),requestedEntitiesCtrl.taskData.parameters)try{const params=JSON.parse(requestedEntitiesCtrl.taskData.parameters);params&&params.inputs&&requestedEntitiesCtrl.taskData.CustomLogicParams.forEach(customParam=>{const param=params.inputs.find(it=>it.name===customParam.name);param&&(customParam.value=param.value)})}catch(err){console.log(err)}}))}},requestedEntitiesCtrl.updateParams=()=>{"LOAD"===requestedEntitiesCtrl.taskData.task_type&&requestedEntitiesCtrl.taskData.load_entity&&TDMService.getGenericAPI("businessentity/"+requestedEntitiesCtrl.taskData.be_id+"/sourceEnv/"+requestedEntitiesCtrl.taskData.source_env_name+"/parameters").then((function(response){if("SUCCESS"==response.errorCode){requestedEntitiesCtrl.parameters=response.result;Object.keys(requestedEntitiesCtrl.parameters);_.map(requestedEntitiesCtrl.taskData.selectedLogicalUnits,(function(lu){return lu.lu_name.toLowerCase()}));requestedEntitiesCtrl.parameters=_.map(requestedEntitiesCtrl.parameters,(function(value,key){return{param_name:key,name:value.PARAM_NAME,param_type:value.PARAM_TYPE,COMBO_INDICATOR:value.COMBO_INDICATOR,valid_values:value.VALID_VALUES,min_value:"number"==value.PARAM_TYPE?parseFloat(value.MIN_VALUE):0,max_value:"number"==value.PARAM_TYPE?parseFloat(value.MAX_VALUE):0}}))}else toastr.error("Business entity # "+requestedEntitiesCtrl.taskData.be_id,"Failed to get business entity parameters")}))},requestedEntitiesCtrl.updateParams(),requestedEntitiesCtrl.parametersRandomChange=()=>{requestedEntitiesCtrl.parametersRandom?requestedEntitiesCtrl.taskData.selection_method="PR":requestedEntitiesCtrl.taskData.selection_method="P"},requestedEntitiesCtrl.parametersCount=0,$scope.getEntitesCount=function(force){if("()"!=requestedEntitiesCtrl.taskData.selection_param_value)if(requestedEntitiesCtrl.taskData.selection_param_value){if(force||requestedEntitiesCtrl.taskData.selection_param_value!==requestedEntitiesCtrl.perviousQueryParams){requestedEntitiesCtrl.parametersError=!1;requestedEntitiesCtrl.taskData.selection_param_value,requestedEntitiesCtrl.taskData.environment_id,requestedEntitiesCtrl.taskData.be_id;requestedEntitiesCtrl.taskData.source_env_name&&(requestedEntitiesCtrl.parametersCount="inprogress",TDMService.postGenericAPI("businessentity/"+requestedEntitiesCtrl.taskData.be_id+"/sourceEnv/"+requestedEntitiesCtrl.taskData.source_env_name+"/analysiscount",{where:requestedEntitiesCtrl.taskData.selection_param_value,tar_env_name:requestedEntitiesCtrl.taskData.environment_name,filterout_reserved:requestedEntitiesCtrl.taskData.filterout_reserved}).then((function(response){"SUCCESS"==response.errorCode?requestedEntitiesCtrl.parametersCount=response.result:requestedEntitiesCtrl.parametersCount=0})))}}else requestedEntitiesCtrl.parametersCount=0;else requestedEntitiesCtrl.parametersCount=0},$scope.$watch("requestedEntitiesCtrl.filter",(function(newValue){requestedEntitiesCtrl.analysisCountTimeout&&$timeout.cancel(requestedEntitiesCtrl.analysisCountTimeout),requestedEntitiesCtrl.analysisCountTimeout=$timeout((function(){if(requestedEntitiesCtrl.taskData.be_id){var checkGroup=function(group){if(""==group.operator)return!1;for(var i=0;i<group.rules.length;i++)if(0==((rule=group.rules[i]).group?checkGroup(rule.group):""!==rule.condition&&""!==rule.data&&""!==rule.field))return!1;var rule;return!0};if(newValue&&1==checkGroup(newValue.group)){requestedEntitiesCtrl.taskData.parameters=JSON.stringify(newValue);var query={query:computed(newValue.group)};requestedEntitiesCtrl.taskData.selection_param_value=query.query}$scope.getEntitesCount()}}),500)}),!0),requestedEntitiesCtrl.selectionMethodChange=()=>{"LOAD"!=requestedEntitiesCtrl.taskData.task_type||!requestedEntitiesCtrl.taskData.version_ind||"L"!==requestedEntitiesCtrl.taskData.selection_method&&"ALL"!==requestedEntitiesCtrl.taskData.selection_method||requestedEntitiesCtrl.getVersionsForLoad()},requestedEntitiesCtrl.entitiesListChange=function(){requestedEntitiesCtrl.entitiesListChangeTimeout&&$timeout.cancel(requestedEntitiesCtrl.entitiesListChangeTimeout),"LOAD"==requestedEntitiesCtrl.taskData.task_type&&requestedEntitiesCtrl.taskData.version_ind&&"ALL"!==requestedEntitiesCtrl.taskData.selection_method&&(requestedEntitiesCtrl.entitiesListChangeTimeout=$timeout((function(){requestedEntitiesCtrl.getVersionsForLoad()}),1e3))},requestedEntitiesCtrl.toggleVersion=function(task_execution_id){requestedEntitiesCtrl.versionsToggle[task_execution_id]=!requestedEntitiesCtrl.versionsToggle[task_execution_id],requestedEntitiesCtrl.dtInstanceVersions&&requestedEntitiesCtrl.dtInstanceVersions.reloadData&&requestedEntitiesCtrl.dtInstanceVersions.reloadData((function(){}))},requestedEntitiesCtrl.getVersionsForLoad=function(){var entitiesPassed=!0;"ALL"!==requestedEntitiesCtrl.taskData.selection_method&&requestedEntitiesCtrl.taskData.selection_param_value&&$scope.maxToCopy&&(entitiesPassed=new RegExp("^((.*|-)+(?:,(.*|-)+){0,"+(($scope.maxToCopy||1e9)-1)+"})?$").test(requestedEntitiesCtrl.taskData.selection_param_value),requestedEntitiesCtrl.enititesListFailedPatternTest=!1);if(requestedEntitiesCtrl.versionForLoadFrom&&requestedEntitiesCtrl.versionForLoadTo&&requestedEntitiesCtrl.taskData.selectedLogicalUnits&&requestedEntitiesCtrl.taskData.source_env_name&&("ALL"===requestedEntitiesCtrl.taskData.selection_method||requestedEntitiesCtrl.taskData.selection_param_value&&entitiesPassed)){requestedEntitiesCtrl.loadingTableVersions=!0;var from=new Date(requestedEntitiesCtrl.versionForLoadFrom);from.setHours(0),from.setMinutes(0),from.setSeconds(0);var to=new Date(requestedEntitiesCtrl.versionForLoadTo);to.setHours(23),to.setMinutes(59),to.setSeconds(59),TDMService.postGenericAPI("tasks/versionsForLoad",{fromDate:from,toDate:to,entitiesList:"ALL"===requestedEntitiesCtrl.taskData.selection_method?"":requestedEntitiesCtrl.taskData.selection_param_value.toString(),lu_list:requestedEntitiesCtrl.taskData.selectedLogicalUnits,source_env_name:requestedEntitiesCtrl.taskData.source_env_name,target_env_name:requestedEntitiesCtrl.taskData.environment_name,be_id:requestedEntitiesCtrl.taskData.be_id}).then((function(response){if("SUCCESS"==response.errorCode){(data=>{var executionIdsSet=new Set;for(item of data)executionIdsSet.has(item.task_execution_id)||"Y"!=item.root_indicator||(item.root_indicator="YY",executionIdsSet.add(item.task_execution_id))})(response.result.ListOfVersions),requestedEntitiesCtrl.taskData.versionsForLoad=_.map(response.result.ListOfVersions,version=>(version.execution_note=version.execution_note||"",version)),requestedEntitiesCtrl.taskData.versionsForLoad=_.sortBy(requestedEntitiesCtrl.taskData.versionsForLoad,version=>-1*new Date(version.version_datetime)),$timeout((function(){requestedEntitiesCtrl.dtInstanceVersions&&requestedEntitiesCtrl.dtInstanceVersions.reloadData&&requestedEntitiesCtrl.dtInstanceVersions.reloadData((function(){}))}),100),requestedEntitiesCtrl.loadingTableVersions=!1}else toastr.error("New Task # Failed to get Versions for Load")}))}else requestedEntitiesCtrl.taskData.selection_param_value||"ALL"===requestedEntitiesCtrl.taskData.selection_method?entitiesPassed||(requestedEntitiesCtrl.enititesListFailedPatternTest=!0):(requestedEntitiesCtrl.taskData.versionsForLoad=[],requestedEntitiesCtrl.dtInstanceVersions&&requestedEntitiesCtrl.dtInstanceVersions.reloadData&&requestedEntitiesCtrl.dtInstanceVersions.reloadData((function(){})))},$scope.$watch("requestedEntitiesCtrl.taskData.selection_method",(newValue,oldValue)=>{newValue!==oldValue&&(newValue||"").charAt(0)!==(oldValue||"").charAt(0)&&(requestedEntitiesCtrl.taskData.selection_param_value="")}),requestedEntitiesCtrl.versionsToggle={},requestedEntitiesCtrl.taskData.versionsForLoad=[],requestedEntitiesCtrl.dtInstanceVersions={},requestedEntitiesCtrl.dtColumnsVersions=[],requestedEntitiesCtrl.dtColumnDefsVersions=[],requestedEntitiesCtrl.headersVersions=[{column:"collapse",name:"",clickAble:!1},{column:"actions",name:"",clickAble:!1},{column:"version_name",name:"Version Name",clickAble:!0},{column:"task_id",name:"Task Id",clickAble:!1},{column:"task_execution_id",name:"Task Execution Id",clickAble:!1},{column:"version_no",name:"Version Number",clickAble:!1},{column:"execution_note",name:"Exection Note",clickAble:!1},{column:"task_last_updated_by",name:"Last Updated By",clickAble:!1},{column:"version_type",name:"Version Type",clickAble:!1},{column:"version_datetime",name:"Date Time",type:"date",clickAble:!1},{column:"lu_name",name:"Logical Unit Name",clickAble:!1},{column:"number_of_extracted_entities",name:"Number of Processed Entities",clickAble:!1},{column:"num_of_succeeded_entities",name:"Number of Succeeded Entities",clickAble:!1},{column:"num_of_failed_entities",name:"Number of Failed Entities",clickAble:!1},{column:"rootIndicator",name:"Root LU",clickAble:!1}];for(var changeToLocalDate=function(data,type,full,meta){return moment(data).format("DD MMM YYYY, HH:mm")},renderSelectionColumn=function(data,type,full,meta){return full.isRoot?'<input type="radio" ng-value="\''+full.fabric_execution_id+'\'" name="versionsTableSelection" ng-model="requestedEntitiesCtrl.taskData.selectedVersionToLoad">':""},renderCollapseColumn=function(data,type,full,meta){return full.isRoot?'<a class="toggleVersions '+(requestedEntitiesCtrl.versionsToggle[full.task_execution_id]?"active":"")+'" ng-click="requestedEntitiesCtrl.toggleVersion('+full.task_execution_id+')"><i class="fa arrow"></i> </a>':""},i=0;i<requestedEntitiesCtrl.headersVersions.length;i++)"actions"==requestedEntitiesCtrl.headersVersions[i].column?requestedEntitiesCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(requestedEntitiesCtrl.headersVersions[i].column).withTitle(requestedEntitiesCtrl.headersVersions[i].name).renderWith(renderSelectionColumn).notSortable()):"collapse"==requestedEntitiesCtrl.headersVersions[i].column?requestedEntitiesCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(requestedEntitiesCtrl.headersVersions[i].column).withTitle(requestedEntitiesCtrl.headersVersions[i].name).renderWith(renderCollapseColumn).notSortable()):"date"==requestedEntitiesCtrl.headersVersions[i].type?requestedEntitiesCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(requestedEntitiesCtrl.headersVersions[i].column).withTitle(requestedEntitiesCtrl.headersVersions[i].name).renderWith(changeToLocalDate).notSortable()):"task_id"==requestedEntitiesCtrl.headersVersions[i].column||"version_name"==requestedEntitiesCtrl.headersVersions[i].column?requestedEntitiesCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(requestedEntitiesCtrl.headersVersions[i].column).withTitle(requestedEntitiesCtrl.headersVersions[i].name).notSortable()):"rootIndicator"==requestedEntitiesCtrl.headersVersions[i].column?requestedEntitiesCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(requestedEntitiesCtrl.headersVersions[i].column).withTitle(requestedEntitiesCtrl.headersVersions[i].name).notSortable().notVisible()):requestedEntitiesCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(requestedEntitiesCtrl.headersVersions[i].column).withTitle(requestedEntitiesCtrl.headersVersions[i].name).notSortable());requestedEntitiesCtrl.dtOptionsVersions=DTOptionsBuilder.fromFnPromise((function(){return function(){var deferred=$q.defer(),versionsForLoad=[];requestedEntitiesCtrl.groupedSelections=new Set,requestedEntitiesCtrl.taskData.selectedLogicalUnits.forEach(lu=>{const luTemp=_.find(requestedEntitiesCtrl.taskData.allLogicalUnits,{lu_name:lu.lu_name});lu.lu_parent_name=luTemp.lu_parent_name});var selectedVersion,rootLUs=_.filter(requestedEntitiesCtrl.taskData.selectedLogicalUnits,{lu_parent_name:null});(requestedEntitiesCtrl.taskData.versionsForLoad.forEach((function(versionForLoad){if(_.find(rootLUs,{lu_name:versionForLoad.lu_name})?versionForLoad.rootIndicator=!0:versionForLoad.rootIndicator=!1,versionForLoad.rootIndicator&&_.findIndex(versionsForLoad,{task_execution_id:versionForLoad.task_execution_id,isRoot:!0})<0)return versionForLoad.isRoot=!0,versionForLoad.rootIndicator=!0,void versionsForLoad.push(versionForLoad);requestedEntitiesCtrl.versionsToggle[versionForLoad.task_execution_id]&&(versionForLoad.isRoot=!1,versionsForLoad.push(versionForLoad))})),!requestedEntitiesCtrl.selectedVersionToLoad&&requestedEntitiesCtrl.taskData.selected_version_task_exe_id)&&((selectedVersion=_.find(requestedEntitiesCtrl.taskData.versionsForLoad,{rootIndicator:!0,task_execution_id:requestedEntitiesCtrl.taskData.selected_version_task_exe_id}))&&(requestedEntitiesCtrl.selectedVersionToLoad=selectedVersion.fabric_execution_id));(console.log(versionsForLoad),deferred.resolve(versionsForLoad),!requestedEntitiesCtrl.taskData.selectedVersionToLoad&&requestedEntitiesCtrl.taskData.selected_version_task_exe_id)&&((selectedVersion=_.find(requestedEntitiesCtrl.taskData.versionsForLoad,{rootIndicator:!0,task_execution_id:requestedEntitiesCtrl.taskData.selected_version_task_exe_id}))&&(requestedEntitiesCtrl.taskData.selectedVersionToLoad=selectedVersion.fabric_execution_id));return deferred.promise}()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("order",[[9,"desc"],[14,"desc"]]).withOption("search",{caseInsensitive:!1}),requestedEntitiesCtrl.dtOptionsVersions.withLightColumnFilter({2:{type:"text"},3:{type:"text"},4:{type:"text"},5:{type:"text"},6:{type:"text"},7:{type:"text"},8:{type:"text"},9:{type:"text"},10:{type:"text"},11:{type:"text"},12:{type:"text"},13:{type:"text"}}),requestedEntitiesCtrl.parametersRandom=!1,requestedEntitiesCtrl.taskData.task_id?"P"===requestedEntitiesCtrl.taskData.selection_method||"PR"===requestedEntitiesCtrl.taskData.selection_method&&(requestedEntitiesCtrl.parametersRandom=!0):requestedEntitiesCtrl.taskData.selection_method||(requestedEntitiesCtrl.taskData.selection_method="L")},controllerAs:"requestedEntitiesCtrl"}}angular.module("TDM-FE").directive("requestedEntities",requestedEntities);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
