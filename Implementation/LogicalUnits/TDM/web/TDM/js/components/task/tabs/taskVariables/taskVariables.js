function taskVariables(){return{restrict:"E",templateUrl:"js/components/task/tabs/taskVariables/taskVariables.html",scope:{content:"=",disableChange:"=",form:"=",disabled:"=",back:"="},controller:function($scope,TDMService,toastr,$timeout,AuthService,$state,DTOptionsBuilder,DTColumnBuilder,$q,$compile){var taskVariablesCtrl=this;taskVariablesCtrl.taskData=$scope.content,taskVariablesCtrl.dtInstance={},taskVariablesCtrl.dtColumns=[],taskVariablesCtrl.dtColumnDefs=[],taskVariablesCtrl.closeSetVariableModal=global=>{if(taskVariablesCtrl.SetVariableModalToggle=!1,global&&global.global_name&&global.global_value){var origGlobal=_.find(taskVariablesCtrl.taskData.globals,{global_name:global.global_name,index:global.index});origGlobal?(origGlobal.lu_name=global.lu_name,origGlobal.global_value=global.global_value):(global.index=taskVariablesCtrl.taskData.globals.length,taskVariablesCtrl.taskData.globals.push(global)),$timeout((function(){taskVariablesCtrl.dtInstance&&taskVariablesCtrl.dtInstance.reloadData&&taskVariablesCtrl.dtInstance.reloadData((function(){}))}),100)}taskVariablesCtrl.globalForEdit=null},taskVariablesCtrl.editGlobal=(global,index)=>{taskVariablesCtrl.SetVariableModalToggle=!0,taskVariablesCtrl.globalForEdit=global},taskVariablesCtrl.headers=[{column:"actions",name:""},{column:"global_name",name:"Variable Name"},{column:"global_value",name:"Variable Value"},{column:"lu_name",name:"Logical Unit"}];for(var renderSelectionColumn=function(data,type,full,meta){return'<div style="display: flex;justify-content: space-around;max-width: 100px;"><div><img src="icons/edit.svg"  alt="edit" uib-tooltip="Edit Global" tooltip-placement="top"ng-click="taskVariablesCtrl.editGlobal(taskVariablesCtrl.taskData.globals['+meta.row+"], "+meta.row+')"></div><div><img  src="icons/delete-icon.svg" alt="edit" uib-tooltip="Delete Global" tooltip-placement="top" ng-click="taskVariablesCtrl.removeGlobal(\''+full.global_name+"')\"></div></div>"},i=0;i<taskVariablesCtrl.headers.length;i++)"actions"==taskVariablesCtrl.headers[i].column?taskVariablesCtrl.dtColumns.push(DTColumnBuilder.newColumn(taskVariablesCtrl.headers[i].column).withTitle(taskVariablesCtrl.headers[i].name).renderWith(renderSelectionColumn).withOption("width","200")):taskVariablesCtrl.dtColumns.push(DTColumnBuilder.newColumn(taskVariablesCtrl.headers[i].column).withTitle(taskVariablesCtrl.headers[i].name));taskVariablesCtrl.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return(deferred=$q.defer()).resolve(taskVariablesCtrl.taskData.globals||[]),deferred.promise;var deferred})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),taskVariablesCtrl.dtOptions.withLightColumnFilter({1:{type:"text"},2:{type:"text"}}),taskVariablesCtrl.removeGlobal=function(globalName){var index=_.findIndex(taskVariablesCtrl.taskData.globals,{global_name:globalName});index>=0&&(taskVariablesCtrl.taskData.globals.splice(index,1),$timeout((function(){taskVariablesCtrl.dtInstance&&taskVariablesCtrl.dtInstance.reloadData&&taskVariablesCtrl.dtInstance.reloadData((function(){}))}),100))},taskVariablesCtrl.taskData.globals||(taskVariablesCtrl.taskData.task_id?TDMService.getGenericAPI("task/"+taskVariablesCtrl.taskData.task_id+"/globals").then((function(response){taskVariablesCtrl.taskData.globals=response.result,taskVariablesCtrl.dtInstance&&taskVariablesCtrl.dtInstance.reloadData&&taskVariablesCtrl.dtInstance.reloadData((function(){}))})):taskVariablesCtrl.taskData.globals=[])},controllerAs:"taskVariablesCtrl"}}angular.module("TDM-FE").directive("taskVariables",taskVariables);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
