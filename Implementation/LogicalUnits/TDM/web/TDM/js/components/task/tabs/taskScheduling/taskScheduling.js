function taskScheduling(){return{restrict:"E",templateUrl:"js/components/task/tabs/taskScheduling/taskScheduling.html",scope:{content:"=",disableChange:"=",form:"=",disabled:"=",back:"=",userRole:"=",sourceEnvOwner:"=",targetEnvOwner:"="},controller:function($scope,TDMService,toastr,$timeout,AuthService,$state,DTOptionsBuilder,DTColumnBuilder,$q,$compile){var taskSchedulingCtrl=this;taskSchedulingCtrl.taskData=$scope.content,taskSchedulingCtrl.minDate=new Date,taskSchedulingCtrl.minDate=moment(taskSchedulingCtrl.minDate),taskSchedulingCtrl.minDate.milliseconds(0),taskSchedulingCtrl.minDate.seconds(0),taskSchedulingCtrl.minDate.minutes(0),taskSchedulingCtrl.minDate.hours(0),taskSchedulingCtrl.minDate.add(1,"days"),taskSchedulingCtrl.schedulerOptions={formInputClass:"form-control1 cron-gen-input",formSelectClass:"form-control1 cron-gen-select",formRadioClass:"cron-gen-radio",formCheckboxClass:"cron-gen-checkbox",hideMinutesTab:!1,hideHourlyTab:!1,hideDailyTab:!1,hideWeeklyTab:!1,hideMonthlyTab:!1,hideYearlyTab:!1,hideAdvancedTab:!1,use24HourTime:!0,hideSeconds:!1};var userRole=AuthService.getRole();taskSchedulingCtrl.userRoleType=userRole.type,TDMService.getTimeZone().then((function(response){"SUCCESS"==response.errorCode?taskSchedulingCtrl.timeZoneMessage="Task execution time will be based on "+response.result.current_setting+" time zone":taskSchedulingCtrl.timeZoneMessage="Task execution time will be based on DB time zone"})),"immediate"!==taskSchedulingCtrl.taskData.scheduler&&taskSchedulingCtrl.taskData.scheduler?(taskSchedulingCtrl.selectSchedule="schedule",taskSchedulingCtrl.taskData.scheduler||(taskSchedulingCtrl.taskData.scheduler="0 0/1 * 1/1 * ? *")):taskSchedulingCtrl.selectSchedule="immediate",taskSchedulingCtrl.taskData.scheduling_end_date?(taskSchedulingCtrl.taskData.scheduling_end_date=moment(new Date(taskSchedulingCtrl.taskData.scheduling_end_date)),taskSchedulingCtrl.scheduleEndBy="endBy"):taskSchedulingCtrl.scheduleEndBy="noEndBy"},controllerAs:"taskSchedulingCtrl"}}angular.module("TDM-FE").directive("taskScheduling",taskScheduling);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdGFzay90YWJzL3Rhc2tTY2hlZHVsaW5nL3Rhc2tTY2hlZHVsaW5nLmpzIl0sIm5hbWVzIjpbInRhc2tTY2hlZHVsaW5nIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCIsInNjb3BlIiwiY29udGVudCIsImRpc2FibGVDaGFuZ2UiLCJmb3JtIiwiZGlzYWJsZWQiLCJiYWNrIiwidXNlclJvbGUiLCJzb3VyY2VFbnZPd25lciIsInRhcmdldEVudk93bmVyIiwiY29udHJvbGxlciIsIiRzY29wZSIsIlRETVNlcnZpY2UiLCJ0b2FzdHIiLCIkdGltZW91dCIsIkF1dGhTZXJ2aWNlIiwiJHN0YXRlIiwiRFRPcHRpb25zQnVpbGRlciIsIkRUQ29sdW1uQnVpbGRlciIsIiRxIiwiJGNvbXBpbGUiLCJ0YXNrU2NoZWR1bGluZ0N0cmwiLCJ0aGlzIiwidGFza0RhdGEiLCJtaW5EYXRlIiwiRGF0ZSIsIm1vbWVudCIsIm1pbGxpc2Vjb25kcyIsInNlY29uZHMiLCJtaW51dGVzIiwiaG91cnMiLCJhZGQiLCJzY2hlZHVsZXJPcHRpb25zIiwiZm9ybUlucHV0Q2xhc3MiLCJmb3JtU2VsZWN0Q2xhc3MiLCJmb3JtUmFkaW9DbGFzcyIsImZvcm1DaGVja2JveENsYXNzIiwiaGlkZU1pbnV0ZXNUYWIiLCJoaWRlSG91cmx5VGFiIiwiaGlkZURhaWx5VGFiIiwiaGlkZVdlZWtseVRhYiIsImhpZGVNb250aGx5VGFiIiwiaGlkZVllYXJseVRhYiIsImhpZGVBZHZhbmNlZFRhYiIsInVzZTI0SG91clRpbWUiLCJoaWRlU2Vjb25kcyIsImdldFJvbGUiLCJ1c2VyUm9sZVR5cGUiLCJ0eXBlIiwiZ2V0VGltZVpvbmUiLCJ0aGVuIiwicmVzcG9uc2UiLCJlcnJvckNvZGUiLCJ0aW1lWm9uZU1lc3NhZ2UiLCJyZXN1bHQiLCJjdXJyZW50X3NldHRpbmciLCJzY2hlZHVsZXIiLCJzZWxlY3RTY2hlZHVsZSIsInNjaGVkdWxpbmdfZW5kX2RhdGUiLCJzY2hlZHVsZUVuZEJ5IiwiY29udHJvbGxlckFzIiwiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsaUJBNkRMLE1BQU8sQ0FDSEMsU0FBVSxJQUNWQyxZQTdEVyw2REE4RFhDLE1BQU8sQ0FDSEMsUUFBUyxJQUNUQyxjQUFlLElBQ2ZDLEtBQU0sSUFDTkMsU0FBVSxJQUNWQyxLQUFNLElBQ05DLFNBQVUsSUFDVkMsZUFBZ0IsSUFDaEJDLGVBQWdCLEtBRXBCQyxXQXRFYSxTQUFVQyxPQUFRQyxXQUFZQyxPQUFRQyxTQUFVQyxZQUFhQyxPQUFRQyxpQkFBa0JDLGdCQUFpQkMsR0FBSUMsVUFDekgsSUFBSUMsbUJBQXFCQyxLQUN6QkQsbUJBQW1CRSxTQUFXWixPQUFPVCxRQUVyQ21CLG1CQUFtQkcsUUFBVSxJQUFJQyxLQUNqQ0osbUJBQW1CRyxRQUFVRSxPQUFPTCxtQkFBbUJHLFNBQ3ZESCxtQkFBbUJHLFFBQVFHLGFBQWEsR0FDeENOLG1CQUFtQkcsUUFBUUksUUFBUSxHQUNuQ1AsbUJBQW1CRyxRQUFRSyxRQUFRLEdBQ25DUixtQkFBbUJHLFFBQVFNLE1BQU0sR0FDakNULG1CQUFtQkcsUUFBUU8sSUFBSSxFQUFHLFFBQ2xDVixtQkFBbUJXLGlCQUFtQixDQUNsQ0MsZUFBZ0IsK0JBQ2hCQyxnQkFBaUIsZ0NBQ2pCQyxlQUFnQixpQkFDaEJDLGtCQUFtQixvQkFDbkJDLGdCQUFnQixFQUNoQkMsZUFBZSxFQUNmQyxjQUFjLEVBQ2RDLGVBQWUsRUFDZkMsZ0JBQWdCLEVBQ2hCQyxlQUFlLEVBQ2ZDLGlCQUFpQixFQUNqQkMsZUFBZSxFQUNmQyxhQUFhLEdBR2pCLElBQUl0QyxTQUFXUSxZQUFZK0IsVUFDM0J6QixtQkFBbUIwQixhQUFleEMsU0FBU3lDLEtBRzNDcEMsV0FBV3FDLGNBQWNDLE1BQUssU0FBVUMsVUFDVixXQUF0QkEsU0FBU0MsVUFDVC9CLG1CQUFtQmdDLGdCQUFrQix3Q0FBMENGLFNBQVNHLE9BQU9DLGdCQUFrQixhQUVqSGxDLG1CQUFtQmdDLGdCQUFrQix1REFJQyxjQUExQ2hDLG1CQUFtQkUsU0FBU2lDLFdBQThCbkMsbUJBQW1CRSxTQUFTaUMsV0FJdEZuQyxtQkFBbUJvQyxlQUFpQixXQUMvQnBDLG1CQUFtQkUsU0FBU2lDLFlBQzdCbkMsbUJBQW1CRSxTQUFTaUMsVUFBWSxzQkFMNUNuQyxtQkFBbUJvQyxlQUFpQixZQVNwQ3BDLG1CQUFtQkUsU0FBU21DLHFCQUM1QnJDLG1CQUFtQkUsU0FBU21DLG9CQUFzQmhDLE9BQU8sSUFBSUQsS0FBS0osbUJBQW1CRSxTQUFTbUMsc0JBQzlGckMsbUJBQW1Cc0MsY0FBZ0IsU0FFbkN0QyxtQkFBbUJzQyxjQUFnQixXQWtCdkNDLGFBQWMsc0JBS3RCQyxRQUNLQyxPQUFPLFVBQ1BDLFVBQVUsaUJBQWtCakUiLCJmaWxlIjoiY29tcG9uZW50cy90YXNrL3RhYnMvdGFza1NjaGVkdWxpbmcvdGFza1NjaGVkdWxpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0YXNrU2NoZWR1bGluZygpIHtcblxuICAgIHZhciB0ZW1wbGF0ZSA9IFwianMvY29tcG9uZW50cy90YXNrL3RhYnMvdGFza1NjaGVkdWxpbmcvdGFza1NjaGVkdWxpbmcuaHRtbFwiO1xuXG4gICAgdmFyIGNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoJHNjb3BlLCBURE1TZXJ2aWNlLCB0b2FzdHIsICR0aW1lb3V0LCBBdXRoU2VydmljZSwgJHN0YXRlLCBEVE9wdGlvbnNCdWlsZGVyLCBEVENvbHVtbkJ1aWxkZXIsICRxLCAkY29tcGlsZSkge1xuICAgICAgICB2YXIgdGFza1NjaGVkdWxpbmdDdHJsID0gdGhpcztcbiAgICAgICAgdGFza1NjaGVkdWxpbmdDdHJsLnRhc2tEYXRhID0gJHNjb3BlLmNvbnRlbnQ7XG5cbiAgICAgICAgdGFza1NjaGVkdWxpbmdDdHJsLm1pbkRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB0YXNrU2NoZWR1bGluZ0N0cmwubWluRGF0ZSA9IG1vbWVudCh0YXNrU2NoZWR1bGluZ0N0cmwubWluRGF0ZSk7XG4gICAgICAgIHRhc2tTY2hlZHVsaW5nQ3RybC5taW5EYXRlLm1pbGxpc2Vjb25kcygwKTtcbiAgICAgICAgdGFza1NjaGVkdWxpbmdDdHJsLm1pbkRhdGUuc2Vjb25kcygwKTtcbiAgICAgICAgdGFza1NjaGVkdWxpbmdDdHJsLm1pbkRhdGUubWludXRlcygwKTtcbiAgICAgICAgdGFza1NjaGVkdWxpbmdDdHJsLm1pbkRhdGUuaG91cnMoMCk7XG4gICAgICAgIHRhc2tTY2hlZHVsaW5nQ3RybC5taW5EYXRlLmFkZCgxLCAnZGF5cycpO1xuICAgICAgICB0YXNrU2NoZWR1bGluZ0N0cmwuc2NoZWR1bGVyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGZvcm1JbnB1dENsYXNzOiAnZm9ybS1jb250cm9sMSBjcm9uLWdlbi1pbnB1dCcsIC8vIEZvcm0gaW5wdXQgY2xhc3Mgb3ZlcnJpZGVcbiAgICAgICAgICAgIGZvcm1TZWxlY3RDbGFzczogJ2Zvcm0tY29udHJvbDEgY3Jvbi1nZW4tc2VsZWN0JywgLy8gU2VsZWN0IGNsYXNzIG92ZXJyaWRlXG4gICAgICAgICAgICBmb3JtUmFkaW9DbGFzczogJ2Nyb24tZ2VuLXJhZGlvJywgLy8gUmFkaW8gY2xhc3Mgb3ZlcnJpZGVcbiAgICAgICAgICAgIGZvcm1DaGVja2JveENsYXNzOiAnY3Jvbi1nZW4tY2hlY2tib3gnLCAvLyBSYWRpbyBjbGFzcyBvdmVycmlkZVxuICAgICAgICAgICAgaGlkZU1pbnV0ZXNUYWI6IGZhbHNlLCAvLyBXaGV0aGVyIHRvIGhpZGUgdGhlIG1pbnV0ZXMgdGFiXG4gICAgICAgICAgICBoaWRlSG91cmx5VGFiOiBmYWxzZSwgLy8gV2hldGhlciB0byBoaWRlIHRoZSBob3VybHkgdGFiXG4gICAgICAgICAgICBoaWRlRGFpbHlUYWI6IGZhbHNlLCAvLyBXaGV0aGVyIHRvIGhpZGUgdGhlIGRhaWx5IHRhYlxuICAgICAgICAgICAgaGlkZVdlZWtseVRhYjogZmFsc2UsIC8vIFdoZXRoZXIgdG8gaGlkZSB0aGUgd2Vla2x5IHRhYlxuICAgICAgICAgICAgaGlkZU1vbnRobHlUYWI6IGZhbHNlLCAvLyBXaGV0aGVyIHRvIGhpZGUgdGhlIG1vbnRobHkgdGFiXG4gICAgICAgICAgICBoaWRlWWVhcmx5VGFiOiBmYWxzZSwgLy8gV2hldGhlciB0byBoaWRlIHRoZSB5ZWFybHkgdGFiXG4gICAgICAgICAgICBoaWRlQWR2YW5jZWRUYWI6IGZhbHNlLCAvLyBXaGV0aGVyIHRvIGhpZGUgdGhlIGFkdmFuY2VkIHRhYlxuICAgICAgICAgICAgdXNlMjRIb3VyVGltZTogdHJ1ZSwgLy8gV2hldGhlciB0byBzaG93IEFNL1BNIG9uIHRoZSB0aW1lIHNlbGVjdG9yc1xuICAgICAgICAgICAgaGlkZVNlY29uZHM6IGZhbHNlIC8vIFdoZXRoZXIgdG8gc2hvdy9oaWRlIHRoZSBzZWNvbmRzIHRpbWUgcGlja2VyXG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHVzZXJSb2xlID0gQXV0aFNlcnZpY2UuZ2V0Um9sZSgpO1xuICAgICAgICB0YXNrU2NoZWR1bGluZ0N0cmwudXNlclJvbGVUeXBlID0gdXNlclJvbGUudHlwZTtcblxuXG4gICAgICAgIFRETVNlcnZpY2UuZ2V0VGltZVpvbmUoKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgIHRhc2tTY2hlZHVsaW5nQ3RybC50aW1lWm9uZU1lc3NhZ2UgPSAnVGFzayBleGVjdXRpb24gdGltZSB3aWxsIGJlIGJhc2VkIG9uICcgKyByZXNwb25zZS5yZXN1bHQuY3VycmVudF9zZXR0aW5nICsgJyB0aW1lIHpvbmUnXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhc2tTY2hlZHVsaW5nQ3RybC50aW1lWm9uZU1lc3NhZ2UgPSAnVGFzayBleGVjdXRpb24gdGltZSB3aWxsIGJlIGJhc2VkIG9uIERCIHRpbWUgem9uZSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRhc2tTY2hlZHVsaW5nQ3RybC50YXNrRGF0YS5zY2hlZHVsZXIgPT09ICdpbW1lZGlhdGUnIHx8ICF0YXNrU2NoZWR1bGluZ0N0cmwudGFza0RhdGEuc2NoZWR1bGVyKSB7XG4gICAgICAgICAgICB0YXNrU2NoZWR1bGluZ0N0cmwuc2VsZWN0U2NoZWR1bGUgPSAnaW1tZWRpYXRlJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhc2tTY2hlZHVsaW5nQ3RybC5zZWxlY3RTY2hlZHVsZSA9ICdzY2hlZHVsZSc7XG4gICAgICAgICAgICBpZiAoIXRhc2tTY2hlZHVsaW5nQ3RybC50YXNrRGF0YS5zY2hlZHVsZXIpe1xuICAgICAgICAgICAgICAgIHRhc2tTY2hlZHVsaW5nQ3RybC50YXNrRGF0YS5zY2hlZHVsZXIgPSAnMCAwLzEgKiAxLzEgKiA/IConO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRhc2tTY2hlZHVsaW5nQ3RybC50YXNrRGF0YS5zY2hlZHVsaW5nX2VuZF9kYXRlKSB7XG4gICAgICAgICAgICB0YXNrU2NoZWR1bGluZ0N0cmwudGFza0RhdGEuc2NoZWR1bGluZ19lbmRfZGF0ZSA9IG1vbWVudChuZXcgRGF0ZSh0YXNrU2NoZWR1bGluZ0N0cmwudGFza0RhdGEuc2NoZWR1bGluZ19lbmRfZGF0ZSkpO1xuICAgICAgICAgICAgdGFza1NjaGVkdWxpbmdDdHJsLnNjaGVkdWxlRW5kQnkgPSBcImVuZEJ5XCJcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhc2tTY2hlZHVsaW5nQ3RybC5zY2hlZHVsZUVuZEJ5ID0gXCJub0VuZEJ5XCJcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICAgIHRlbXBsYXRlVXJsOiB0ZW1wbGF0ZSxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6ICc9JyxcbiAgICAgICAgICAgIGRpc2FibGVDaGFuZ2U6ICc9JyxcbiAgICAgICAgICAgIGZvcm06ICc9JyxcbiAgICAgICAgICAgIGRpc2FibGVkOiAnPScsXG4gICAgICAgICAgICBiYWNrOiAnPScsXG4gICAgICAgICAgICB1c2VyUm9sZTogJz0nLFxuICAgICAgICAgICAgc291cmNlRW52T3duZXI6ICc9JyxcbiAgICAgICAgICAgIHRhcmdldEVudk93bmVyOiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlcjogY29udHJvbGxlcixcbiAgICAgICAgY29udHJvbGxlckFzOiAndGFza1NjaGVkdWxpbmdDdHJsJ1xuICAgIH07XG59XG5cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ1RETS1GRScpXG4gICAgLmRpcmVjdGl2ZSgndGFza1NjaGVkdWxpbmcnLCB0YXNrU2NoZWR1bGluZyk7XG4iXX0=
