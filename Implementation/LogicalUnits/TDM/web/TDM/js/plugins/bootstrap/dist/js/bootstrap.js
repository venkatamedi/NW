/*!
  * Bootstrap v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?factory(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],factory):factory((global=global||self).bootstrap={},global.jQuery,global.Popper)}(this,(function(exports,$,Popper){"use strict";function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),staticProps&&_defineProperties(Constructor,staticProps),Constructor}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}$=$&&$.hasOwnProperty("default")?$.default:$,Popper=Popper&&Popper.hasOwnProperty("default")?Popper.default:Popper;function transitionEndEmulator(duration){var _this=this,called=!1;return $(this).one(Util.TRANSITION_END,(function(){called=!0})),setTimeout((function(){called||Util.triggerTransitionEnd(_this)}),duration),this}var Util={TRANSITION_END:"bsTransitionEnd",getUID:function(prefix){do{prefix+=~~(1e6*Math.random())}while(document.getElementById(prefix));return prefix},getSelectorFromElement:function(element){var selector=element.getAttribute("data-target");if(!selector||"#"===selector){var hrefAttr=element.getAttribute("href");selector=hrefAttr&&"#"!==hrefAttr?hrefAttr.trim():""}try{return document.querySelector(selector)?selector:null}catch(err){return null}},getTransitionDurationFromElement:function(element){if(!element)return 0;var transitionDuration=$(element).css("transition-duration"),transitionDelay=$(element).css("transition-delay"),floatTransitionDuration=parseFloat(transitionDuration),floatTransitionDelay=parseFloat(transitionDelay);return floatTransitionDuration||floatTransitionDelay?(transitionDuration=transitionDuration.split(",")[0],transitionDelay=transitionDelay.split(",")[0],1e3*(parseFloat(transitionDuration)+parseFloat(transitionDelay))):0},reflow:function(element){return element.offsetHeight},triggerTransitionEnd:function(element){$(element).trigger("transitionend")},supportsTransitionEnd:function(){return Boolean("transitionend")},isElement:function(obj){return(obj[0]||obj).nodeType},typeCheckConfig:function(componentName,config,configTypes){for(var property in configTypes)if(Object.prototype.hasOwnProperty.call(configTypes,property)){var expectedTypes=configTypes[property],value=config[property],valueType=value&&Util.isElement(value)?"element":(obj=value,{}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(expectedTypes).test(valueType))throw new Error(componentName.toUpperCase()+': Option "'+property+'" provided type "'+valueType+'" but expected type "'+expectedTypes+'".')}var obj},findShadowRoot:function(element){if(!document.documentElement.attachShadow)return null;if("function"==typeof element.getRootNode){var root=element.getRootNode();return root instanceof ShadowRoot?root:null}return element instanceof ShadowRoot?element:element.parentNode?Util.findShadowRoot(element.parentNode):null},jQueryDetection:function(){if(void 0===$)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var version=$.fn.jquery.split(" ")[0].split(".");if(version[0]<2&&version[1]<9||1===version[0]&&9===version[1]&&version[2]<1||version[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};Util.jQueryDetection(),$.fn.emulateTransitionEnd=transitionEndEmulator,$.event.special[Util.TRANSITION_END]={bindType:"transitionend",delegateType:"transitionend",handle:function(event){if($(event.target).is(this))return event.handleObj.handler.apply(this,arguments)}};var NAME="alert",JQUERY_NO_CONFLICT=$.fn[NAME],Event={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},ClassName_ALERT="alert",ClassName_FADE="fade",ClassName_SHOW="show",Alert=function(){function Alert(element){this._element=element}var _proto=Alert.prototype;return _proto.close=function(element){var rootElement=this._element;element&&(rootElement=this._getRootElement(element)),this._triggerCloseEvent(rootElement).isDefaultPrevented()||this._removeElement(rootElement)},_proto.dispose=function(){$.removeData(this._element,"bs.alert"),this._element=null},_proto._getRootElement=function(element){var selector=Util.getSelectorFromElement(element),parent=!1;return selector&&(parent=document.querySelector(selector)),parent||(parent=$(element).closest("."+ClassName_ALERT)[0]),parent},_proto._triggerCloseEvent=function(element){var closeEvent=$.Event(Event.CLOSE);return $(element).trigger(closeEvent),closeEvent},_proto._removeElement=function(element){var _this=this;if($(element).removeClass(ClassName_SHOW),$(element).hasClass(ClassName_FADE)){var transitionDuration=Util.getTransitionDurationFromElement(element);$(element).one(Util.TRANSITION_END,(function(event){return _this._destroyElement(element,event)})).emulateTransitionEnd(transitionDuration)}else this._destroyElement(element)},_proto._destroyElement=function(element){$(element).detach().trigger(Event.CLOSED).remove()},Alert._jQueryInterface=function(config){return this.each((function(){var $element=$(this),data=$element.data("bs.alert");data||(data=new Alert(this),$element.data("bs.alert",data)),"close"===config&&data[config](this)}))},Alert._handleDismiss=function(alertInstance){return function(event){event&&event.preventDefault(),alertInstance.close(this)}},_createClass(Alert,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),Alert}();$(document).on(Event.CLICK_DATA_API,'[data-dismiss="alert"]',Alert._handleDismiss(new Alert)),$.fn[NAME]=Alert._jQueryInterface,$.fn[NAME].Constructor=Alert,$.fn[NAME].noConflict=function(){return $.fn[NAME]=JQUERY_NO_CONFLICT,Alert._jQueryInterface};var JQUERY_NO_CONFLICT$1=$.fn.button,ClassName$1_ACTIVE="active",ClassName$1_BUTTON="btn",ClassName$1_FOCUS="focus",Selector$1_DATA_TOGGLE_CARROT='[data-toggle^="button"]',Selector$1_DATA_TOGGLES='[data-toggle="buttons"]',Selector$1_DATA_TOGGLE='[data-toggle="button"]',Selector$1_DATA_TOGGLES_BUTTONS='[data-toggle="buttons"] .btn',Selector$1_INPUT='input:not([type="hidden"])',Selector$1_ACTIVE=".active",Selector$1_BUTTON=".btn",Event$1={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api",LOAD_DATA_API:"load.bs.button.data-api"},Button=function(){function Button(element){this._element=element}var _proto=Button.prototype;return _proto.toggle=function(){var triggerChangeEvent=!0,addAriaPressed=!0,rootElement=$(this._element).closest(Selector$1_DATA_TOGGLES)[0];if(rootElement){var input=this._element.querySelector(Selector$1_INPUT);if(input){if("radio"===input.type)if(input.checked&&this._element.classList.contains(ClassName$1_ACTIVE))triggerChangeEvent=!1;else{var activeElement=rootElement.querySelector(Selector$1_ACTIVE);activeElement&&$(activeElement).removeClass(ClassName$1_ACTIVE)}else"checkbox"===input.type?"LABEL"===this._element.tagName&&input.checked===this._element.classList.contains(ClassName$1_ACTIVE)&&(triggerChangeEvent=!1):triggerChangeEvent=!1;triggerChangeEvent&&(input.checked=!this._element.classList.contains(ClassName$1_ACTIVE),$(input).trigger("change")),input.focus(),addAriaPressed=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(addAriaPressed&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(ClassName$1_ACTIVE)),triggerChangeEvent&&$(this._element).toggleClass(ClassName$1_ACTIVE))},_proto.dispose=function(){$.removeData(this._element,"bs.button"),this._element=null},Button._jQueryInterface=function(config){return this.each((function(){var data=$(this).data("bs.button");data||(data=new Button(this),$(this).data("bs.button",data)),"toggle"===config&&data[config]()}))},_createClass(Button,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),Button}();$(document).on(Event$1.CLICK_DATA_API,Selector$1_DATA_TOGGLE_CARROT,(function(event){var button=event.target;if($(button).hasClass(ClassName$1_BUTTON)||(button=$(button).closest(Selector$1_BUTTON)[0]),!button||button.hasAttribute("disabled")||button.classList.contains("disabled"))event.preventDefault();else{var inputBtn=button.querySelector(Selector$1_INPUT);if(inputBtn&&(inputBtn.hasAttribute("disabled")||inputBtn.classList.contains("disabled")))return void event.preventDefault();Button._jQueryInterface.call($(button),"toggle")}})).on(Event$1.FOCUS_BLUR_DATA_API,Selector$1_DATA_TOGGLE_CARROT,(function(event){var button=$(event.target).closest(Selector$1_BUTTON)[0];$(button).toggleClass(ClassName$1_FOCUS,/^focus(in)?$/.test(event.type))})),$(window).on(Event$1.LOAD_DATA_API,(function(){for(var buttons=[].slice.call(document.querySelectorAll(Selector$1_DATA_TOGGLES_BUTTONS)),i=0,len=buttons.length;i<len;i++){var button=buttons[i],input=button.querySelector(Selector$1_INPUT);input.checked||input.hasAttribute("checked")?button.classList.add(ClassName$1_ACTIVE):button.classList.remove(ClassName$1_ACTIVE)}for(var _i=0,_len=(buttons=[].slice.call(document.querySelectorAll(Selector$1_DATA_TOGGLE))).length;_i<_len;_i++){var _button=buttons[_i];"true"===_button.getAttribute("aria-pressed")?_button.classList.add(ClassName$1_ACTIVE):_button.classList.remove(ClassName$1_ACTIVE)}})),$.fn.button=Button._jQueryInterface,$.fn.button.Constructor=Button,$.fn.button.noConflict=function(){return $.fn.button=JQUERY_NO_CONFLICT$1,Button._jQueryInterface};var NAME$2="carousel",EVENT_KEY$2=".bs.carousel",JQUERY_NO_CONFLICT$2=$.fn[NAME$2],Default={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},DefaultType={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},Direction_NEXT="next",Direction_PREV="prev",Direction_LEFT="left",Direction_RIGHT="right",Event$2={SLIDE:"slide"+EVENT_KEY$2,SLID:"slid"+EVENT_KEY$2,KEYDOWN:"keydown"+EVENT_KEY$2,MOUSEENTER:"mouseenter"+EVENT_KEY$2,MOUSELEAVE:"mouseleave"+EVENT_KEY$2,TOUCHSTART:"touchstart"+EVENT_KEY$2,TOUCHMOVE:"touchmove"+EVENT_KEY$2,TOUCHEND:"touchend"+EVENT_KEY$2,POINTERDOWN:"pointerdown"+EVENT_KEY$2,POINTERUP:"pointerup"+EVENT_KEY$2,DRAG_START:"dragstart"+EVENT_KEY$2,LOAD_DATA_API:"load"+EVENT_KEY$2+".data-api",CLICK_DATA_API:"click"+EVENT_KEY$2+".data-api"},ClassName$2_CAROUSEL="carousel",ClassName$2_ACTIVE="active",ClassName$2_SLIDE="slide",ClassName$2_RIGHT="carousel-item-right",ClassName$2_LEFT="carousel-item-left",ClassName$2_NEXT="carousel-item-next",ClassName$2_PREV="carousel-item-prev",ClassName$2_POINTER_EVENT="pointer-event",Selector$2_ACTIVE=".active",Selector$2_ACTIVE_ITEM=".active.carousel-item",Selector$2_ITEM=".carousel-item",Selector$2_ITEM_IMG=".carousel-item img",Selector$2_NEXT_PREV=".carousel-item-next, .carousel-item-prev",Selector$2_INDICATORS=".carousel-indicators",Selector$2_DATA_SLIDE="[data-slide], [data-slide-to]",Selector$2_DATA_RIDE='[data-ride="carousel"]',PointerType={TOUCH:"touch",PEN:"pen"},Carousel=function(){function Carousel(element,config){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(config),this._element=element,this._indicatorsElement=this._element.querySelector(Selector$2_INDICATORS),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var _proto=Carousel.prototype;return _proto.next=function(){this._isSliding||this._slide(Direction_NEXT)},_proto.nextWhenVisible=function(){!document.hidden&&$(this._element).is(":visible")&&"hidden"!==$(this._element).css("visibility")&&this.next()},_proto.prev=function(){this._isSliding||this._slide(Direction_PREV)},_proto.pause=function(event){event||(this._isPaused=!0),this._element.querySelector(Selector$2_NEXT_PREV)&&(Util.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},_proto.cycle=function(event){event||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},_proto.to=function(index){var _this=this;this._activeElement=this._element.querySelector(Selector$2_ACTIVE_ITEM);var activeIndex=this._getItemIndex(this._activeElement);if(!(index>this._items.length-1||index<0))if(this._isSliding)$(this._element).one(Event$2.SLID,(function(){return _this.to(index)}));else{if(activeIndex===index)return this.pause(),void this.cycle();var direction=index>activeIndex?Direction_NEXT:Direction_PREV;this._slide(direction,this._items[index])}},_proto.dispose=function(){$(this._element).off(EVENT_KEY$2),$.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},_proto._getConfig=function(config){return config=_objectSpread2({},Default,{},config),Util.typeCheckConfig(NAME$2,config,DefaultType),config},_proto._handleSwipe=function(){var absDeltax=Math.abs(this.touchDeltaX);if(!(absDeltax<=40)){var direction=absDeltax/this.touchDeltaX;this.touchDeltaX=0,direction>0&&this.prev(),direction<0&&this.next()}},_proto._addEventListeners=function(){var _this2=this;this._config.keyboard&&$(this._element).on(Event$2.KEYDOWN,(function(event){return _this2._keydown(event)})),"hover"===this._config.pause&&$(this._element).on(Event$2.MOUSEENTER,(function(event){return _this2.pause(event)})).on(Event$2.MOUSELEAVE,(function(event){return _this2.cycle(event)})),this._config.touch&&this._addTouchEventListeners()},_proto._addTouchEventListeners=function(){var _this3=this;if(this._touchSupported){var start=function(event){_this3._pointerEvent&&PointerType[event.originalEvent.pointerType.toUpperCase()]?_this3.touchStartX=event.originalEvent.clientX:_this3._pointerEvent||(_this3.touchStartX=event.originalEvent.touches[0].clientX)},end=function(event){_this3._pointerEvent&&PointerType[event.originalEvent.pointerType.toUpperCase()]&&(_this3.touchDeltaX=event.originalEvent.clientX-_this3.touchStartX),_this3._handleSwipe(),"hover"===_this3._config.pause&&(_this3.pause(),_this3.touchTimeout&&clearTimeout(_this3.touchTimeout),_this3.touchTimeout=setTimeout((function(event){return _this3.cycle(event)}),500+_this3._config.interval))};$(this._element.querySelectorAll(Selector$2_ITEM_IMG)).on(Event$2.DRAG_START,(function(e){return e.preventDefault()})),this._pointerEvent?($(this._element).on(Event$2.POINTERDOWN,(function(event){return start(event)})),$(this._element).on(Event$2.POINTERUP,(function(event){return end(event)})),this._element.classList.add(ClassName$2_POINTER_EVENT)):($(this._element).on(Event$2.TOUCHSTART,(function(event){return start(event)})),$(this._element).on(Event$2.TOUCHMOVE,(function(event){return function(event){event.originalEvent.touches&&event.originalEvent.touches.length>1?_this3.touchDeltaX=0:_this3.touchDeltaX=event.originalEvent.touches[0].clientX-_this3.touchStartX}(event)})),$(this._element).on(Event$2.TOUCHEND,(function(event){return end(event)})))}},_proto._keydown=function(event){if(!/input|textarea/i.test(event.target.tagName))switch(event.which){case 37:event.preventDefault(),this.prev();break;case 39:event.preventDefault(),this.next()}},_proto._getItemIndex=function(element){return this._items=element&&element.parentNode?[].slice.call(element.parentNode.querySelectorAll(Selector$2_ITEM)):[],this._items.indexOf(element)},_proto._getItemByDirection=function(direction,activeElement){var isNextDirection=direction===Direction_NEXT,isPrevDirection=direction===Direction_PREV,activeIndex=this._getItemIndex(activeElement),lastItemIndex=this._items.length-1;if((isPrevDirection&&0===activeIndex||isNextDirection&&activeIndex===lastItemIndex)&&!this._config.wrap)return activeElement;var itemIndex=(activeIndex+(direction===Direction_PREV?-1:1))%this._items.length;return-1===itemIndex?this._items[this._items.length-1]:this._items[itemIndex]},_proto._triggerSlideEvent=function(relatedTarget,eventDirectionName){var targetIndex=this._getItemIndex(relatedTarget),fromIndex=this._getItemIndex(this._element.querySelector(Selector$2_ACTIVE_ITEM)),slideEvent=$.Event(Event$2.SLIDE,{relatedTarget:relatedTarget,direction:eventDirectionName,from:fromIndex,to:targetIndex});return $(this._element).trigger(slideEvent),slideEvent},_proto._setActiveIndicatorElement=function(element){if(this._indicatorsElement){var indicators=[].slice.call(this._indicatorsElement.querySelectorAll(Selector$2_ACTIVE));$(indicators).removeClass(ClassName$2_ACTIVE);var nextIndicator=this._indicatorsElement.children[this._getItemIndex(element)];nextIndicator&&$(nextIndicator).addClass(ClassName$2_ACTIVE)}},_proto._slide=function(direction,element){var directionalClassName,orderClassName,eventDirectionName,_this4=this,activeElement=this._element.querySelector(Selector$2_ACTIVE_ITEM),activeElementIndex=this._getItemIndex(activeElement),nextElement=element||activeElement&&this._getItemByDirection(direction,activeElement),nextElementIndex=this._getItemIndex(nextElement),isCycling=Boolean(this._interval);if(direction===Direction_NEXT?(directionalClassName=ClassName$2_LEFT,orderClassName=ClassName$2_NEXT,eventDirectionName=Direction_LEFT):(directionalClassName=ClassName$2_RIGHT,orderClassName=ClassName$2_PREV,eventDirectionName=Direction_RIGHT),nextElement&&$(nextElement).hasClass(ClassName$2_ACTIVE))this._isSliding=!1;else if(!this._triggerSlideEvent(nextElement,eventDirectionName).isDefaultPrevented()&&activeElement&&nextElement){this._isSliding=!0,isCycling&&this.pause(),this._setActiveIndicatorElement(nextElement);var slidEvent=$.Event(Event$2.SLID,{relatedTarget:nextElement,direction:eventDirectionName,from:activeElementIndex,to:nextElementIndex});if($(this._element).hasClass(ClassName$2_SLIDE)){$(nextElement).addClass(orderClassName),Util.reflow(nextElement),$(activeElement).addClass(directionalClassName),$(nextElement).addClass(directionalClassName);var nextElementInterval=parseInt(nextElement.getAttribute("data-interval"),10);nextElementInterval?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=nextElementInterval):this._config.interval=this._config.defaultInterval||this._config.interval;var transitionDuration=Util.getTransitionDurationFromElement(activeElement);$(activeElement).one(Util.TRANSITION_END,(function(){$(nextElement).removeClass(directionalClassName+" "+orderClassName).addClass(ClassName$2_ACTIVE),$(activeElement).removeClass(ClassName$2_ACTIVE+" "+orderClassName+" "+directionalClassName),_this4._isSliding=!1,setTimeout((function(){return $(_this4._element).trigger(slidEvent)}),0)})).emulateTransitionEnd(transitionDuration)}else $(activeElement).removeClass(ClassName$2_ACTIVE),$(nextElement).addClass(ClassName$2_ACTIVE),this._isSliding=!1,$(this._element).trigger(slidEvent);isCycling&&this.cycle()}},Carousel._jQueryInterface=function(config){return this.each((function(){var data=$(this).data("bs.carousel"),_config=_objectSpread2({},Default,{},$(this).data());"object"==typeof config&&(_config=_objectSpread2({},_config,{},config));var action="string"==typeof config?config:_config.slide;if(data||(data=new Carousel(this,_config),$(this).data("bs.carousel",data)),"number"==typeof config)data.to(config);else if("string"==typeof action){if(void 0===data[action])throw new TypeError('No method named "'+action+'"');data[action]()}else _config.interval&&_config.ride&&(data.pause(),data.cycle())}))},Carousel._dataApiClickHandler=function(event){var selector=Util.getSelectorFromElement(this);if(selector){var target=$(selector)[0];if(target&&$(target).hasClass(ClassName$2_CAROUSEL)){var config=_objectSpread2({},$(target).data(),{},$(this).data()),slideIndex=this.getAttribute("data-slide-to");slideIndex&&(config.interval=!1),Carousel._jQueryInterface.call($(target),config),slideIndex&&$(target).data("bs.carousel").to(slideIndex),event.preventDefault()}}},_createClass(Carousel,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Default}}]),Carousel}();$(document).on(Event$2.CLICK_DATA_API,Selector$2_DATA_SLIDE,Carousel._dataApiClickHandler),$(window).on(Event$2.LOAD_DATA_API,(function(){for(var carousels=[].slice.call(document.querySelectorAll(Selector$2_DATA_RIDE)),i=0,len=carousels.length;i<len;i++){var $carousel=$(carousels[i]);Carousel._jQueryInterface.call($carousel,$carousel.data())}})),$.fn[NAME$2]=Carousel._jQueryInterface,$.fn[NAME$2].Constructor=Carousel,$.fn[NAME$2].noConflict=function(){return $.fn[NAME$2]=JQUERY_NO_CONFLICT$2,Carousel._jQueryInterface};var NAME$3="collapse",JQUERY_NO_CONFLICT$3=$.fn[NAME$3],Default$1={toggle:!0,parent:""},DefaultType$1={toggle:"boolean",parent:"(string|element)"},Event$3={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},ClassName$3_SHOW="show",ClassName$3_COLLAPSE="collapse",ClassName$3_COLLAPSING="collapsing",ClassName$3_COLLAPSED="collapsed",Dimension_WIDTH="width",Dimension_HEIGHT="height",Selector$3_ACTIVES=".show, .collapsing",Selector$3_DATA_TOGGLE='[data-toggle="collapse"]',Collapse=function(){function Collapse(element,config){this._isTransitioning=!1,this._element=element,this._config=this._getConfig(config),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+element.id+'"],[data-toggle="collapse"][data-target="#'+element.id+'"]'));for(var toggleList=[].slice.call(document.querySelectorAll(Selector$3_DATA_TOGGLE)),i=0,len=toggleList.length;i<len;i++){var elem=toggleList[i],selector=Util.getSelectorFromElement(elem),filterElement=[].slice.call(document.querySelectorAll(selector)).filter((function(foundElem){return foundElem===element}));null!==selector&&filterElement.length>0&&(this._selector=selector,this._triggerArray.push(elem))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var _proto=Collapse.prototype;return _proto.toggle=function(){$(this._element).hasClass(ClassName$3_SHOW)?this.hide():this.show()},_proto.show=function(){var actives,activesData,_this=this;if(!this._isTransitioning&&!$(this._element).hasClass(ClassName$3_SHOW)&&(this._parent&&0===(actives=[].slice.call(this._parent.querySelectorAll(Selector$3_ACTIVES)).filter((function(elem){return"string"==typeof _this._config.parent?elem.getAttribute("data-parent")===_this._config.parent:elem.classList.contains(ClassName$3_COLLAPSE)}))).length&&(actives=null),!(actives&&(activesData=$(actives).not(this._selector).data("bs.collapse"))&&activesData._isTransitioning))){var startEvent=$.Event(Event$3.SHOW);if($(this._element).trigger(startEvent),!startEvent.isDefaultPrevented()){actives&&(Collapse._jQueryInterface.call($(actives).not(this._selector),"hide"),activesData||$(actives).data("bs.collapse",null));var dimension=this._getDimension();$(this._element).removeClass(ClassName$3_COLLAPSE).addClass(ClassName$3_COLLAPSING),this._element.style[dimension]=0,this._triggerArray.length&&$(this._triggerArray).removeClass(ClassName$3_COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var scrollSize="scroll"+(dimension[0].toUpperCase()+dimension.slice(1)),transitionDuration=Util.getTransitionDurationFromElement(this._element);$(this._element).one(Util.TRANSITION_END,(function(){$(_this._element).removeClass(ClassName$3_COLLAPSING).addClass(ClassName$3_COLLAPSE).addClass(ClassName$3_SHOW),_this._element.style[dimension]="",_this.setTransitioning(!1),$(_this._element).trigger(Event$3.SHOWN)})).emulateTransitionEnd(transitionDuration),this._element.style[dimension]=this._element[scrollSize]+"px"}}},_proto.hide=function(){var _this2=this;if(!this._isTransitioning&&$(this._element).hasClass(ClassName$3_SHOW)){var startEvent=$.Event(Event$3.HIDE);if($(this._element).trigger(startEvent),!startEvent.isDefaultPrevented()){var dimension=this._getDimension();this._element.style[dimension]=this._element.getBoundingClientRect()[dimension]+"px",Util.reflow(this._element),$(this._element).addClass(ClassName$3_COLLAPSING).removeClass(ClassName$3_COLLAPSE).removeClass(ClassName$3_SHOW);var triggerArrayLength=this._triggerArray.length;if(triggerArrayLength>0)for(var i=0;i<triggerArrayLength;i++){var trigger=this._triggerArray[i],selector=Util.getSelectorFromElement(trigger);if(null!==selector)$([].slice.call(document.querySelectorAll(selector))).hasClass(ClassName$3_SHOW)||$(trigger).addClass(ClassName$3_COLLAPSED).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[dimension]="";var transitionDuration=Util.getTransitionDurationFromElement(this._element);$(this._element).one(Util.TRANSITION_END,(function(){_this2.setTransitioning(!1),$(_this2._element).removeClass(ClassName$3_COLLAPSING).addClass(ClassName$3_COLLAPSE).trigger(Event$3.HIDDEN)})).emulateTransitionEnd(transitionDuration)}}},_proto.setTransitioning=function(isTransitioning){this._isTransitioning=isTransitioning},_proto.dispose=function(){$.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},_proto._getConfig=function(config){return(config=_objectSpread2({},Default$1,{},config)).toggle=Boolean(config.toggle),Util.typeCheckConfig(NAME$3,config,DefaultType$1),config},_proto._getDimension=function(){return $(this._element).hasClass(Dimension_WIDTH)?Dimension_WIDTH:Dimension_HEIGHT},_proto._getParent=function(){var parent,_this3=this;Util.isElement(this._config.parent)?(parent=this._config.parent,void 0!==this._config.parent.jquery&&(parent=this._config.parent[0])):parent=document.querySelector(this._config.parent);var selector='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',children=[].slice.call(parent.querySelectorAll(selector));return $(children).each((function(i,element){_this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element),[element])})),parent},_proto._addAriaAndCollapsedClass=function(element,triggerArray){var isOpen=$(element).hasClass(ClassName$3_SHOW);triggerArray.length&&$(triggerArray).toggleClass(ClassName$3_COLLAPSED,!isOpen).attr("aria-expanded",isOpen)},Collapse._getTargetFromElement=function(element){var selector=Util.getSelectorFromElement(element);return selector?document.querySelector(selector):null},Collapse._jQueryInterface=function(config){return this.each((function(){var $this=$(this),data=$this.data("bs.collapse"),_config=_objectSpread2({},Default$1,{},$this.data(),{},"object"==typeof config&&config?config:{});if(!data&&_config.toggle&&/show|hide/.test(config)&&(_config.toggle=!1),data||(data=new Collapse(this,_config),$this.data("bs.collapse",data)),"string"==typeof config){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config]()}}))},_createClass(Collapse,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Default$1}}]),Collapse}();$(document).on(Event$3.CLICK_DATA_API,Selector$3_DATA_TOGGLE,(function(event){"A"===event.currentTarget.tagName&&event.preventDefault();var $trigger=$(this),selector=Util.getSelectorFromElement(this),selectors=[].slice.call(document.querySelectorAll(selector));$(selectors).each((function(){var $target=$(this),config=$target.data("bs.collapse")?"toggle":$trigger.data();Collapse._jQueryInterface.call($target,config)}))})),$.fn[NAME$3]=Collapse._jQueryInterface,$.fn[NAME$3].Constructor=Collapse,$.fn[NAME$3].noConflict=function(){return $.fn[NAME$3]=JQUERY_NO_CONFLICT$3,Collapse._jQueryInterface};var NAME$4="dropdown",JQUERY_NO_CONFLICT$4=$.fn[NAME$4],REGEXP_KEYDOWN=new RegExp("38|40|27"),Event$4={HIDE:"hide.bs.dropdown",HIDDEN:"hidden.bs.dropdown",SHOW:"show.bs.dropdown",SHOWN:"shown.bs.dropdown",CLICK:"click.bs.dropdown",CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},ClassName$4_DISABLED="disabled",ClassName$4_SHOW="show",ClassName$4_DROPUP="dropup",ClassName$4_DROPRIGHT="dropright",ClassName$4_DROPLEFT="dropleft",ClassName$4_MENURIGHT="dropdown-menu-right",ClassName$4_POSITION_STATIC="position-static",Selector$4_DATA_TOGGLE='[data-toggle="dropdown"]',Selector$4_FORM_CHILD=".dropdown form",Selector$4_MENU=".dropdown-menu",Selector$4_NAVBAR_NAV=".navbar-nav",Selector$4_VISIBLE_ITEMS=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",AttachmentMap_TOP="top-start",AttachmentMap_TOPEND="top-end",AttachmentMap_BOTTOM="bottom-start",AttachmentMap_BOTTOMEND="bottom-end",AttachmentMap_RIGHT="right-start",AttachmentMap_LEFT="left-start",Default$2={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},DefaultType$2={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},Dropdown=function(){function Dropdown(element,config){this._element=element,this._popper=null,this._config=this._getConfig(config),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var _proto=Dropdown.prototype;return _proto.toggle=function(){if(!this._element.disabled&&!$(this._element).hasClass(ClassName$4_DISABLED)){var isActive=$(this._menu).hasClass(ClassName$4_SHOW);Dropdown._clearMenus(),isActive||this.show(!0)}},_proto.show=function(usePopper){if(void 0===usePopper&&(usePopper=!1),!(this._element.disabled||$(this._element).hasClass(ClassName$4_DISABLED)||$(this._menu).hasClass(ClassName$4_SHOW))){var relatedTarget={relatedTarget:this._element},showEvent=$.Event(Event$4.SHOW,relatedTarget),parent=Dropdown._getParentFromElement(this._element);if($(parent).trigger(showEvent),!showEvent.isDefaultPrevented()){if(!this._inNavbar&&usePopper){if(void 0===Popper)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var referenceElement=this._element;"parent"===this._config.reference?referenceElement=parent:Util.isElement(this._config.reference)&&(referenceElement=this._config.reference,void 0!==this._config.reference.jquery&&(referenceElement=this._config.reference[0])),"scrollParent"!==this._config.boundary&&$(parent).addClass(ClassName$4_POSITION_STATIC),this._popper=new Popper(referenceElement,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===$(parent).closest(Selector$4_NAVBAR_NAV).length&&$(document.body).children().on("mouseover",null,$.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),$(this._menu).toggleClass(ClassName$4_SHOW),$(parent).toggleClass(ClassName$4_SHOW).trigger($.Event(Event$4.SHOWN,relatedTarget))}}},_proto.hide=function(){if(!this._element.disabled&&!$(this._element).hasClass(ClassName$4_DISABLED)&&$(this._menu).hasClass(ClassName$4_SHOW)){var relatedTarget={relatedTarget:this._element},hideEvent=$.Event(Event$4.HIDE,relatedTarget),parent=Dropdown._getParentFromElement(this._element);$(parent).trigger(hideEvent),hideEvent.isDefaultPrevented()||(this._popper&&this._popper.destroy(),$(this._menu).toggleClass(ClassName$4_SHOW),$(parent).toggleClass(ClassName$4_SHOW).trigger($.Event(Event$4.HIDDEN,relatedTarget)))}},_proto.dispose=function(){$.removeData(this._element,"bs.dropdown"),$(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},_proto.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},_proto._addEventListeners=function(){var _this=this;$(this._element).on(Event$4.CLICK,(function(event){event.preventDefault(),event.stopPropagation(),_this.toggle()}))},_proto._getConfig=function(config){return config=_objectSpread2({},this.constructor.Default,{},$(this._element).data(),{},config),Util.typeCheckConfig(NAME$4,config,this.constructor.DefaultType),config},_proto._getMenuElement=function(){if(!this._menu){var parent=Dropdown._getParentFromElement(this._element);parent&&(this._menu=parent.querySelector(Selector$4_MENU))}return this._menu},_proto._getPlacement=function(){var $parentDropdown=$(this._element.parentNode),placement=AttachmentMap_BOTTOM;return $parentDropdown.hasClass(ClassName$4_DROPUP)?(placement=AttachmentMap_TOP,$(this._menu).hasClass(ClassName$4_MENURIGHT)&&(placement=AttachmentMap_TOPEND)):$parentDropdown.hasClass(ClassName$4_DROPRIGHT)?placement=AttachmentMap_RIGHT:$parentDropdown.hasClass(ClassName$4_DROPLEFT)?placement=AttachmentMap_LEFT:$(this._menu).hasClass(ClassName$4_MENURIGHT)&&(placement=AttachmentMap_BOTTOMEND),placement},_proto._detectNavbar=function(){return $(this._element).closest(".navbar").length>0},_proto._getOffset=function(){var _this2=this,offset={};return"function"==typeof this._config.offset?offset.fn=function(data){return data.offsets=_objectSpread2({},data.offsets,{},_this2._config.offset(data.offsets,_this2._element)||{}),data}:offset.offset=this._config.offset,offset},_proto._getPopperConfig=function(){var popperConfig={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(popperConfig.modifiers.applyStyle={enabled:!1}),_objectSpread2({},popperConfig,{},this._config.popperConfig)},Dropdown._jQueryInterface=function(config){return this.each((function(){var data=$(this).data("bs.dropdown");if(data||(data=new Dropdown(this,"object"==typeof config?config:null),$(this).data("bs.dropdown",data)),"string"==typeof config){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config]()}}))},Dropdown._clearMenus=function(event){if(!event||3!==event.which&&("keyup"!==event.type||9===event.which))for(var toggles=[].slice.call(document.querySelectorAll(Selector$4_DATA_TOGGLE)),i=0,len=toggles.length;i<len;i++){var parent=Dropdown._getParentFromElement(toggles[i]),context=$(toggles[i]).data("bs.dropdown"),relatedTarget={relatedTarget:toggles[i]};if(event&&"click"===event.type&&(relatedTarget.clickEvent=event),context){var dropdownMenu=context._menu;if($(parent).hasClass(ClassName$4_SHOW)&&!(event&&("click"===event.type&&/input|textarea/i.test(event.target.tagName)||"keyup"===event.type&&9===event.which)&&$.contains(parent,event.target))){var hideEvent=$.Event(Event$4.HIDE,relatedTarget);$(parent).trigger(hideEvent),hideEvent.isDefaultPrevented()||("ontouchstart"in document.documentElement&&$(document.body).children().off("mouseover",null,$.noop),toggles[i].setAttribute("aria-expanded","false"),context._popper&&context._popper.destroy(),$(dropdownMenu).removeClass(ClassName$4_SHOW),$(parent).removeClass(ClassName$4_SHOW).trigger($.Event(Event$4.HIDDEN,relatedTarget)))}}}},Dropdown._getParentFromElement=function(element){var parent,selector=Util.getSelectorFromElement(element);return selector&&(parent=document.querySelector(selector)),parent||element.parentNode},Dropdown._dataApiKeydownHandler=function(event){if(!(/input|textarea/i.test(event.target.tagName)?32===event.which||27!==event.which&&(40!==event.which&&38!==event.which||$(event.target).closest(Selector$4_MENU).length):!REGEXP_KEYDOWN.test(event.which))&&(event.preventDefault(),event.stopPropagation(),!this.disabled&&!$(this).hasClass(ClassName$4_DISABLED))){var parent=Dropdown._getParentFromElement(this),isActive=$(parent).hasClass(ClassName$4_SHOW);if(isActive||27!==event.which)if(isActive&&(!isActive||27!==event.which&&32!==event.which)){var items=[].slice.call(parent.querySelectorAll(Selector$4_VISIBLE_ITEMS)).filter((function(item){return $(item).is(":visible")}));if(0!==items.length){var index=items.indexOf(event.target);38===event.which&&index>0&&index--,40===event.which&&index<items.length-1&&index++,index<0&&(index=0),items[index].focus()}}else{if(27===event.which){var toggle=parent.querySelector(Selector$4_DATA_TOGGLE);$(toggle).trigger("focus")}$(this).trigger("click")}}},_createClass(Dropdown,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Default$2}},{key:"DefaultType",get:function(){return DefaultType$2}}]),Dropdown}();$(document).on(Event$4.KEYDOWN_DATA_API,Selector$4_DATA_TOGGLE,Dropdown._dataApiKeydownHandler).on(Event$4.KEYDOWN_DATA_API,Selector$4_MENU,Dropdown._dataApiKeydownHandler).on(Event$4.CLICK_DATA_API+" "+Event$4.KEYUP_DATA_API,Dropdown._clearMenus).on(Event$4.CLICK_DATA_API,Selector$4_DATA_TOGGLE,(function(event){event.preventDefault(),event.stopPropagation(),Dropdown._jQueryInterface.call($(this),"toggle")})).on(Event$4.CLICK_DATA_API,Selector$4_FORM_CHILD,(function(e){e.stopPropagation()})),$.fn[NAME$4]=Dropdown._jQueryInterface,$.fn[NAME$4].Constructor=Dropdown,$.fn[NAME$4].noConflict=function(){return $.fn[NAME$4]=JQUERY_NO_CONFLICT$4,Dropdown._jQueryInterface};var JQUERY_NO_CONFLICT$5=$.fn.modal,Default$3={backdrop:!0,keyboard:!0,focus:!0,show:!0},DefaultType$3={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},Event$5={HIDE:"hide.bs.modal",HIDE_PREVENTED:"hidePrevented.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},ClassName$5_SCROLLABLE="modal-dialog-scrollable",ClassName$5_SCROLLBAR_MEASURER="modal-scrollbar-measure",ClassName$5_BACKDROP="modal-backdrop",ClassName$5_OPEN="modal-open",ClassName$5_FADE="fade",ClassName$5_SHOW="show",ClassName$5_STATIC="modal-static",Selector$5_DIALOG=".modal-dialog",Selector$5_MODAL_BODY=".modal-body",Selector$5_DATA_TOGGLE='[data-toggle="modal"]',Selector$5_DATA_DISMISS='[data-dismiss="modal"]',Selector$5_FIXED_CONTENT=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",Selector$5_STICKY_CONTENT=".sticky-top",Modal=function(){function Modal(element,config){this._config=this._getConfig(config),this._element=element,this._dialog=element.querySelector(Selector$5_DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var _proto=Modal.prototype;return _proto.toggle=function(relatedTarget){return this._isShown?this.hide():this.show(relatedTarget)},_proto.show=function(relatedTarget){var _this=this;if(!this._isShown&&!this._isTransitioning){$(this._element).hasClass(ClassName$5_FADE)&&(this._isTransitioning=!0);var showEvent=$.Event(Event$5.SHOW,{relatedTarget:relatedTarget});$(this._element).trigger(showEvent),this._isShown||showEvent.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),$(this._element).on(Event$5.CLICK_DISMISS,Selector$5_DATA_DISMISS,(function(event){return _this.hide(event)})),$(this._dialog).on(Event$5.MOUSEDOWN_DISMISS,(function(){$(_this._element).one(Event$5.MOUSEUP_DISMISS,(function(event){$(event.target).is(_this._element)&&(_this._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return _this._showElement(relatedTarget)})))}},_proto.hide=function(event){var _this2=this;if(event&&event.preventDefault(),this._isShown&&!this._isTransitioning){var hideEvent=$.Event(Event$5.HIDE);if($(this._element).trigger(hideEvent),this._isShown&&!hideEvent.isDefaultPrevented()){this._isShown=!1;var transition=$(this._element).hasClass(ClassName$5_FADE);if(transition&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),$(document).off(Event$5.FOCUSIN),$(this._element).removeClass(ClassName$5_SHOW),$(this._element).off(Event$5.CLICK_DISMISS),$(this._dialog).off(Event$5.MOUSEDOWN_DISMISS),transition){var transitionDuration=Util.getTransitionDurationFromElement(this._element);$(this._element).one(Util.TRANSITION_END,(function(event){return _this2._hideModal(event)})).emulateTransitionEnd(transitionDuration)}else this._hideModal()}}},_proto.dispose=function(){[window,this._element,this._dialog].forEach((function(htmlElement){return $(htmlElement).off(".bs.modal")})),$(document).off(Event$5.FOCUSIN),$.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},_proto.handleUpdate=function(){this._adjustDialog()},_proto._getConfig=function(config){return config=_objectSpread2({},Default$3,{},config),Util.typeCheckConfig("modal",config,DefaultType$3),config},_proto._triggerBackdropTransition=function(){var _this3=this;if("static"===this._config.backdrop){var hideEventPrevented=$.Event(Event$5.HIDE_PREVENTED);if($(this._element).trigger(hideEventPrevented),hideEventPrevented.defaultPrevented)return;this._element.classList.add(ClassName$5_STATIC);var modalTransitionDuration=Util.getTransitionDurationFromElement(this._element);$(this._element).one(Util.TRANSITION_END,(function(){_this3._element.classList.remove(ClassName$5_STATIC)})).emulateTransitionEnd(modalTransitionDuration),this._element.focus()}else this.hide()},_proto._showElement=function(relatedTarget){var _this4=this,transition=$(this._element).hasClass(ClassName$5_FADE),modalBody=this._dialog?this._dialog.querySelector(Selector$5_MODAL_BODY):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),$(this._dialog).hasClass(ClassName$5_SCROLLABLE)&&modalBody?modalBody.scrollTop=0:this._element.scrollTop=0,transition&&Util.reflow(this._element),$(this._element).addClass(ClassName$5_SHOW),this._config.focus&&this._enforceFocus();var shownEvent=$.Event(Event$5.SHOWN,{relatedTarget:relatedTarget}),transitionComplete=function(){_this4._config.focus&&_this4._element.focus(),_this4._isTransitioning=!1,$(_this4._element).trigger(shownEvent)};if(transition){var transitionDuration=Util.getTransitionDurationFromElement(this._dialog);$(this._dialog).one(Util.TRANSITION_END,transitionComplete).emulateTransitionEnd(transitionDuration)}else transitionComplete()},_proto._enforceFocus=function(){var _this5=this;$(document).off(Event$5.FOCUSIN).on(Event$5.FOCUSIN,(function(event){document!==event.target&&_this5._element!==event.target&&0===$(_this5._element).has(event.target).length&&_this5._element.focus()}))},_proto._setEscapeEvent=function(){var _this6=this;this._isShown&&this._config.keyboard?$(this._element).on(Event$5.KEYDOWN_DISMISS,(function(event){27===event.which&&_this6._triggerBackdropTransition()})):this._isShown||$(this._element).off(Event$5.KEYDOWN_DISMISS)},_proto._setResizeEvent=function(){var _this7=this;this._isShown?$(window).on(Event$5.RESIZE,(function(event){return _this7.handleUpdate(event)})):$(window).off(Event$5.RESIZE)},_proto._hideModal=function(){var _this8=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._isTransitioning=!1,this._showBackdrop((function(){$(document.body).removeClass(ClassName$5_OPEN),_this8._resetAdjustments(),_this8._resetScrollbar(),$(_this8._element).trigger(Event$5.HIDDEN)}))},_proto._removeBackdrop=function(){this._backdrop&&($(this._backdrop).remove(),this._backdrop=null)},_proto._showBackdrop=function(callback){var _this9=this,animate=$(this._element).hasClass(ClassName$5_FADE)?ClassName$5_FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=ClassName$5_BACKDROP,animate&&this._backdrop.classList.add(animate),$(this._backdrop).appendTo(document.body),$(this._element).on(Event$5.CLICK_DISMISS,(function(event){_this9._ignoreBackdropClick?_this9._ignoreBackdropClick=!1:event.target===event.currentTarget&&_this9._triggerBackdropTransition()})),animate&&Util.reflow(this._backdrop),$(this._backdrop).addClass(ClassName$5_SHOW),!callback)return;if(!animate)return void callback();var backdropTransitionDuration=Util.getTransitionDurationFromElement(this._backdrop);$(this._backdrop).one(Util.TRANSITION_END,callback).emulateTransitionEnd(backdropTransitionDuration)}else if(!this._isShown&&this._backdrop){$(this._backdrop).removeClass(ClassName$5_SHOW);var callbackRemove=function(){_this9._removeBackdrop(),callback&&callback()};if($(this._element).hasClass(ClassName$5_FADE)){var _backdropTransitionDuration=Util.getTransitionDurationFromElement(this._backdrop);$(this._backdrop).one(Util.TRANSITION_END,callbackRemove).emulateTransitionEnd(_backdropTransitionDuration)}else callbackRemove()}else callback&&callback()},_proto._adjustDialog=function(){var isModalOverflowing=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&isModalOverflowing&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!isModalOverflowing&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},_proto._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},_proto._checkScrollbar=function(){var rect=document.body.getBoundingClientRect();this._isBodyOverflowing=rect.left+rect.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},_proto._setScrollbar=function(){var _this10=this;if(this._isBodyOverflowing){var fixedContent=[].slice.call(document.querySelectorAll(Selector$5_FIXED_CONTENT)),stickyContent=[].slice.call(document.querySelectorAll(Selector$5_STICKY_CONTENT));$(fixedContent).each((function(index,element){var actualPadding=element.style.paddingRight,calculatedPadding=$(element).css("padding-right");$(element).data("padding-right",actualPadding).css("padding-right",parseFloat(calculatedPadding)+_this10._scrollbarWidth+"px")})),$(stickyContent).each((function(index,element){var actualMargin=element.style.marginRight,calculatedMargin=$(element).css("margin-right");$(element).data("margin-right",actualMargin).css("margin-right",parseFloat(calculatedMargin)-_this10._scrollbarWidth+"px")}));var actualPadding=document.body.style.paddingRight,calculatedPadding=$(document.body).css("padding-right");$(document.body).data("padding-right",actualPadding).css("padding-right",parseFloat(calculatedPadding)+this._scrollbarWidth+"px")}$(document.body).addClass(ClassName$5_OPEN)},_proto._resetScrollbar=function(){var fixedContent=[].slice.call(document.querySelectorAll(Selector$5_FIXED_CONTENT));$(fixedContent).each((function(index,element){var padding=$(element).data("padding-right");$(element).removeData("padding-right"),element.style.paddingRight=padding||""}));var elements=[].slice.call(document.querySelectorAll(""+Selector$5_STICKY_CONTENT));$(elements).each((function(index,element){var margin=$(element).data("margin-right");void 0!==margin&&$(element).css("margin-right",margin).removeData("margin-right")}));var padding=$(document.body).data("padding-right");$(document.body).removeData("padding-right"),document.body.style.paddingRight=padding||""},_proto._getScrollbarWidth=function(){var scrollDiv=document.createElement("div");scrollDiv.className=ClassName$5_SCROLLBAR_MEASURER,document.body.appendChild(scrollDiv);var scrollbarWidth=scrollDiv.getBoundingClientRect().width-scrollDiv.clientWidth;return document.body.removeChild(scrollDiv),scrollbarWidth},Modal._jQueryInterface=function(config,relatedTarget){return this.each((function(){var data=$(this).data("bs.modal"),_config=_objectSpread2({},Default$3,{},$(this).data(),{},"object"==typeof config&&config?config:{});if(data||(data=new Modal(this,_config),$(this).data("bs.modal",data)),"string"==typeof config){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config](relatedTarget)}else _config.show&&data.show(relatedTarget)}))},_createClass(Modal,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Default$3}}]),Modal}();$(document).on(Event$5.CLICK_DATA_API,Selector$5_DATA_TOGGLE,(function(event){var target,_this11=this,selector=Util.getSelectorFromElement(this);selector&&(target=document.querySelector(selector));var config=$(target).data("bs.modal")?"toggle":_objectSpread2({},$(target).data(),{},$(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||event.preventDefault();var $target=$(target).one(Event$5.SHOW,(function(showEvent){showEvent.isDefaultPrevented()||$target.one(Event$5.HIDDEN,(function(){$(_this11).is(":visible")&&_this11.focus()}))}));Modal._jQueryInterface.call($(target),config,this)})),$.fn.modal=Modal._jQueryInterface,$.fn.modal.Constructor=Modal,$.fn.modal.noConflict=function(){return $.fn.modal=JQUERY_NO_CONFLICT$5,Modal._jQueryInterface};var uriAttrs=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],DefaultWhitelist={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},SAFE_URL_PATTERN=/^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,DATA_URL_PATTERN=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function sanitizeHtml(unsafeHtml,whiteList,sanitizeFn){if(0===unsafeHtml.length)return unsafeHtml;if(sanitizeFn&&"function"==typeof sanitizeFn)return sanitizeFn(unsafeHtml);for(var createdDocument=(new window.DOMParser).parseFromString(unsafeHtml,"text/html"),whitelistKeys=Object.keys(whiteList),elements=[].slice.call(createdDocument.body.querySelectorAll("*")),_loop=function(i,len){var el=elements[i],elName=el.nodeName.toLowerCase();if(-1===whitelistKeys.indexOf(el.nodeName.toLowerCase()))return el.parentNode.removeChild(el),"continue";var attributeList=[].slice.call(el.attributes),whitelistedAttributes=[].concat(whiteList["*"]||[],whiteList[elName]||[]);attributeList.forEach((function(attr){(function(attr,allowedAttributeList){var attrName=attr.nodeName.toLowerCase();if(-1!==allowedAttributeList.indexOf(attrName))return-1===uriAttrs.indexOf(attrName)||Boolean(attr.nodeValue.match(SAFE_URL_PATTERN)||attr.nodeValue.match(DATA_URL_PATTERN));for(var regExp=allowedAttributeList.filter((function(attrRegex){return attrRegex instanceof RegExp})),i=0,l=regExp.length;i<l;i++)if(attrName.match(regExp[i]))return!0;return!1})(attr,whitelistedAttributes)||el.removeAttribute(attr.nodeName)}))},i=0,len=elements.length;i<len;i++)_loop(i);return createdDocument.body.innerHTML}var NAME$6="tooltip",JQUERY_NO_CONFLICT$6=$.fn[NAME$6],BSCLS_PREFIX_REGEX=new RegExp("(^|\\s)bs-tooltip\\S+","g"),DISALLOWED_ATTRIBUTES=["sanitize","whiteList","sanitizeFn"],DefaultType$4={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},AttachmentMap$1={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Default$4={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:DefaultWhitelist,popperConfig:null},HoverState_SHOW="show",HoverState_OUT="out",Event$6={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},ClassName$6_FADE="fade",ClassName$6_SHOW="show",Selector$6_TOOLTIP_INNER=".tooltip-inner",Selector$6_ARROW=".arrow",Trigger_HOVER="hover",Trigger_FOCUS="focus",Trigger_CLICK="click",Trigger_MANUAL="manual",Tooltip=function(){function Tooltip(element,config){if(void 0===Popper)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=element,this.config=this._getConfig(config),this.tip=null,this._setListeners()}var _proto=Tooltip.prototype;return _proto.enable=function(){this._isEnabled=!0},_proto.disable=function(){this._isEnabled=!1},_proto.toggleEnabled=function(){this._isEnabled=!this._isEnabled},_proto.toggle=function(event){if(this._isEnabled)if(event){var dataKey=this.constructor.DATA_KEY,context=$(event.currentTarget).data(dataKey);context||(context=new this.constructor(event.currentTarget,this._getDelegateConfig()),$(event.currentTarget).data(dataKey,context)),context._activeTrigger.click=!context._activeTrigger.click,context._isWithActiveTrigger()?context._enter(null,context):context._leave(null,context)}else{if($(this.getTipElement()).hasClass(ClassName$6_SHOW))return void this._leave(null,this);this._enter(null,this)}},_proto.dispose=function(){clearTimeout(this._timeout),$.removeData(this.element,this.constructor.DATA_KEY),$(this.element).off(this.constructor.EVENT_KEY),$(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&$(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},_proto.show=function(){var _this=this;if("none"===$(this.element).css("display"))throw new Error("Please use show on visible elements");var showEvent=$.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){$(this.element).trigger(showEvent);var shadowRoot=Util.findShadowRoot(this.element),isInTheDom=$.contains(null!==shadowRoot?shadowRoot:this.element.ownerDocument.documentElement,this.element);if(showEvent.isDefaultPrevented()||!isInTheDom)return;var tip=this.getTipElement(),tipId=Util.getUID(this.constructor.NAME);tip.setAttribute("id",tipId),this.element.setAttribute("aria-describedby",tipId),this.setContent(),this.config.animation&&$(tip).addClass(ClassName$6_FADE);var placement="function"==typeof this.config.placement?this.config.placement.call(this,tip,this.element):this.config.placement,attachment=this._getAttachment(placement);this.addAttachmentClass(attachment);var container=this._getContainer();$(tip).data(this.constructor.DATA_KEY,this),$.contains(this.element.ownerDocument.documentElement,this.tip)||$(tip).appendTo(container),$(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new Popper(this.element,tip,this._getPopperConfig(attachment)),$(tip).addClass(ClassName$6_SHOW),"ontouchstart"in document.documentElement&&$(document.body).children().on("mouseover",null,$.noop);var complete=function(){_this.config.animation&&_this._fixTransition();var prevHoverState=_this._hoverState;_this._hoverState=null,$(_this.element).trigger(_this.constructor.Event.SHOWN),prevHoverState===HoverState_OUT&&_this._leave(null,_this)};if($(this.tip).hasClass(ClassName$6_FADE)){var transitionDuration=Util.getTransitionDurationFromElement(this.tip);$(this.tip).one(Util.TRANSITION_END,complete).emulateTransitionEnd(transitionDuration)}else complete()}},_proto.hide=function(callback){var _this2=this,tip=this.getTipElement(),hideEvent=$.Event(this.constructor.Event.HIDE),complete=function(){_this2._hoverState!==HoverState_SHOW&&tip.parentNode&&tip.parentNode.removeChild(tip),_this2._cleanTipClass(),_this2.element.removeAttribute("aria-describedby"),$(_this2.element).trigger(_this2.constructor.Event.HIDDEN),null!==_this2._popper&&_this2._popper.destroy(),callback&&callback()};if($(this.element).trigger(hideEvent),!hideEvent.isDefaultPrevented()){if($(tip).removeClass(ClassName$6_SHOW),"ontouchstart"in document.documentElement&&$(document.body).children().off("mouseover",null,$.noop),this._activeTrigger[Trigger_CLICK]=!1,this._activeTrigger[Trigger_FOCUS]=!1,this._activeTrigger[Trigger_HOVER]=!1,$(this.tip).hasClass(ClassName$6_FADE)){var transitionDuration=Util.getTransitionDurationFromElement(tip);$(tip).one(Util.TRANSITION_END,complete).emulateTransitionEnd(transitionDuration)}else complete();this._hoverState=""}},_proto.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},_proto.isWithContent=function(){return Boolean(this.getTitle())},_proto.addAttachmentClass=function(attachment){$(this.getTipElement()).addClass("bs-tooltip-"+attachment)},_proto.getTipElement=function(){return this.tip=this.tip||$(this.config.template)[0],this.tip},_proto.setContent=function(){var tip=this.getTipElement();this.setElementContent($(tip.querySelectorAll(Selector$6_TOOLTIP_INNER)),this.getTitle()),$(tip).removeClass(ClassName$6_FADE+" "+ClassName$6_SHOW)},_proto.setElementContent=function($element,content){"object"!=typeof content||!content.nodeType&&!content.jquery?this.config.html?(this.config.sanitize&&(content=sanitizeHtml(content,this.config.whiteList,this.config.sanitizeFn)),$element.html(content)):$element.text(content):this.config.html?$(content).parent().is($element)||$element.empty().append(content):$element.text($(content).text())},_proto.getTitle=function(){var title=this.element.getAttribute("data-original-title");return title||(title="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),title},_proto._getPopperConfig=function(attachment){var _this3=this;return _objectSpread2({},{placement:attachment,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:Selector$6_ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(data){data.originalPlacement!==data.placement&&_this3._handlePopperPlacementChange(data)},onUpdate:function(data){return _this3._handlePopperPlacementChange(data)}},{},this.config.popperConfig)},_proto._getOffset=function(){var _this4=this,offset={};return"function"==typeof this.config.offset?offset.fn=function(data){return data.offsets=_objectSpread2({},data.offsets,{},_this4.config.offset(data.offsets,_this4.element)||{}),data}:offset.offset=this.config.offset,offset},_proto._getContainer=function(){return!1===this.config.container?document.body:Util.isElement(this.config.container)?$(this.config.container):$(document).find(this.config.container)},_proto._getAttachment=function(placement){return AttachmentMap$1[placement.toUpperCase()]},_proto._setListeners=function(){var _this5=this;this.config.trigger.split(" ").forEach((function(trigger){if("click"===trigger)$(_this5.element).on(_this5.constructor.Event.CLICK,_this5.config.selector,(function(event){return _this5.toggle(event)}));else if(trigger!==Trigger_MANUAL){var eventIn=trigger===Trigger_HOVER?_this5.constructor.Event.MOUSEENTER:_this5.constructor.Event.FOCUSIN,eventOut=trigger===Trigger_HOVER?_this5.constructor.Event.MOUSELEAVE:_this5.constructor.Event.FOCUSOUT;$(_this5.element).on(eventIn,_this5.config.selector,(function(event){return _this5._enter(event)})).on(eventOut,_this5.config.selector,(function(event){return _this5._leave(event)}))}})),this._hideModalHandler=function(){_this5.element&&_this5.hide()},$(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=_objectSpread2({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},_proto._fixTitle=function(){var titleType=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==titleType)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},_proto._enter=function(event,context){var dataKey=this.constructor.DATA_KEY;(context=context||$(event.currentTarget).data(dataKey))||(context=new this.constructor(event.currentTarget,this._getDelegateConfig()),$(event.currentTarget).data(dataKey,context)),event&&(context._activeTrigger["focusin"===event.type?Trigger_FOCUS:Trigger_HOVER]=!0),$(context.getTipElement()).hasClass(ClassName$6_SHOW)||context._hoverState===HoverState_SHOW?context._hoverState=HoverState_SHOW:(clearTimeout(context._timeout),context._hoverState=HoverState_SHOW,context.config.delay&&context.config.delay.show?context._timeout=setTimeout((function(){context._hoverState===HoverState_SHOW&&context.show()}),context.config.delay.show):context.show())},_proto._leave=function(event,context){var dataKey=this.constructor.DATA_KEY;(context=context||$(event.currentTarget).data(dataKey))||(context=new this.constructor(event.currentTarget,this._getDelegateConfig()),$(event.currentTarget).data(dataKey,context)),event&&(context._activeTrigger["focusout"===event.type?Trigger_FOCUS:Trigger_HOVER]=!1),context._isWithActiveTrigger()||(clearTimeout(context._timeout),context._hoverState=HoverState_OUT,context.config.delay&&context.config.delay.hide?context._timeout=setTimeout((function(){context._hoverState===HoverState_OUT&&context.hide()}),context.config.delay.hide):context.hide())},_proto._isWithActiveTrigger=function(){for(var trigger in this._activeTrigger)if(this._activeTrigger[trigger])return!0;return!1},_proto._getConfig=function(config){var dataAttributes=$(this.element).data();return Object.keys(dataAttributes).forEach((function(dataAttr){-1!==DISALLOWED_ATTRIBUTES.indexOf(dataAttr)&&delete dataAttributes[dataAttr]})),"number"==typeof(config=_objectSpread2({},this.constructor.Default,{},dataAttributes,{},"object"==typeof config&&config?config:{})).delay&&(config.delay={show:config.delay,hide:config.delay}),"number"==typeof config.title&&(config.title=config.title.toString()),"number"==typeof config.content&&(config.content=config.content.toString()),Util.typeCheckConfig(NAME$6,config,this.constructor.DefaultType),config.sanitize&&(config.template=sanitizeHtml(config.template,config.whiteList,config.sanitizeFn)),config},_proto._getDelegateConfig=function(){var config={};if(this.config)for(var key in this.config)this.constructor.Default[key]!==this.config[key]&&(config[key]=this.config[key]);return config},_proto._cleanTipClass=function(){var $tip=$(this.getTipElement()),tabClass=$tip.attr("class").match(BSCLS_PREFIX_REGEX);null!==tabClass&&tabClass.length&&$tip.removeClass(tabClass.join(""))},_proto._handlePopperPlacementChange=function(popperData){var popperInstance=popperData.instance;this.tip=popperInstance.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(popperData.placement))},_proto._fixTransition=function(){var tip=this.getTipElement(),initConfigAnimation=this.config.animation;null===tip.getAttribute("x-placement")&&($(tip).removeClass(ClassName$6_FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=initConfigAnimation)},Tooltip._jQueryInterface=function(config){return this.each((function(){var data=$(this).data("bs.tooltip"),_config="object"==typeof config&&config;if((data||!/dispose|hide/.test(config))&&(data||(data=new Tooltip(this,_config),$(this).data("bs.tooltip",data)),"string"==typeof config)){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config]()}}))},_createClass(Tooltip,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Default$4}},{key:"NAME",get:function(){return NAME$6}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return Event$6}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return DefaultType$4}}]),Tooltip}();$.fn[NAME$6]=Tooltip._jQueryInterface,$.fn[NAME$6].Constructor=Tooltip,$.fn[NAME$6].noConflict=function(){return $.fn[NAME$6]=JQUERY_NO_CONFLICT$6,Tooltip._jQueryInterface};var NAME$7="popover",JQUERY_NO_CONFLICT$7=$.fn[NAME$7],BSCLS_PREFIX_REGEX$1=new RegExp("(^|\\s)bs-popover\\S+","g"),Default$5=_objectSpread2({},Tooltip.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),DefaultType$5=_objectSpread2({},Tooltip.DefaultType,{content:"(string|element|function)"}),ClassName$7_FADE="fade",ClassName$7_SHOW="show",Selector$7_TITLE=".popover-header",Selector$7_CONTENT=".popover-body",Event$7={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},Popover=function(_Tooltip){var subClass,superClass;function Popover(){return _Tooltip.apply(this,arguments)||this}superClass=_Tooltip,(subClass=Popover).prototype=Object.create(superClass.prototype),subClass.prototype.constructor=subClass,subClass.__proto__=superClass;var _proto=Popover.prototype;return _proto.isWithContent=function(){return this.getTitle()||this._getContent()},_proto.addAttachmentClass=function(attachment){$(this.getTipElement()).addClass("bs-popover-"+attachment)},_proto.getTipElement=function(){return this.tip=this.tip||$(this.config.template)[0],this.tip},_proto.setContent=function(){var $tip=$(this.getTipElement());this.setElementContent($tip.find(Selector$7_TITLE),this.getTitle());var content=this._getContent();"function"==typeof content&&(content=content.call(this.element)),this.setElementContent($tip.find(Selector$7_CONTENT),content),$tip.removeClass(ClassName$7_FADE+" "+ClassName$7_SHOW)},_proto._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},_proto._cleanTipClass=function(){var $tip=$(this.getTipElement()),tabClass=$tip.attr("class").match(BSCLS_PREFIX_REGEX$1);null!==tabClass&&tabClass.length>0&&$tip.removeClass(tabClass.join(""))},Popover._jQueryInterface=function(config){return this.each((function(){var data=$(this).data("bs.popover"),_config="object"==typeof config?config:null;if((data||!/dispose|hide/.test(config))&&(data||(data=new Popover(this,_config),$(this).data("bs.popover",data)),"string"==typeof config)){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config]()}}))},_createClass(Popover,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Default$5}},{key:"NAME",get:function(){return NAME$7}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return Event$7}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return DefaultType$5}}]),Popover}(Tooltip);$.fn[NAME$7]=Popover._jQueryInterface,$.fn[NAME$7].Constructor=Popover,$.fn[NAME$7].noConflict=function(){return $.fn[NAME$7]=JQUERY_NO_CONFLICT$7,Popover._jQueryInterface};var NAME$8="scrollspy",JQUERY_NO_CONFLICT$8=$.fn[NAME$8],Default$6={offset:10,method:"auto",target:""},DefaultType$6={offset:"number",method:"string",target:"(string|element)"},Event$8={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},ClassName$8_DROPDOWN_ITEM="dropdown-item",ClassName$8_ACTIVE="active",Selector$8_DATA_SPY='[data-spy="scroll"]',Selector$8_NAV_LIST_GROUP=".nav, .list-group",Selector$8_NAV_LINKS=".nav-link",Selector$8_NAV_ITEMS=".nav-item",Selector$8_LIST_ITEMS=".list-group-item",Selector$8_DROPDOWN=".dropdown",Selector$8_DROPDOWN_ITEMS=".dropdown-item",Selector$8_DROPDOWN_TOGGLE=".dropdown-toggle",OffsetMethod_OFFSET="offset",OffsetMethod_POSITION="position",ScrollSpy=function(){function ScrollSpy(element,config){var _this=this;this._element=element,this._scrollElement="BODY"===element.tagName?window:element,this._config=this._getConfig(config),this._selector=this._config.target+" "+Selector$8_NAV_LINKS+","+this._config.target+" "+Selector$8_LIST_ITEMS+","+this._config.target+" "+Selector$8_DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,$(this._scrollElement).on(Event$8.SCROLL,(function(event){return _this._process(event)})),this.refresh(),this._process()}var _proto=ScrollSpy.prototype;return _proto.refresh=function(){var _this2=this,autoMethod=this._scrollElement===this._scrollElement.window?OffsetMethod_OFFSET:OffsetMethod_POSITION,offsetMethod="auto"===this._config.method?autoMethod:this._config.method,offsetBase=offsetMethod===OffsetMethod_POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(element){var target,targetSelector=Util.getSelectorFromElement(element);if(targetSelector&&(target=document.querySelector(targetSelector)),target){var targetBCR=target.getBoundingClientRect();if(targetBCR.width||targetBCR.height)return[$(target)[offsetMethod]().top+offsetBase,targetSelector]}return null})).filter((function(item){return item})).sort((function(a,b){return a[0]-b[0]})).forEach((function(item){_this2._offsets.push(item[0]),_this2._targets.push(item[1])}))},_proto.dispose=function(){$.removeData(this._element,"bs.scrollspy"),$(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},_proto._getConfig=function(config){if("string"!=typeof(config=_objectSpread2({},Default$6,{},"object"==typeof config&&config?config:{})).target){var id=$(config.target).attr("id");id||(id=Util.getUID(NAME$8),$(config.target).attr("id",id)),config.target="#"+id}return Util.typeCheckConfig(NAME$8,config,DefaultType$6),config},_proto._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},_proto._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},_proto._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},_proto._process=function(){var scrollTop=this._getScrollTop()+this._config.offset,scrollHeight=this._getScrollHeight(),maxScroll=this._config.offset+scrollHeight-this._getOffsetHeight();if(this._scrollHeight!==scrollHeight&&this.refresh(),scrollTop>=maxScroll){var target=this._targets[this._targets.length-1];this._activeTarget!==target&&this._activate(target)}else{if(this._activeTarget&&scrollTop<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;){this._activeTarget!==this._targets[i]&&scrollTop>=this._offsets[i]&&(void 0===this._offsets[i+1]||scrollTop<this._offsets[i+1])&&this._activate(this._targets[i])}}},_proto._activate=function(target){this._activeTarget=target,this._clear();var queries=this._selector.split(",").map((function(selector){return selector+'[data-target="'+target+'"],'+selector+'[href="'+target+'"]'})),$link=$([].slice.call(document.querySelectorAll(queries.join(","))));$link.hasClass(ClassName$8_DROPDOWN_ITEM)?($link.closest(Selector$8_DROPDOWN).find(Selector$8_DROPDOWN_TOGGLE).addClass(ClassName$8_ACTIVE),$link.addClass(ClassName$8_ACTIVE)):($link.addClass(ClassName$8_ACTIVE),$link.parents(Selector$8_NAV_LIST_GROUP).prev(Selector$8_NAV_LINKS+", "+Selector$8_LIST_ITEMS).addClass(ClassName$8_ACTIVE),$link.parents(Selector$8_NAV_LIST_GROUP).prev(Selector$8_NAV_ITEMS).children(Selector$8_NAV_LINKS).addClass(ClassName$8_ACTIVE)),$(this._scrollElement).trigger(Event$8.ACTIVATE,{relatedTarget:target})},_proto._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(node){return node.classList.contains(ClassName$8_ACTIVE)})).forEach((function(node){return node.classList.remove(ClassName$8_ACTIVE)}))},ScrollSpy._jQueryInterface=function(config){return this.each((function(){var data=$(this).data("bs.scrollspy");if(data||(data=new ScrollSpy(this,"object"==typeof config&&config),$(this).data("bs.scrollspy",data)),"string"==typeof config){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config]()}}))},_createClass(ScrollSpy,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"Default",get:function(){return Default$6}}]),ScrollSpy}();$(window).on(Event$8.LOAD_DATA_API,(function(){for(var scrollSpys=[].slice.call(document.querySelectorAll(Selector$8_DATA_SPY)),i=scrollSpys.length;i--;){var $spy=$(scrollSpys[i]);ScrollSpy._jQueryInterface.call($spy,$spy.data())}})),$.fn[NAME$8]=ScrollSpy._jQueryInterface,$.fn[NAME$8].Constructor=ScrollSpy,$.fn[NAME$8].noConflict=function(){return $.fn[NAME$8]=JQUERY_NO_CONFLICT$8,ScrollSpy._jQueryInterface};var JQUERY_NO_CONFLICT$9=$.fn.tab,Event$9={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},ClassName$9_DROPDOWN_MENU="dropdown-menu",ClassName$9_ACTIVE="active",ClassName$9_DISABLED="disabled",ClassName$9_FADE="fade",ClassName$9_SHOW="show",Selector$9_DROPDOWN=".dropdown",Selector$9_NAV_LIST_GROUP=".nav, .list-group",Selector$9_ACTIVE=".active",Selector$9_ACTIVE_UL="> li > .active",Selector$9_DATA_TOGGLE='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Selector$9_DROPDOWN_TOGGLE=".dropdown-toggle",Selector$9_DROPDOWN_ACTIVE_CHILD="> .dropdown-menu .active",Tab=function(){function Tab(element){this._element=element}var _proto=Tab.prototype;return _proto.show=function(){var _this=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&$(this._element).hasClass(ClassName$9_ACTIVE)||$(this._element).hasClass(ClassName$9_DISABLED))){var target,previous,listElement=$(this._element).closest(Selector$9_NAV_LIST_GROUP)[0],selector=Util.getSelectorFromElement(this._element);if(listElement){var itemSelector="UL"===listElement.nodeName||"OL"===listElement.nodeName?Selector$9_ACTIVE_UL:Selector$9_ACTIVE;previous=(previous=$.makeArray($(listElement).find(itemSelector)))[previous.length-1]}var hideEvent=$.Event(Event$9.HIDE,{relatedTarget:this._element}),showEvent=$.Event(Event$9.SHOW,{relatedTarget:previous});if(previous&&$(previous).trigger(hideEvent),$(this._element).trigger(showEvent),!showEvent.isDefaultPrevented()&&!hideEvent.isDefaultPrevented()){selector&&(target=document.querySelector(selector)),this._activate(this._element,listElement);var complete=function(){var hiddenEvent=$.Event(Event$9.HIDDEN,{relatedTarget:_this._element}),shownEvent=$.Event(Event$9.SHOWN,{relatedTarget:previous});$(previous).trigger(hiddenEvent),$(_this._element).trigger(shownEvent)};target?this._activate(target,target.parentNode,complete):complete()}}},_proto.dispose=function(){$.removeData(this._element,"bs.tab"),this._element=null},_proto._activate=function(element,container,callback){var _this2=this,active=(!container||"UL"!==container.nodeName&&"OL"!==container.nodeName?$(container).children(Selector$9_ACTIVE):$(container).find(Selector$9_ACTIVE_UL))[0],isTransitioning=callback&&active&&$(active).hasClass(ClassName$9_FADE),complete=function(){return _this2._transitionComplete(element,active,callback)};if(active&&isTransitioning){var transitionDuration=Util.getTransitionDurationFromElement(active);$(active).removeClass(ClassName$9_SHOW).one(Util.TRANSITION_END,complete).emulateTransitionEnd(transitionDuration)}else complete()},_proto._transitionComplete=function(element,active,callback){if(active){$(active).removeClass(ClassName$9_ACTIVE);var dropdownChild=$(active.parentNode).find(Selector$9_DROPDOWN_ACTIVE_CHILD)[0];dropdownChild&&$(dropdownChild).removeClass(ClassName$9_ACTIVE),"tab"===active.getAttribute("role")&&active.setAttribute("aria-selected",!1)}if($(element).addClass(ClassName$9_ACTIVE),"tab"===element.getAttribute("role")&&element.setAttribute("aria-selected",!0),Util.reflow(element),element.classList.contains(ClassName$9_FADE)&&element.classList.add(ClassName$9_SHOW),element.parentNode&&$(element.parentNode).hasClass(ClassName$9_DROPDOWN_MENU)){var dropdownElement=$(element).closest(Selector$9_DROPDOWN)[0];if(dropdownElement){var dropdownToggleList=[].slice.call(dropdownElement.querySelectorAll(Selector$9_DROPDOWN_TOGGLE));$(dropdownToggleList).addClass(ClassName$9_ACTIVE)}element.setAttribute("aria-expanded",!0)}callback&&callback()},Tab._jQueryInterface=function(config){return this.each((function(){var $this=$(this),data=$this.data("bs.tab");if(data||(data=new Tab(this),$this.data("bs.tab",data)),"string"==typeof config){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config]()}}))},_createClass(Tab,null,[{key:"VERSION",get:function(){return"4.4.1"}}]),Tab}();$(document).on(Event$9.CLICK_DATA_API,Selector$9_DATA_TOGGLE,(function(event){event.preventDefault(),Tab._jQueryInterface.call($(this),"show")})),$.fn.tab=Tab._jQueryInterface,$.fn.tab.Constructor=Tab,$.fn.tab.noConflict=function(){return $.fn.tab=JQUERY_NO_CONFLICT$9,Tab._jQueryInterface};var JQUERY_NO_CONFLICT$a=$.fn.toast,Event$a={CLICK_DISMISS:"click.dismiss.bs.toast",HIDE:"hide.bs.toast",HIDDEN:"hidden.bs.toast",SHOW:"show.bs.toast",SHOWN:"shown.bs.toast"},ClassName$a_FADE="fade",ClassName$a_HIDE="hide",ClassName$a_SHOW="show",ClassName$a_SHOWING="showing",DefaultType$7={animation:"boolean",autohide:"boolean",delay:"number"},Default$7={animation:!0,autohide:!0,delay:500},Selector$a_DATA_DISMISS='[data-dismiss="toast"]',Toast=function(){function Toast(element,config){this._element=element,this._config=this._getConfig(config),this._timeout=null,this._setListeners()}var _proto=Toast.prototype;return _proto.show=function(){var _this=this,showEvent=$.Event(Event$a.SHOW);if($(this._element).trigger(showEvent),!showEvent.isDefaultPrevented()){this._config.animation&&this._element.classList.add(ClassName$a_FADE);var complete=function(){_this._element.classList.remove(ClassName$a_SHOWING),_this._element.classList.add(ClassName$a_SHOW),$(_this._element).trigger(Event$a.SHOWN),_this._config.autohide&&(_this._timeout=setTimeout((function(){_this.hide()}),_this._config.delay))};if(this._element.classList.remove(ClassName$a_HIDE),Util.reflow(this._element),this._element.classList.add(ClassName$a_SHOWING),this._config.animation){var transitionDuration=Util.getTransitionDurationFromElement(this._element);$(this._element).one(Util.TRANSITION_END,complete).emulateTransitionEnd(transitionDuration)}else complete()}},_proto.hide=function(){if(this._element.classList.contains(ClassName$a_SHOW)){var hideEvent=$.Event(Event$a.HIDE);$(this._element).trigger(hideEvent),hideEvent.isDefaultPrevented()||this._close()}},_proto.dispose=function(){clearTimeout(this._timeout),this._timeout=null,this._element.classList.contains(ClassName$a_SHOW)&&this._element.classList.remove(ClassName$a_SHOW),$(this._element).off(Event$a.CLICK_DISMISS),$.removeData(this._element,"bs.toast"),this._element=null,this._config=null},_proto._getConfig=function(config){return config=_objectSpread2({},Default$7,{},$(this._element).data(),{},"object"==typeof config&&config?config:{}),Util.typeCheckConfig("toast",config,this.constructor.DefaultType),config},_proto._setListeners=function(){var _this2=this;$(this._element).on(Event$a.CLICK_DISMISS,Selector$a_DATA_DISMISS,(function(){return _this2.hide()}))},_proto._close=function(){var _this3=this,complete=function(){_this3._element.classList.add(ClassName$a_HIDE),$(_this3._element).trigger(Event$a.HIDDEN)};if(this._element.classList.remove(ClassName$a_SHOW),this._config.animation){var transitionDuration=Util.getTransitionDurationFromElement(this._element);$(this._element).one(Util.TRANSITION_END,complete).emulateTransitionEnd(transitionDuration)}else complete()},Toast._jQueryInterface=function(config){return this.each((function(){var $element=$(this),data=$element.data("bs.toast");if(data||(data=new Toast(this,"object"==typeof config&&config),$element.data("bs.toast",data)),"string"==typeof config){if(void 0===data[config])throw new TypeError('No method named "'+config+'"');data[config](this)}}))},_createClass(Toast,null,[{key:"VERSION",get:function(){return"4.4.1"}},{key:"DefaultType",get:function(){return DefaultType$7}},{key:"Default",get:function(){return Default$7}}]),Toast}();$.fn.toast=Toast._jQueryInterface,$.fn.toast.Constructor=Toast,$.fn.toast.noConflict=function(){return $.fn.toast=JQUERY_NO_CONFLICT$a,Toast._jQueryInterface},exports.Alert=Alert,exports.Button=Button,exports.Carousel=Carousel,exports.Collapse=Collapse,exports.Dropdown=Dropdown,exports.Modal=Modal,exports.Popover=Popover,exports.Scrollspy=ScrollSpy,exports.Tab=Tab,exports.Toast=Toast,exports.Tooltip=Tooltip,exports.Util=Util,Object.defineProperty(exports,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
