!function($){function processRawData(plot,series,datapoints){var handlers={square:function(ctx,x,y,radius,shadow){var size=radius*Math.sqrt(Math.PI)/2;ctx.rect(x-size,y-size,size+size,size+size)},diamond:function(ctx,x,y,radius,shadow){var size=radius*Math.sqrt(Math.PI/2);ctx.moveTo(x-size,y),ctx.lineTo(x,y-size),ctx.lineTo(x+size,y),ctx.lineTo(x,y+size),ctx.lineTo(x-size,y)},triangle:function(ctx,x,y,radius,shadow){var size=radius*Math.sqrt(2*Math.PI/Math.sin(Math.PI/3)),height=size*Math.sin(Math.PI/3);ctx.moveTo(x-size/2,y+height/2),ctx.lineTo(x+size/2,y+height/2),shadow||(ctx.lineTo(x,y-height/2),ctx.lineTo(x-size/2,y+height/2))},cross:function(ctx,x,y,radius,shadow){var size=radius*Math.sqrt(Math.PI)/2;ctx.moveTo(x-size,y-size),ctx.lineTo(x+size,y+size),ctx.moveTo(x-size,y+size),ctx.lineTo(x+size,y-size)}},s=series.points.symbol;handlers[s]&&(series.points.symbol=handlers[s])}jQuery.plot.plugins.push({init:function(plot){plot.hooks.processDatapoints.push(processRawData)},name:"symbols",version:"1.0"})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvZmxvdC9qcXVlcnkuZmxvdC5zeW1ib2wuanMiXSwibmFtZXMiOlsiJCIsInByb2Nlc3NSYXdEYXRhIiwicGxvdCIsInNlcmllcyIsImRhdGFwb2ludHMiLCJoYW5kbGVycyIsInNxdWFyZSIsImN0eCIsIngiLCJ5IiwicmFkaXVzIiwic2hhZG93Iiwic2l6ZSIsIk1hdGgiLCJzcXJ0IiwiUEkiLCJyZWN0IiwiZGlhbW9uZCIsIm1vdmVUbyIsImxpbmVUbyIsInRyaWFuZ2xlIiwic2luIiwiaGVpZ2h0IiwiY3Jvc3MiLCJzIiwicG9pbnRzIiwic3ltYm9sIiwialF1ZXJ5IiwicGx1Z2lucyIsInB1c2giLCJpbml0IiwiaG9va3MiLCJwcm9jZXNzRGF0YXBvaW50cyIsIm5hbWUiLCJ2ZXJzaW9uIl0sIm1hcHBpbmdzIjoiQ0FlQSxTQUFXQSxHQUNQLFNBQVNDLGVBQWVDLEtBQU1DLE9BQVFDLFlBSWxDLElBQUlDLFNBQVcsQ0FDWEMsT0FBUSxTQUFVQyxJQUFLQyxFQUFHQyxFQUFHQyxPQUFRQyxRQUVqQyxJQUFJQyxLQUFPRixPQUFTRyxLQUFLQyxLQUFLRCxLQUFLRSxJQUFNLEVBQ3pDUixJQUFJUyxLQUFLUixFQUFJSSxLQUFNSCxFQUFJRyxLQUFNQSxLQUFPQSxLQUFNQSxLQUFPQSxPQUVyREssUUFBUyxTQUFVVixJQUFLQyxFQUFHQyxFQUFHQyxPQUFRQyxRQUVsQyxJQUFJQyxLQUFPRixPQUFTRyxLQUFLQyxLQUFLRCxLQUFLRSxHQUFLLEdBQ3hDUixJQUFJVyxPQUFPVixFQUFJSSxLQUFNSCxHQUNyQkYsSUFBSVksT0FBT1gsRUFBR0MsRUFBSUcsTUFDbEJMLElBQUlZLE9BQU9YLEVBQUlJLEtBQU1ILEdBQ3JCRixJQUFJWSxPQUFPWCxFQUFHQyxFQUFJRyxNQUNsQkwsSUFBSVksT0FBT1gsRUFBSUksS0FBTUgsSUFFekJXLFNBQVUsU0FBVWIsSUFBS0MsRUFBR0MsRUFBR0MsT0FBUUMsUUFFbkMsSUFBSUMsS0FBT0YsT0FBU0csS0FBS0MsS0FBSyxFQUFJRCxLQUFLRSxHQUFLRixLQUFLUSxJQUFJUixLQUFLRSxHQUFLLElBQzNETyxPQUFTVixLQUFPQyxLQUFLUSxJQUFJUixLQUFLRSxHQUFLLEdBQ3ZDUixJQUFJVyxPQUFPVixFQUFJSSxLQUFLLEVBQUdILEVBQUlhLE9BQU8sR0FDbENmLElBQUlZLE9BQU9YLEVBQUlJLEtBQUssRUFBR0gsRUFBSWEsT0FBTyxHQUM3QlgsU0FDREosSUFBSVksT0FBT1gsRUFBR0MsRUFBSWEsT0FBTyxHQUN6QmYsSUFBSVksT0FBT1gsRUFBSUksS0FBSyxFQUFHSCxFQUFJYSxPQUFPLEtBRzFDQyxNQUFPLFNBQVVoQixJQUFLQyxFQUFHQyxFQUFHQyxPQUFRQyxRQUVoQyxJQUFJQyxLQUFPRixPQUFTRyxLQUFLQyxLQUFLRCxLQUFLRSxJQUFNLEVBQ3pDUixJQUFJVyxPQUFPVixFQUFJSSxLQUFNSCxFQUFJRyxNQUN6QkwsSUFBSVksT0FBT1gsRUFBSUksS0FBTUgsRUFBSUcsTUFDekJMLElBQUlXLE9BQU9WLEVBQUlJLEtBQU1ILEVBQUlHLE1BQ3pCTCxJQUFJWSxPQUFPWCxFQUFJSSxLQUFNSCxFQUFJRyxRQUk3QlksRUFBSXJCLE9BQU9zQixPQUFPQyxPQUNsQnJCLFNBQVNtQixLQUNUckIsT0FBT3NCLE9BQU9DLE9BQVNyQixTQUFTbUIsSUFZekNHLE9BTEd6QixLQUFLMEIsUUFBUUMsS0FBSyxDQUNoQkMsS0FMSixTQUFjNUIsTUFDVkEsS0FBSzZCLE1BQU1DLGtCQUFrQkgsS0FBSzVCLGlCQUtsQ2dDLEtBQU0sVUFDTkMsUUFBUyxRQXJEakIiLCJmaWxlIjoicGx1Z2lucy9mbG90L2pxdWVyeS5mbG90LnN5bWJvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIEZsb3QgcGx1Z2luIHRoYXQgYWRkcyBzb21lIGV4dHJhIHN5bWJvbHMgZm9yIHBsb3R0aW5nIHBvaW50cy5cblxuQ29weXJpZ2h0IChjKSAyMDA3LTIwMTQgSU9MQSBhbmQgT2xlIExhdXJzZW4uXG5MaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cblRoZSBzeW1ib2xzIGFyZSBhY2Nlc3NlZCBhcyBzdHJpbmdzIHRocm91Z2ggdGhlIHN0YW5kYXJkIHN5bWJvbCBvcHRpb25zOlxuXG5cdHNlcmllczoge1xuXHRcdHBvaW50czoge1xuXHRcdFx0c3ltYm9sOiBcInNxdWFyZVwiIC8vIG9yIFwiZGlhbW9uZFwiLCBcInRyaWFuZ2xlXCIsIFwiY3Jvc3NcIlxuXHRcdH1cblx0fVxuXG4qL1xuXG4oZnVuY3Rpb24gKCQpIHtcbiAgICBmdW5jdGlvbiBwcm9jZXNzUmF3RGF0YShwbG90LCBzZXJpZXMsIGRhdGFwb2ludHMpIHtcbiAgICAgICAgLy8gd2Ugbm9ybWFsaXplIHRoZSBhcmVhIG9mIGVhY2ggc3ltYm9sIHNvIGl0IGlzIGFwcHJveGltYXRlbHkgdGhlXG4gICAgICAgIC8vIHNhbWUgYXMgYSBjaXJjbGUgb2YgdGhlIGdpdmVuIHJhZGl1c1xuXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHtcbiAgICAgICAgICAgIHNxdWFyZTogZnVuY3Rpb24gKGN0eCwgeCwgeSwgcmFkaXVzLCBzaGFkb3cpIHtcbiAgICAgICAgICAgICAgICAvLyBwaSAqIHJeMiA9ICgycyleMiAgPT4gIHMgPSByICogc3FydChwaSkvMlxuICAgICAgICAgICAgICAgIHZhciBzaXplID0gcmFkaXVzICogTWF0aC5zcXJ0KE1hdGguUEkpIC8gMjtcbiAgICAgICAgICAgICAgICBjdHgucmVjdCh4IC0gc2l6ZSwgeSAtIHNpemUsIHNpemUgKyBzaXplLCBzaXplICsgc2l6ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGlhbW9uZDogZnVuY3Rpb24gKGN0eCwgeCwgeSwgcmFkaXVzLCBzaGFkb3cpIHtcbiAgICAgICAgICAgICAgICAvLyBwaSAqIHJeMiA9IDJzXjIgID0+ICBzID0gciAqIHNxcnQocGkvMilcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZSA9IHJhZGl1cyAqIE1hdGguc3FydChNYXRoLlBJIC8gMik7XG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0gc2l6ZSwgeSk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5IC0gc2l6ZSk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgc2l6ZSwgeSk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5ICsgc2l6ZSk7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0gc2l6ZSwgeSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJpYW5nbGU6IGZ1bmN0aW9uIChjdHgsIHgsIHksIHJhZGl1cywgc2hhZG93KSB7XG4gICAgICAgICAgICAgICAgLy8gcGkgKiByXjIgPSAxLzIgKiBzXjIgKiBzaW4gKHBpIC8gMykgID0+ICBzID0gciAqIHNxcnQoMiAqIHBpIC8gc2luKHBpIC8gMykpXG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSByYWRpdXMgKiBNYXRoLnNxcnQoMiAqIE1hdGguUEkgLyBNYXRoLnNpbihNYXRoLlBJIC8gMykpO1xuICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBzaXplICogTWF0aC5zaW4oTWF0aC5QSSAvIDMpO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHNpemUvMiwgeSArIGhlaWdodC8yKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHggKyBzaXplLzIsIHkgKyBoZWlnaHQvMik7XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFkb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyh4LCB5IC0gaGVpZ2h0LzIpO1xuICAgICAgICAgICAgICAgICAgICBjdHgubGluZVRvKHggLSBzaXplLzIsIHkgKyBoZWlnaHQvMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyb3NzOiBmdW5jdGlvbiAoY3R4LCB4LCB5LCByYWRpdXMsIHNoYWRvdykge1xuICAgICAgICAgICAgICAgIC8vIHBpICogcl4yID0gKDJzKV4yICA9PiAgcyA9IHIgKiBzcXJ0KHBpKS8yXG4gICAgICAgICAgICAgICAgdmFyIHNpemUgPSByYWRpdXMgKiBNYXRoLnNxcnQoTWF0aC5QSSkgLyAyO1xuICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHNpemUsIHkgLSBzaXplKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHggKyBzaXplLCB5ICsgc2l6ZSk7XG4gICAgICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0gc2l6ZSwgeSArIHNpemUpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHNpemUsIHkgLSBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcyA9IHNlcmllcy5wb2ludHMuc3ltYm9sO1xuICAgICAgICBpZiAoaGFuZGxlcnNbc10pXG4gICAgICAgICAgICBzZXJpZXMucG9pbnRzLnN5bWJvbCA9IGhhbmRsZXJzW3NdO1xuICAgIH1cbiAgICBcbiAgICBmdW5jdGlvbiBpbml0KHBsb3QpIHtcbiAgICAgICAgcGxvdC5ob29rcy5wcm9jZXNzRGF0YXBvaW50cy5wdXNoKHByb2Nlc3NSYXdEYXRhKTtcbiAgICB9XG4gICAgXG4gICAgJC5wbG90LnBsdWdpbnMucHVzaCh7XG4gICAgICAgIGluaXQ6IGluaXQsXG4gICAgICAgIG5hbWU6ICdzeW1ib2xzJyxcbiAgICAgICAgdmVyc2lvbjogJzEuMCdcbiAgICB9KTtcbn0pKGpRdWVyeSk7XG4iXX0=
