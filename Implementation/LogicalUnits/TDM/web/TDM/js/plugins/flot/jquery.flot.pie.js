!function($){var options={series:{pie:{show:!1,radius:"auto",innerRadius:0,startAngle:1.5,tilt:1,shadow:{left:5,top:15,alpha:.02},offset:{top:0,left:"auto"},stroke:{color:"#fff",width:1},label:{show:"auto",formatter:function(label,slice){return"<div style='font-size:x-small;text-align:center;padding:2px;color:"+slice.color+";'>"+label+"<br/>"+Math.round(slice.percent)+"%</div>"},radius:1,background:{color:null,opacity:0},threshold:0},combine:{threshold:-1,color:null,label:"Other"},highlight:{opacity:.5}}}};$.plot.plugins.push({init:function(plot){var canvas=null,target=null,options=null,maxRadius=null,centerLeft=null,centerTop=null,processed=!1,ctx=null,highlights=[];function processDatapoints(plot,series,datapoints){processed||(processed=!0,canvas=plot.getCanvas(),target=$(canvas).parent(),options=plot.getOptions(),plot.setData(function(data){for(var total=0,combined=0,numCombined=0,color=options.series.pie.combine.color,newdata=[],i=0;i<data.length;++i){var value=data[i].data;$.isArray(value)&&1==value.length&&(value=value[0]),$.isArray(value)?!isNaN(parseFloat(value[1]))&&isFinite(value[1])?value[1]=+value[1]:value[1]=0:value=!isNaN(parseFloat(value))&&isFinite(value)?[1,+value]:[1,0],data[i].data=[value]}for(i=0;i<data.length;++i)total+=data[i].data[0][1];for(i=0;i<data.length;++i){(value=data[i].data[0][1])/total<=options.series.pie.combine.threshold&&(combined+=value,numCombined++,color||(color=data[i].color))}for(i=0;i<data.length;++i){value=data[i].data[0][1];(numCombined<2||value/total>options.series.pie.combine.threshold)&&newdata.push($.extend(data[i],{data:[[1,value]],color:data[i].color,label:data[i].label,angle:value*Math.PI*2/total,percent:value/(total/100)}))}numCombined>1&&newdata.push({data:[[1,combined]],color:color,label:options.series.pie.combine.label,angle:combined*Math.PI*2/total,percent:combined/(total/100)});return newdata}(plot.getData())))}function draw(plot,newCtx){if(target){var canvasWidth=plot.getPlaceholder().width(),canvasHeight=plot.getPlaceholder().height(),legendWidth=target.children().filter(".legend").children().width()||0;ctx=newCtx,processed=!1,maxRadius=Math.min(canvasWidth,canvasHeight/options.series.pie.tilt)/2,centerTop=canvasHeight/2+options.series.pie.offset.top,centerLeft=canvasWidth/2,"auto"==options.series.pie.offset.left?(options.legend.position.match("w")?centerLeft+=legendWidth/2:centerLeft-=legendWidth/2,centerLeft<maxRadius?centerLeft=maxRadius:centerLeft>canvasWidth-maxRadius&&(centerLeft=canvasWidth-maxRadius)):centerLeft+=options.series.pie.offset.left;var slices=plot.getData(),attempts=0;do{attempts>0&&(maxRadius*=.95),attempts+=1,clear(),options.series.pie.tilt<=.8&&drawShadow()}while(!drawPie()&&attempts<10);attempts>=10&&(clear(),target.prepend("<div class='error'>Could not draw pie with labels contained inside canvas</div>")),plot.setSeries&&plot.insertLegend&&(plot.setSeries(slices),plot.insertLegend())}function clear(){ctx.clearRect(0,0,canvasWidth,canvasHeight),target.children().filter(".pieLabel, .pieLabelBackground").remove()}function drawShadow(){var shadowLeft=options.series.pie.shadow.left,shadowTop=options.series.pie.shadow.top,alpha=options.series.pie.shadow.alpha,radius=options.series.pie.radius>1?options.series.pie.radius:maxRadius*options.series.pie.radius;if(!(radius>=canvasWidth/2-shadowLeft||radius*options.series.pie.tilt>=canvasHeight/2-shadowTop||radius<=10)){ctx.save(),ctx.translate(shadowLeft,shadowTop),ctx.globalAlpha=alpha,ctx.fillStyle="#000",ctx.translate(centerLeft,centerTop),ctx.scale(1,options.series.pie.tilt);for(var i=1;i<=10;i++)ctx.beginPath(),ctx.arc(0,0,radius,0,2*Math.PI,!1),ctx.fill(),radius-=i;ctx.restore()}}function drawPie(){var startAngle=Math.PI*options.series.pie.startAngle,radius=options.series.pie.radius>1?options.series.pie.radius:maxRadius*options.series.pie.radius;ctx.save(),ctx.translate(centerLeft,centerTop),ctx.scale(1,options.series.pie.tilt),ctx.save();for(var currentAngle=startAngle,i=0;i<slices.length;++i)slices[i].startAngle=currentAngle,drawSlice(slices[i].angle,slices[i].color,!0);if(ctx.restore(),options.series.pie.stroke.width>0){ctx.save(),ctx.lineWidth=options.series.pie.stroke.width,currentAngle=startAngle;for(i=0;i<slices.length;++i)drawSlice(slices[i].angle,options.series.pie.stroke.color,!1);ctx.restore()}return drawDonutHole(ctx),ctx.restore(),!options.series.pie.label.show||function(){for(var currentAngle=startAngle,radius=options.series.pie.label.radius>1?options.series.pie.label.radius:maxRadius*options.series.pie.label.radius,i=0;i<slices.length;++i){if(slices[i].percent>=100*options.series.pie.label.threshold&&!drawLabel(slices[i],currentAngle,i))return!1;currentAngle+=slices[i].angle}return!0;function drawLabel(slice,startAngle,index){if(0==slice.data[0][1])return!0;var text,lf=options.legend.labelFormatter,plf=options.series.pie.label.formatter;text=lf?lf(slice.label,slice):slice.label,plf&&(text=plf(text,slice));var halfAngle=(startAngle+slice.angle+startAngle)/2,x=centerLeft+Math.round(Math.cos(halfAngle)*radius),y=centerTop+Math.round(Math.sin(halfAngle)*radius)*options.series.pie.tilt,html="<span class='pieLabel' id='pieLabel"+index+"' style='position:absolute;top:"+y+"px;left:"+x+"px;'>"+text+"</span>";target.append(html);var label=target.children("#pieLabel"+index),labelTop=y-label.height()/2,labelLeft=x-label.width()/2;if(label.css("top",labelTop),label.css("left",labelLeft),0-labelTop>0||0-labelLeft>0||canvasHeight-(labelTop+label.height())<0||canvasWidth-(labelLeft+label.width())<0)return!1;if(0!=options.series.pie.label.background.opacity){var c=options.series.pie.label.background.color;null==c&&(c=slice.color);var pos="top:"+labelTop+"px;left:"+labelLeft+"px;";$("<div class='pieLabelBackground' style='position:absolute;width:"+label.width()+"px;height:"+label.height()+"px;"+pos+"background-color:"+c+";'></div>").css("opacity",options.series.pie.label.background.opacity).insertBefore(label)}return!0}}();function drawSlice(angle,color,fill){angle<=0||isNaN(angle)||(fill?ctx.fillStyle=color:(ctx.strokeStyle=color,ctx.lineJoin="round"),ctx.beginPath(),Math.abs(angle-2*Math.PI)>1e-9&&ctx.moveTo(0,0),ctx.arc(0,0,radius,currentAngle,currentAngle+angle/2,!1),ctx.arc(0,0,radius,currentAngle+angle/2,currentAngle+angle,!1),ctx.closePath(),currentAngle+=angle,fill?ctx.fill():ctx.stroke())}}}function drawDonutHole(layer){if(options.series.pie.innerRadius>0){layer.save();var innerRadius=options.series.pie.innerRadius>1?options.series.pie.innerRadius:maxRadius*options.series.pie.innerRadius;layer.globalCompositeOperation="destination-out",layer.beginPath(),layer.fillStyle=options.series.pie.stroke.color,layer.arc(0,0,innerRadius,0,2*Math.PI,!1),layer.fill(),layer.closePath(),layer.restore(),layer.save(),layer.beginPath(),layer.strokeStyle=options.series.pie.stroke.color,layer.arc(0,0,innerRadius,0,2*Math.PI,!1),layer.stroke(),layer.closePath(),layer.restore()}}function isPointInPoly(poly,pt){for(var c=!1,i=-1,l=poly.length,j=l-1;++i<l;j=i)(poly[i][1]<=pt[1]&&pt[1]<poly[j][1]||poly[j][1]<=pt[1]&&pt[1]<poly[i][1])&&pt[0]<(poly[j][0]-poly[i][0])*(pt[1]-poly[i][1])/(poly[j][1]-poly[i][1])+poly[i][0]&&(c=!c);return c}function onMouseMove(e){triggerClickHoverEvent("plothover",e)}function onClick(e){triggerClickHoverEvent("plotclick",e)}function triggerClickHoverEvent(eventname,e){var offset=plot.offset(),item=function(mouseX,mouseY){for(var x,y,slices=plot.getData(),options=plot.getOptions(),radius=options.series.pie.radius>1?options.series.pie.radius:maxRadius*options.series.pie.radius,i=0;i<slices.length;++i){var s=slices[i];if(s.pie.show){if(ctx.save(),ctx.beginPath(),ctx.moveTo(0,0),ctx.arc(0,0,radius,s.startAngle,s.startAngle+s.angle/2,!1),ctx.arc(0,0,radius,s.startAngle+s.angle/2,s.startAngle+s.angle,!1),ctx.closePath(),x=mouseX-centerLeft,y=mouseY-centerTop,ctx.isPointInPath){if(ctx.isPointInPath(mouseX-centerLeft,mouseY-centerTop))return ctx.restore(),{datapoint:[s.percent,s.data],dataIndex:0,series:s,seriesIndex:i}}else if(isPointInPoly([[0,0],[radius*Math.cos(s.startAngle),radius*Math.sin(s.startAngle)],[radius*Math.cos(s.startAngle+s.angle/4),radius*Math.sin(s.startAngle+s.angle/4)],[radius*Math.cos(s.startAngle+s.angle/2),radius*Math.sin(s.startAngle+s.angle/2)],[radius*Math.cos(s.startAngle+s.angle/1.5),radius*Math.sin(s.startAngle+s.angle/1.5)],[radius*Math.cos(s.startAngle+s.angle),radius*Math.sin(s.startAngle+s.angle)]],[x,y]))return ctx.restore(),{datapoint:[s.percent,s.data],dataIndex:0,series:s,seriesIndex:i};ctx.restore()}}return null}(parseInt(e.pageX-offset.left),parseInt(e.pageY-offset.top));if(options.grid.autoHighlight)for(var i=0;i<highlights.length;++i){var h=highlights[i];h.auto!=eventname||item&&h.series==item.series||unhighlight(h.series)}item&&function(s,auto){var i=indexOfHighlight(s);-1==i?(highlights.push({series:s,auto:auto}),plot.triggerRedrawOverlay()):auto||(highlights[i].auto=!1)}(item.series,eventname);var pos={pageX:e.pageX,pageY:e.pageY};target.trigger(eventname,[pos,item])}function unhighlight(s){null==s&&(highlights=[],plot.triggerRedrawOverlay());var i=indexOfHighlight(s);-1!=i&&(highlights.splice(i,1),plot.triggerRedrawOverlay())}function indexOfHighlight(s){for(var i=0;i<highlights.length;++i){if(highlights[i].series==s)return i}return-1}plot.hooks.processOptions.push((function(plot,options){options.series.pie.show&&(options.grid.show=!1,"auto"==options.series.pie.label.show&&(options.legend.show?options.series.pie.label.show=!1:options.series.pie.label.show=!0),"auto"==options.series.pie.radius&&(options.series.pie.label.show?options.series.pie.radius=3/4:options.series.pie.radius=1),options.series.pie.tilt>1?options.series.pie.tilt=1:options.series.pie.tilt<0&&(options.series.pie.tilt=0))})),plot.hooks.bindEvents.push((function(plot,eventHolder){var options=plot.getOptions();options.series.pie.show&&(options.grid.hoverable&&eventHolder.unbind("mousemove").mousemove(onMouseMove),options.grid.clickable&&eventHolder.unbind("click").click(onClick))})),plot.hooks.processDatapoints.push((function(plot,series,data,datapoints){plot.getOptions().series.pie.show&&processDatapoints(plot,series,data)})),plot.hooks.drawOverlay.push((function(plot,octx){plot.getOptions().series.pie.show&&function(plot,octx){var options=plot.getOptions(),radius=options.series.pie.radius>1?options.series.pie.radius:maxRadius*options.series.pie.radius;octx.save(),octx.translate(centerLeft,centerTop),octx.scale(1,options.series.pie.tilt);for(var i=0;i<highlights.length;++i)drawHighlight(highlights[i].series);function drawHighlight(series){series.angle<=0||isNaN(series.angle)||(octx.fillStyle="rgba(255, 255, 255, "+options.series.pie.highlight.opacity+")",octx.beginPath(),Math.abs(series.angle-2*Math.PI)>1e-9&&octx.moveTo(0,0),octx.arc(0,0,radius,series.startAngle,series.startAngle+series.angle/2,!1),octx.arc(0,0,radius,series.startAngle+series.angle/2,series.startAngle+series.angle,!1),octx.closePath(),octx.fill())}drawDonutHole(octx),octx.restore()}(plot,octx)})),plot.hooks.draw.push((function(plot,newCtx){plot.getOptions().series.pie.show&&draw(plot,newCtx)}))},options:options,name:"pie",version:"1.1"})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvZmxvdC9qcXVlcnkuZmxvdC5waWUuanMiXSwibmFtZXMiOlsiJCIsIm9wdGlvbnMiLCJzZXJpZXMiLCJwaWUiLCJzaG93IiwicmFkaXVzIiwiaW5uZXJSYWRpdXMiLCJzdGFydEFuZ2xlIiwidGlsdCIsInNoYWRvdyIsImxlZnQiLCJ0b3AiLCJhbHBoYSIsIm9mZnNldCIsInN0cm9rZSIsImNvbG9yIiwid2lkdGgiLCJsYWJlbCIsImZvcm1hdHRlciIsInNsaWNlIiwiTWF0aCIsInJvdW5kIiwicGVyY2VudCIsImJhY2tncm91bmQiLCJvcGFjaXR5IiwidGhyZXNob2xkIiwiY29tYmluZSIsImhpZ2hsaWdodCIsInBsb3QiLCJwbHVnaW5zIiwicHVzaCIsImluaXQiLCJjYW52YXMiLCJ0YXJnZXQiLCJtYXhSYWRpdXMiLCJjZW50ZXJMZWZ0IiwiY2VudGVyVG9wIiwicHJvY2Vzc2VkIiwiY3R4IiwiaGlnaGxpZ2h0cyIsInByb2Nlc3NEYXRhcG9pbnRzIiwiZGF0YXBvaW50cyIsImdldENhbnZhcyIsInBhcmVudCIsImdldE9wdGlvbnMiLCJzZXREYXRhIiwiZGF0YSIsInRvdGFsIiwiY29tYmluZWQiLCJudW1Db21iaW5lZCIsIm5ld2RhdGEiLCJpIiwibGVuZ3RoIiwidmFsdWUiLCJpc0FycmF5IiwiaXNOYU4iLCJwYXJzZUZsb2F0IiwiaXNGaW5pdGUiLCJleHRlbmQiLCJhbmdsZSIsIlBJIiwiZ2V0RGF0YSIsImRyYXciLCJuZXdDdHgiLCJjYW52YXNXaWR0aCIsImdldFBsYWNlaG9sZGVyIiwiY2FudmFzSGVpZ2h0IiwiaGVpZ2h0IiwibGVnZW5kV2lkdGgiLCJjaGlsZHJlbiIsImZpbHRlciIsIm1pbiIsImxlZ2VuZCIsInBvc2l0aW9uIiwibWF0Y2giLCJzbGljZXMiLCJhdHRlbXB0cyIsImNsZWFyIiwiZHJhd1NoYWRvdyIsImRyYXdQaWUiLCJwcmVwZW5kIiwic2V0U2VyaWVzIiwiaW5zZXJ0TGVnZW5kIiwiY2xlYXJSZWN0IiwicmVtb3ZlIiwic2hhZG93TGVmdCIsInNoYWRvd1RvcCIsInNhdmUiLCJ0cmFuc2xhdGUiLCJnbG9iYWxBbHBoYSIsImZpbGxTdHlsZSIsInNjYWxlIiwiYmVnaW5QYXRoIiwiYXJjIiwiZmlsbCIsInJlc3RvcmUiLCJjdXJyZW50QW5nbGUiLCJkcmF3U2xpY2UiLCJsaW5lV2lkdGgiLCJkcmF3RG9udXRIb2xlIiwiZHJhd0xhYmVsIiwiaW5kZXgiLCJ0ZXh0IiwibGYiLCJsYWJlbEZvcm1hdHRlciIsInBsZiIsImhhbGZBbmdsZSIsIngiLCJjb3MiLCJ5Iiwic2luIiwiaHRtbCIsImFwcGVuZCIsImxhYmVsVG9wIiwibGFiZWxMZWZ0IiwiY3NzIiwiYyIsInBvcyIsImluc2VydEJlZm9yZSIsImRyYXdMYWJlbHMiLCJzdHJva2VTdHlsZSIsImxpbmVKb2luIiwiYWJzIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGF5ZXIiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJpc1BvaW50SW5Qb2x5IiwicG9seSIsInB0IiwibCIsImoiLCJvbk1vdXNlTW92ZSIsImUiLCJ0cmlnZ2VyQ2xpY2tIb3ZlckV2ZW50Iiwib25DbGljayIsImV2ZW50bmFtZSIsIml0ZW0iLCJtb3VzZVgiLCJtb3VzZVkiLCJzIiwiaXNQb2ludEluUGF0aCIsImRhdGFwb2ludCIsImRhdGFJbmRleCIsInNlcmllc0luZGV4IiwiZmluZE5lYXJieVNsaWNlIiwicGFyc2VJbnQiLCJwYWdlWCIsInBhZ2VZIiwiZ3JpZCIsImF1dG9IaWdobGlnaHQiLCJoIiwiYXV0byIsInVuaGlnaGxpZ2h0IiwiaW5kZXhPZkhpZ2hsaWdodCIsInRyaWdnZXJSZWRyYXdPdmVybGF5IiwidHJpZ2dlciIsInNwbGljZSIsImhvb2tzIiwicHJvY2Vzc09wdGlvbnMiLCJiaW5kRXZlbnRzIiwiZXZlbnRIb2xkZXIiLCJob3ZlcmFibGUiLCJ1bmJpbmQiLCJtb3VzZW1vdmUiLCJjbGlja2FibGUiLCJjbGljayIsImRyYXdPdmVybGF5Iiwib2N0eCIsImRy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QU9LLFdBQVlMLE9BQU9LLFdBQWFMLE9BQU95RCxNQUFRLEdBQUcsR0FDaEY2RyxLQUFLM0UsSUFBSSxFQUFHLEVBQUd4RixPQUFRSCxPQUFPSyxXQUFhTCxPQUFPeUQsTUFBUSxFQUFHekQsT0FBT0ssV0FBYUwsT0FBT3lELE9BQU8sR0FDL0Y2RyxLQUFLNUMsWUFDTDRDLEtBQUsxRSxRQW5CTkssY0FBY3FFLE1BRWRBLEtBQUt6RSxVQXpsQkp3RSxDQUFZM0ksS0FBTTRJLFNBSXBCNUksS0FBS2tJLE1BQU1oRyxLQUFLaEMsTUFBSyxTQUFTRixLQUFNbUMsUUFDckJuQyxLQUFLZ0IsYUFDUDFDLE9BQU9DLElBQUlDLE1BQ3RCMEQsS0FBS2xDLEtBQU1tQyxZQTBwQmI5RCxRQUFTQSxRQUNUeUssS0FBTSxNQUNOQyxRQUFTLFFBdnZCWCxDQTB2QkdDIiwiZmlsZSI6InBsdWdpbnMvZmxvdC9qcXVlcnkuZmxvdC5waWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBGbG90IHBsdWdpbiBmb3IgcmVuZGVyaW5nIHBpZSBjaGFydHMuXG5cbkNvcHlyaWdodCAoYykgMjAwNy0yMDE0IElPTEEgYW5kIE9sZSBMYXVyc2VuLlxuTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG5UaGUgcGx1Z2luIGFzc3VtZXMgdGhhdCBlYWNoIHNlcmllcyBoYXMgYSBzaW5nbGUgZGF0YSB2YWx1ZSwgYW5kIHRoYXQgZWFjaFxudmFsdWUgaXMgYSBwb3NpdGl2ZSBpbnRlZ2VyIG9yIHplcm8uICBOZWdhdGl2ZSBudW1iZXJzIGRvbid0IG1ha2Ugc2Vuc2UgZm9yIGFcbnBpZSBjaGFydCwgYW5kIGhhdmUgdW5wcmVkaWN0YWJsZSByZXN1bHRzLiAgVGhlIHZhbHVlcyBkbyBOT1QgbmVlZCB0byBiZVxucGFzc2VkIGluIGFzIHBlcmNlbnRhZ2VzOyB0aGUgcGx1Z2luIHdpbGwgY2FsY3VsYXRlIHRoZSB0b3RhbCBhbmQgcGVyLXNsaWNlXG5wZXJjZW50YWdlcyBpbnRlcm5hbGx5LlxuXG4qIENyZWF0ZWQgYnkgQnJpYW4gTWVkZW5kb3JwXG5cbiogVXBkYXRlZCB3aXRoIGNvbnRyaWJ1dGlvbnMgZnJvbSBidGJ1cm5ldHQzLCBBbnRob255IEFyYWd1ZXMgYW5kIFhhdmkgSXZhcnNcblxuVGhlIHBsdWdpbiBzdXBwb3J0cyB0aGVzZSBvcHRpb25zOlxuXG5cdHNlcmllczoge1xuXHRcdHBpZToge1xuXHRcdFx0c2hvdzogdHJ1ZS9mYWxzZVxuXHRcdFx0cmFkaXVzOiAwLTEgZm9yIHBlcmNlbnRhZ2Ugb2YgZnVsbHNpemUsIG9yIGEgc3BlY2lmaWVkIHBpeGVsIGxlbmd0aCwgb3IgJ2F1dG8nXG5cdFx0XHRpbm5lclJhZGl1czogMC0xIGZvciBwZXJjZW50YWdlIG9mIGZ1bGxzaXplIG9yIGEgc3BlY2lmaWVkIHBpeGVsIGxlbmd0aCwgZm9yIGNyZWF0aW5nIGEgZG9udXQgZWZmZWN0XG5cdFx0XHRzdGFydEFuZ2xlOiAwLTIgZmFjdG9yIG9mIFBJIHVzZWQgZm9yIHN0YXJ0aW5nIGFuZ2xlIChpbiByYWRpYW5zKSBpLmUgMy8yIHN0YXJ0cyBhdCB0aGUgdG9wLCAwIGFuZCAyIGhhdmUgdGhlIHNhbWUgcmVzdWx0XG5cdFx0XHR0aWx0OiAwLTEgZm9yIHBlcmNlbnRhZ2UgdG8gdGlsdCB0aGUgcGllLCB3aGVyZSAxIGlzIG5vIHRpbHQsIGFuZCAwIGlzIGNvbXBsZXRlbHkgZmxhdCAobm90aGluZyB3aWxsIHNob3cpXG5cdFx0XHRvZmZzZXQ6IHtcblx0XHRcdFx0dG9wOiBpbnRlZ2VyIHZhbHVlIHRvIG1vdmUgdGhlIHBpZSB1cCBvciBkb3duXG5cdFx0XHRcdGxlZnQ6IGludGVnZXIgdmFsdWUgdG8gbW92ZSB0aGUgcGllIGxlZnQgb3IgcmlnaHQsIG9yICdhdXRvJ1xuXHRcdFx0fSxcblx0XHRcdHN0cm9rZToge1xuXHRcdFx0XHRjb2xvcjogYW55IGhleGlkZWNpbWFsIGNvbG9yIHZhbHVlIChvdGhlciBmb3JtYXRzIG1heSBvciBtYXkgbm90IHdvcmssIHNvIGJlc3QgdG8gc3RpY2sgd2l0aCBzb21ldGhpbmcgbGlrZSAnI0ZGRicpXG5cdFx0XHRcdHdpZHRoOiBpbnRlZ2VyIHBpeGVsIHdpZHRoIG9mIHRoZSBzdHJva2Vcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDoge1xuXHRcdFx0XHRzaG93OiB0cnVlL2ZhbHNlLCBvciAnYXV0bydcblx0XHRcdFx0Zm9ybWF0dGVyOiAgYSB1c2VyLWRlZmluZWQgZnVuY3Rpb24gdGhhdCBtb2RpZmllcyB0aGUgdGV4dC9zdHlsZSBvZiB0aGUgbGFiZWwgdGV4dFxuXHRcdFx0XHRyYWRpdXM6IDAtMSBmb3IgcGVyY2VudGFnZSBvZiBmdWxsc2l6ZSwgb3IgYSBzcGVjaWZpZWQgcGl4ZWwgbGVuZ3RoXG5cdFx0XHRcdGJhY2tncm91bmQ6IHtcblx0XHRcdFx0XHRjb2xvcjogYW55IGhleGlkZWNpbWFsIGNvbG9yIHZhbHVlIChvdGhlciBmb3JtYXRzIG1heSBvciBtYXkgbm90IHdvcmssIHNvIGJlc3QgdG8gc3RpY2sgd2l0aCBzb21ldGhpbmcgbGlrZSAnIzAwMCcpXG5cdFx0XHRcdFx0b3BhY2l0eTogMC0xXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRocmVzaG9sZDogMC0xIGZvciB0aGUgcGVyY2VudGFnZSB2YWx1ZSBhdCB3aGljaCB0byBoaWRlIGxhYmVscyAoaWYgdGhleSdyZSB0b28gc21hbGwpXG5cdFx0XHR9LFxuXHRcdFx0Y29tYmluZToge1xuXHRcdFx0XHR0aHJlc2hvbGQ6IDAtMSBmb3IgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgYXQgd2hpY2ggdG8gY29tYmluZSBzbGljZXMgKGlmIHRoZXkncmUgdG9vIHNtYWxsKVxuXHRcdFx0XHRjb2xvcjogYW55IGhleGlkZWNpbWFsIGNvbG9yIHZhbHVlIChvdGhlciBmb3JtYXRzIG1heSBvciBtYXkgbm90IHdvcmssIHNvIGJlc3QgdG8gc3RpY2sgd2l0aCBzb21ldGhpbmcgbGlrZSAnI0NDQycpLCBpZiBudWxsLCB0aGUgcGx1Z2luIHdpbGwgYXV0b21hdGljYWxseSB1c2UgdGhlIGNvbG9yIG9mIHRoZSBmaXJzdCBzbGljZSB0byBiZSBjb21iaW5lZFxuXHRcdFx0XHRsYWJlbDogYW55IHRleHQgdmFsdWUgb2Ygd2hhdCB0aGUgY29tYmluZWQgc2xpY2Ugc2hvdWxkIGJlIGxhYmVsZWRcblx0XHRcdH1cblx0XHRcdGhpZ2hsaWdodDoge1xuXHRcdFx0XHRvcGFjaXR5OiAwLTFcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuTW9yZSBkZXRhaWwgYW5kIHNwZWNpZmljIGV4YW1wbGVzIGNhbiBiZSBmb3VuZCBpbiB0aGUgaW5jbHVkZWQgSFRNTCBmaWxlLlxuXG4qL1xuXG4oZnVuY3Rpb24oJCkge1xuXG5cdC8vIE1heGltdW0gcmVkcmF3IGF0dGVtcHRzIHdoZW4gZml0dGluZyBsYWJlbHMgd2l0aGluIHRoZSBwbG90XG5cblx0dmFyIFJFRFJBV19BVFRFTVBUUyA9IDEwO1xuXG5cdC8vIEZhY3RvciBieSB3aGljaCB0byBzaHJpbmsgdGhlIHBpZSB3aGVuIGZpdHRpbmcgbGFiZWxzIHdpdGhpbiB0aGUgcGxvdFxuXG5cdHZhciBSRURSQVdfU0hSSU5LID0gMC45NTtcblxuXHRmdW5jdGlvbiBpbml0KHBsb3QpIHtcblxuXHRcdHZhciBjYW52YXMgPSBudWxsLFxuXHRcdFx0dGFyZ2V0ID0gbnVsbCxcblx0XHRcdG9wdGlvbnMgPSBudWxsLFxuXHRcdFx0bWF4UmFkaXVzID0gbnVsbCxcblx0XHRcdGNlbnRlckxlZnQgPSBudWxsLFxuXHRcdFx0Y2VudGVyVG9wID0gbnVsbCxcblx0XHRcdHByb2Nlc3NlZCA9IGZhbHNlLFxuXHRcdFx0Y3R4ID0gbnVsbDtcblxuXHRcdC8vIGludGVyYWN0aXZlIHZhcmlhYmxlc1xuXG5cdFx0dmFyIGhpZ2hsaWdodHMgPSBbXTtcblxuXHRcdC8vIGFkZCBob29rIHRvIGRldGVybWluZSBpZiBwaWUgcGx1Z2luIGluIGVuYWJsZWQsIGFuZCB0aGVuIHBlcmZvcm0gbmVjZXNzYXJ5IG9wZXJhdGlvbnNcblxuXHRcdHBsb3QuaG9va3MucHJvY2Vzc09wdGlvbnMucHVzaChmdW5jdGlvbihwbG90LCBvcHRpb25zKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5zZXJpZXMucGllLnNob3cpIHtcblxuXHRcdFx0XHRvcHRpb25zLmdyaWQuc2hvdyA9IGZhbHNlO1xuXG5cdFx0XHRcdC8vIHNldCBsYWJlbHMuc2hvd1xuXG5cdFx0XHRcdGlmIChvcHRpb25zLnNlcmllcy5waWUubGFiZWwuc2hvdyA9PSBcImF1dG9cIikge1xuXHRcdFx0XHRcdGlmIChvcHRpb25zLmxlZ2VuZC5zaG93KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25zLnNlcmllcy5waWUubGFiZWwuc2hvdyA9IGZhbHNlO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvcHRpb25zLnNlcmllcy5waWUubGFiZWwuc2hvdyA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gc2V0IHJhZGl1c1xuXG5cdFx0XHRcdGlmIChvcHRpb25zLnNlcmllcy5waWUucmFkaXVzID09IFwiYXV0b1wiKSB7XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMuc2VyaWVzLnBpZS5sYWJlbC5zaG93KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25zLnNlcmllcy5waWUucmFkaXVzID0gMy80O1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvcHRpb25zLnNlcmllcy5waWUucmFkaXVzID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBlbnN1cmUgc2FuZSB0aWx0XG5cblx0XHRcdFx0aWYgKG9wdGlvbnMuc2VyaWVzLnBpZS50aWx0ID4gMSkge1xuXHRcdFx0XHRcdG9wdGlvbnMuc2VyaWVzLnBpZS50aWx0ID0gMTtcblx0XHRcdFx0fSBlbHNlIGlmIChvcHRpb25zLnNlcmllcy5waWUudGlsdCA8IDApIHtcblx0XHRcdFx0XHRvcHRpb25zLnNlcmllcy5waWUudGlsdCA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHBsb3QuaG9va3MuYmluZEV2ZW50cy5wdXNoKGZ1bmN0aW9uKHBsb3QsIGV2ZW50SG9sZGVyKSB7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IHBsb3QuZ2V0T3B0aW9ucygpO1xuXHRcdFx0aWYgKG9wdGlvbnMuc2VyaWVzLnBpZS5zaG93KSB7XG5cdFx0XHRcdGlmIChvcHRpb25zLmdyaWQuaG92ZXJhYmxlKSB7XG5cdFx0XHRcdFx0ZXZlbnRIb2xkZXIudW5iaW5kKFwibW91c2Vtb3ZlXCIpLm1vdXNlbW92ZShvbk1vdXNlTW92ZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKG9wdGlvbnMuZ3JpZC5jbGlja2FibGUpIHtcblx0XHRcdFx0XHRldmVudEhvbGRlci51bmJpbmQoXCJjbGlja1wiKS5jbGljayhvbkNsaWNrKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cGxvdC5ob29rcy5wcm9jZXNzRGF0YXBvaW50cy5wdXNoKGZ1bmN0aW9uKHBsb3QsIHNlcmllcywgZGF0YSwgZGF0YXBvaW50cykge1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBwbG90LmdldE9wdGlvbnMoKTtcblx0XHRcdGlmIChvcHRpb25zLnNlcmllcy5waWUuc2hvdykge1xuXHRcdFx0XHRwcm9jZXNzRGF0YXBvaW50cyhwbG90LCBzZXJpZXMsIGRhdGEsIGRhdGFwb2ludHMpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cGxvdC5ob29rcy5kcmF3T3ZlcmxheS5wdXNoKGZ1bmN0aW9uKHBsb3QsIG9jdHgpIHtcblx0XHRcdHZhciBvcHRpb25zID0gcGxvdC5nZXRPcHRpb25zKCk7XG5cdFx0XHRpZiAob3B0aW9ucy5zZXJpZXMucGllLnNob3cpIHtcblx0XHRcdFx0ZHJhd092ZXJsYXkocGxvdCwgb2N0eCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRwbG90Lmhvb2tzLmRyYXcucHVzaChmdW5jdGlvbihwbG90LCBuZXdDdHgpIHtcblx0XHRcdHZhciBvcHRpb25zID0gcGxvdC5nZXRPcHRpb25zKCk7XG5cdFx0XHRpZiAob3B0aW9ucy5zZXJpZXMucGllLnNob3cpIHtcblx0XHRcdFx0ZHJhdyhwbG90LCBuZXdDdHgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0ZnVuY3Rpb24gcHJvY2Vzc0RhdGFwb2ludHMocGxvdCwgc2VyaWVzLCBkYXRhcG9pbnRzKSB7XG5cdFx0XHRpZiAoIXByb2Nlc3NlZClcdHtcblx0XHRcdFx0cHJvY2Vzc2VkID0gdHJ1ZTtcblx0XHRcdFx0Y2FudmFzID0gcGxvdC5nZXRDYW52YXMoKTtcblx0XHRcdFx0dGFyZ2V0ID0gJChjYW52YXMpLnBhcmVudCgpO1xuXHRcdFx0XHRvcHRpb25zID0gcGxvdC5nZXRPcHRpb25zKCk7XG5cdFx0XHRcdHBsb3Quc2V0RGF0YShjb21iaW5lKHBsb3QuZ2V0RGF0YSgpKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gY29tYmluZShkYXRhKSB7XG5cblx0XHRcdHZhciB0b3RhbCA9IDAsXG5cdFx0XHRcdGNvbWJpbmVkID0gMCxcblx0XHRcdFx0bnVtQ29tYmluZWQgPSAwLFxuXHRcdFx0XHRjb2xvciA9IG9wdGlvbnMuc2VyaWVzLnBpZS5jb21iaW5lLmNvbG9yLFxuXHRcdFx0XHRuZXdkYXRhID0gW107XG5cblx0XHRcdC8vIEZpeCB1cCB0aGUgcmF3IGRhdGEgZnJvbSBGbG90LCBlbnN1cmluZyB0aGUgZGF0YSBpcyBudW1lcmljXG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuXG5cdFx0XHRcdHZhciB2YWx1ZSA9IGRhdGFbaV0uZGF0YTtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZGF0YSBpcyBhbiBhcnJheSwgd2UnbGwgYXNzdW1lIHRoYXQgaXQncyBhIHN0YW5kYXJkXG5cdFx0XHRcdC8vIEZsb3QgeC15IHBhaXIsIGFuZCBhcmUgY29uY2VybmVkIG9ubHkgd2l0aCB0aGUgc2Vjb25kIHZhbHVlLlxuXG5cdFx0XHRcdC8vIE5vdGUgaG93IHdlIHVzZSB0aGUgb3JpZ2luYWwgYXJyYXksIHJhdGhlciB0aGFuIGNyZWF0aW5nIGFcblx0XHRcdFx0Ly8gbmV3IG9uZTsgdGhpcyBpcyBtb3JlIGVmZmljaWVudCBhbmQgcHJlc2VydmVzIGFueSBleHRyYSBkYXRhXG5cdFx0XHRcdC8vIHRoYXQgdGhlIHVzZXIgbWF5IGhhdmUgc3RvcmVkIGluIGhpZ2hlciBpbmRleGVzLlxuXG5cdFx0XHRcdGlmICgkLmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PSAxKSB7XG4gICAgXHRcdFx0XHR2YWx1ZSA9IHZhbHVlWzBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCQuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0XHQvLyBFcXVpdmFsZW50IHRvICQuaXNOdW1lcmljKCkgYnV0IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkgPCAxLjdcblx0XHRcdFx0XHRpZiAoIWlzTmFOKHBhcnNlRmxvYXQodmFsdWVbMV0pKSAmJiBpc0Zpbml0ZSh2YWx1ZVsxXSkpIHtcblx0XHRcdFx0XHRcdHZhbHVlWzFdID0gK3ZhbHVlWzFdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2YWx1ZVsxXSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKCFpc05hTihwYXJzZUZsb2F0KHZhbHVlKSkgJiYgaXNGaW5pdGUodmFsdWUpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBbMSwgK3ZhbHVlXTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IFsxLCAwXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRhdGFbaV0uZGF0YSA9IFt2YWx1ZV07XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1bSB1cCBhbGwgdGhlIHNsaWNlcywgc28gd2UgY2FuIGNhbGN1bGF0ZSBwZXJjZW50YWdlcyBmb3IgZWFjaFxuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dG90YWwgKz0gZGF0YVtpXS5kYXRhWzBdWzFdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb3VudCB0aGUgbnVtYmVyIG9mIHNsaWNlcyB3aXRoIHBlcmNlbnRhZ2VzIGJlbG93IHRoZSBjb21iaW5lXG5cdFx0XHQvLyB0aHJlc2hvbGQ7IGlmIGl0IHR1cm5zIG91dCB0byBiZSBqdXN0IG9uZSwgd2Ugd29uJ3QgY29tYmluZS5cblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSA9IGRhdGFbaV0uZGF0YVswXVsxXTtcblx0XHRcdFx0aWYgKHZhbHVlIC8gdG90YWwgPD0gb3B0aW9ucy5zZXJpZXMucGllLmNvbWJpbmUudGhyZXNob2xkKSB7XG5cdFx0XHRcdFx0Y29tYmluZWQgKz0gdmFsdWU7XG5cdFx0XHRcdFx0bnVtQ29tYmluZWQrKztcblx0XHRcdFx0XHRpZiAoIWNvbG9yKSB7XG5cdFx0XHRcdFx0XHRjb2xvciA9IGRhdGFbaV0uY29sb3I7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgdmFsdWUgPSBkYXRhW2ldLmRhdGFbMF1bMV07XG5cdFx0XHRcdGlmIChudW1Db21iaW5lZCA8IDIgfHwgdmFsdWUgLyB0b3RhbCA+IG9wdGlvbnMuc2VyaWVzLnBpZS5jb21iaW5lLnRocmVzaG9sZCkge1xuXHRcdFx0XHRcdG5ld2RhdGEucHVzaChcblx0XHRcdFx0XHRcdCQuZXh0ZW5kKGRhdGFbaV0sIHsgICAgIC8qIGV4dGVuZCB0byBhbGxvdyBrZWVwaW5nIGFsbCBvdGhlciBvcmlnaW5hbCBkYXRhIHZhbHVlc1xuXHRcdFx0XHRcdFx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHVzaW5nIHRoZW0gZS5nLiBpbiBsYWJlbEZvcm1hdHRlci4gKi9cblx0XHRcdFx0XHRcdFx0ZGF0YTogW1sxLCB2YWx1ZV1dLFxuXHRcdFx0XHRcdFx0XHRjb2xvcjogZGF0YVtpXS5jb2xvcixcblx0XHRcdFx0XHRcdFx0bGFiZWw6IGRhdGFbaV0ubGFiZWwsXG5cdFx0XHRcdFx0XHRcdGFuZ2xlOiB2YWx1ZSAqIE1hdGguUEkgKiAyIC8gdG90YWwsXG5cdFx0XHRcdFx0XHRcdHBlcmNlbnQ6IHZhbHVlIC8gKHRvdGFsIC8gMTAwKVxuXHRcdFx0XHRcdFx0fSlcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChudW1Db21iaW5lZCA+IDEpIHtcblx0XHRcdFx0bmV3ZGF0YS5wdXNoKHtcblx0XHRcdFx0XHRkYXRhOiBbWzEsIGNvbWJpbmVkXV0sXG5cdFx0XHRcdFx0Y29sb3I6IGNvbG9yLFxuXHRcdFx0XHRcdGxhYmVsOiBvcHRpb25zLnNlcmllcy5waWUuY29tYmluZS5sYWJlbCxcblx0XHRcdFx0XHRhbmdsZTogY29tYmluZWQgKiBNYXRoLlBJICogMiAvIHRvdGFsLFxuXHRcdFx0XHRcdHBlcmNlbnQ6IGNvbWJpbmVkIC8gKHRvdGFsIC8gMTAwKVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG5ld2RhdGE7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZHJhdyhwbG90LCBuZXdDdHgpIHtcblxuXHRcdFx0aWYgKCF0YXJnZXQpIHtcblx0XHRcdFx0cmV0dXJuOyAvLyBpZiBubyBzZXJpZXMgd2VyZSBwYXNzZWRcblx0XHRcdH1cblxuXHRcdFx0dmFyIGNhbnZhc1dpZHRoID0gcGxvdC5nZXRQbGFjZWhvbGRlcigpLndpZHRoKCksXG5cdFx0XHRcdGNhbnZhc0hlaWdodCA9IHBsb3QuZ2V0UGxhY2Vob2xkZXIoKS5oZWlnaHQoKSxcblx0XHRcdFx0bGVnZW5kV2lkdGggPSB0YXJnZXQuY2hpbGRyZW4oKS5maWx0ZXIoXCIubGVnZW5kXCIpLmNoaWxkcmVuKCkud2lkdGgoKSB8fCAwO1xuXG5cdFx0XHRjdHggPSBuZXdDdHg7XG5cblx0XHRcdC8vIFdBUk5JTkc6IEhBQ0shIFJFV1JJVEUgVEhJUyBDT0RFIEFTIFNPT04gQVMgUE9TU0lCTEUhXG5cblx0XHRcdC8vIFdoZW4gY29tYmluaW5nIHNtYWxsZXIgc2xpY2VzIGludG8gYW4gJ290aGVyJyBzbGljZSwgd2UgbmVlZCB0b1xuXHRcdFx0Ly8gYWRkIGEgbmV3IHNlcmllcy4gIFNpbmNlIEZsb3QgZ2l2ZXMgcGx1Z2lucyBubyB3YXkgdG8gbW9kaWZ5IHRoZVxuXHRcdFx0Ly8gbGlzdCBvZiBzZXJpZXMsIHRoZSBwaWUgcGx1Z2luIHVzZXMgYSBoYWNrIHdoZXJlIHRoZSBmaXJzdCBjYWxsXG5cdFx0XHQvLyB0byBwcm9jZXNzRGF0YXBvaW50cyByZXN1bHRzIGluIGEgY2FsbCB0byBzZXREYXRhIHdpdGggdGhlIG5ld1xuXHRcdFx0Ly8gbGlzdCBvZiBzZXJpZXMsIHRoZW4gc3Vic2VxdWVudCBwcm9jZXNzRGF0YXBvaW50cyBkbyBub3RoaW5nLlxuXG5cdFx0XHQvLyBUaGUgcGx1Z2luLWdsb2JhbCAncHJvY2Vzc2VkJyBmbGFnIGlzIHVzZWQgdG8gY29udHJvbCB0aGlzIGhhY2s7XG5cdFx0XHQvLyBpdCBzdGFydHMgb3V0IGZhbHNlLCBhbmQgaXMgc2V0IHRvIHRydWUgYWZ0ZXIgdGhlIGZpcnN0IGNhbGwgdG9cblx0XHRcdC8vIHByb2Nlc3NEYXRhcG9pbnRzLlxuXG5cdFx0XHQvLyBVbmZvcnR1bmF0ZWx5IHRoaXMgdHVybnMgZnV0dXJlIHNldERhdGEgY2FsbHMgaW50byBuby1vcHM7IHRoZXlcblx0XHRcdC8vIGNhbGwgcHJvY2Vzc0RhdGFwb2ludHMsIHRoZSBmbGFnIGlzIHRydWUsIGFuZCBub3RoaW5nIGhhcHBlbnMuXG5cblx0XHRcdC8vIFRvIGZpeCB0aGlzIHdlJ2xsIHNldCB0aGUgZmxhZyBiYWNrIHRvIGZhbHNlIGhlcmUgaW4gZHJhdywgd2hlblxuXHRcdFx0Ly8gYWxsIHNlcmllcyBoYXZlIGJlZW4gcHJvY2Vzc2VkLCBzbyB0aGUgbmV4dCBzZXF1ZW5jZSBvZiBjYWxscyB0b1xuXHRcdFx0Ly8gcHJvY2Vzc0RhdGFwb2ludHMgb25jZSBhZ2FpbiBzdGFydHMgb3V0IHdpdGggYSBzbGljZS1jb21iaW5lLlxuXHRcdFx0Ly8gVGhpcyBpcyByZWFsbHkgYSBoYWNrOyBpbiAwLjkgd2UgbmVlZCB0byBnaXZlIHBsdWdpbnMgYSBwcm9wZXJcblx0XHRcdC8vIHdheSB0byBtb2RpZnkgc2VyaWVzIGJlZm9yZSBhbnkgcHJvY2Vzc2luZyBiZWdpbnMuXG5cblx0XHRcdHByb2Nlc3NlZCA9IGZhbHNlO1xuXG5cdFx0XHQvLyBjYWxjdWxhdGUgbWF4aW11bSByYWRpdXMgYW5kIGNlbnRlciBwb2ludFxuXG5cdFx0XHRtYXhSYWRpdXMgPSAgTWF0aC5taW4oY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCAvIG9wdGlvbnMuc2VyaWVzLnBpZS50aWx0KSAvIDI7XG5cdFx0XHRjZW50ZXJUb3AgPSBjYW52YXNIZWlnaHQgLyAyICsgb3B0aW9ucy5zZXJpZXMucGllLm9mZnNldC50b3A7XG5cdFx0XHRjZW50ZXJMZWZ0ID0gY2FudmFzV2lkdGggLyAyO1xuXG5cdFx0XHRpZiAob3B0aW9ucy5zZXJpZXMucGllLm9mZnNldC5sZWZ0ID09IFwiYXV0b1wiKSB7XG5cdFx0XHRcdGlmIChvcHRpb25zLmxlZ2VuZC5wb3NpdGlvbi5tYXRjaChcIndcIikpIHtcblx0XHRcdFx0XHRjZW50ZXJMZWZ0ICs9IGxlZ2VuZFdpZHRoIC8gMjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjZW50ZXJMZWZ0IC09IGxlZ2VuZFdpZHRoIC8gMjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoY2VudGVyTGVmdCA8IG1heFJhZGl1cykge1xuXHRcdFx0XHRcdGNlbnRlckxlZnQgPSBtYXhSYWRpdXM7XG5cdFx0XHRcdH0gZWxzZSBpZiAoY2VudGVyTGVmdCA+IGNhbnZhc1dpZHRoIC0gbWF4UmFkaXVzKSB7XG5cdFx0XHRcdFx0Y2VudGVyTGVmdCA9IGNhbnZhc1dpZHRoIC0gbWF4UmFkaXVzO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjZW50ZXJMZWZ0ICs9IG9wdGlvbnMuc2VyaWVzLnBpZS5vZmZzZXQubGVmdDtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHNsaWNlcyA9IHBsb3QuZ2V0RGF0YSgpLFxuXHRcdFx0XHRhdHRlbXB0cyA9IDA7XG5cblx0XHRcdC8vIEtlZXAgc2hyaW5raW5nIHRoZSBwaWUncyByYWRpdXMgdW50aWwgZHJhd1BpZSByZXR1cm5zIHRydWUsXG5cdFx0XHQvLyBpbmRpY2F0aW5nIHRoYXQgYWxsIHRoZSBsYWJlbHMgZml0LCBvciB3ZSB0cnkgdG9vIG1hbnkgdGltZXMuXG5cblx0XHRcdGRvIHtcblx0XHRcdFx0aWYgKGF0dGVtcHRzID4gMCkge1xuXHRcdFx0XHRcdG1heFJhZGl1cyAqPSBSRURSQVdfU0hSSU5LO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGF0dGVtcHRzICs9IDE7XG5cdFx0XHRcdGNsZWFyKCk7XG5cdFx0XHRcdGlmIChvcHRpb25zLnNlcmllcy5waWUudGlsdCA8PSAwLjgpIHtcblx0XHRcdFx0XHRkcmF3U2hhZG93KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gd2hpbGUgKCFkcmF3UGllKCkgJiYgYXR0ZW1wdHMgPCBSRURSQVdfQVRURU1QVFMpXG5cblx0XHRcdGlmIChhdHRlbXB0cyA+PSBSRURSQVdfQVRURU1QVFMpIHtcblx0XHRcdFx0Y2xlYXIoKTtcblx0XHRcdFx0dGFyZ2V0LnByZXBlbmQoXCI8ZGl2IGNsYXNzPSdlcnJvcic+Q291bGQgbm90IGRyYXcgcGllIHdpdGggbGFiZWxzIGNvbnRhaW5lZCBpbnNpZGUgY2FudmFzPC9kaXY+XCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocGxvdC5zZXRTZXJpZXMgJiYgcGxvdC5pbnNlcnRMZWdlbmQpIHtcblx0XHRcdFx0cGxvdC5zZXRTZXJpZXMoc2xpY2VzKTtcblx0XHRcdFx0cGxvdC5pbnNlcnRMZWdlbmQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gd2UncmUgYWN0dWFsbHkgZG9uZSBhdCB0aGlzIHBvaW50LCBqdXN0IGRlZmluaW5nIGludGVybmFsIGZ1bmN0aW9ucyBhdCB0aGlzIHBvaW50XG5cblx0XHRcdGZ1bmN0aW9uIGNsZWFyKCkge1xuXHRcdFx0XHRjdHguY2xlYXJSZWN0KDAsIDAsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpO1xuXHRcdFx0XHR0YXJnZXQuY2hpbGRyZW4oKS5maWx0ZXIoXCIucGllTGFiZWwsIC5waWVMYWJlbEJhY2tncm91bmRcIikucmVtb3ZlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGRyYXdTaGFkb3coKSB7XG5cblx0XHRcdFx0dmFyIHNoYWRvd0xlZnQgPSBvcHRpb25zLnNlcmllcy5waWUuc2hhZG93LmxlZnQ7XG5cdFx0XHRcdHZhciBzaGFkb3dUb3AgPSBvcHRpb25zLnNlcmllcy5waWUuc2hhZG93LnRvcDtcblx0XHRcdFx0dmFyIGVkZ2UgPSAxMDtcblx0XHRcdFx0dmFyIGFscGhhID0gb3B0aW9ucy5zZXJpZXMucGllLnNoYWRvdy5hbHBoYTtcblx0XHRcdFx0dmFyIHJhZGl1cyA9IG9wdGlvbnMuc2VyaWVzLnBpZS5yYWRpdXMgPiAxID8gb3B0aW9ucy5zZXJpZXMucGllLnJhZGl1cyA6IG1heFJhZGl1cyAqIG9wdGlvbnMuc2VyaWVzLnBpZS5yYWRpdXM7XG5cblx0XHRcdFx0aWYgKHJhZGl1cyA+PSBjYW52YXNXaWR0aCAvIDIgLSBzaGFkb3dMZWZ0IHx8IHJhZGl1cyAqIG9wdGlvbnMuc2VyaWVzLnBpZS50aWx0ID49IGNhbnZhc0hlaWdodCAvIDIgLSBzaGFkb3dUb3AgfHwgcmFkaXVzIDw9IGVkZ2UpIHtcblx0XHRcdFx0XHRyZXR1cm47XHQvLyBzaGFkb3cgd291bGQgYmUgb3V0c2lkZSBjYW52YXMsIHNvIGRvbid0IGRyYXcgaXRcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRcdGN0eC50cmFuc2xhdGUoc2hhZG93TGVmdCxzaGFkb3dUb3ApO1xuXHRcdFx0XHRjdHguZ2xvYmFsQWxwaGEgPSBhbHBoYTtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IFwiIzAwMFwiO1xuXG5cdFx0XHRcdC8vIGNlbnRlciBhbmQgcm90YXRlIHRvIHN0YXJ0aW5nIHBvc2l0aW9uXG5cblx0XHRcdFx0Y3R4LnRyYW5zbGF0ZShjZW50ZXJMZWZ0LGNlbnRlclRvcCk7XG5cdFx0XHRcdGN0eC5zY2FsZSgxLCBvcHRpb25zLnNlcmllcy5waWUudGlsdCk7XG5cblx0XHRcdFx0Ly9yYWRpdXMgLT0gZWRnZTtcblxuXHRcdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8PSBlZGdlOyBpKyspIHtcblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4LmFyYygwLCAwLCByYWRpdXMsIDAsIE1hdGguUEkgKiAyLCBmYWxzZSk7XG5cdFx0XHRcdFx0Y3R4LmZpbGwoKTtcblx0XHRcdFx0XHRyYWRpdXMgLT0gaTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGN0eC5yZXN0b3JlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGZ1bmN0aW9uIGRyYXdQaWUoKSB7XG5cblx0XHRcdFx0dmFyIHN0YXJ0QW5nbGUgPSBNYXRoLlBJICogb3B0aW9ucy5zZXJpZXMucGllLnN0YXJ0QW5nbGU7XG5cdFx0XHRcdHZhciByYWRpdXMgPSBvcHRpb25zLnNlcmllcy5waWUucmFkaXVzID4gMSA/IG9wdGlvbnMuc2VyaWVzLnBpZS5yYWRpdXMgOiBtYXhSYWRpdXMgKiBvcHRpb25zLnNlcmllcy5waWUucmFkaXVzO1xuXG5cdFx0XHRcdC8vIGNlbnRlciBhbmQgcm90YXRlIHRvIHN0YXJ0aW5nIHBvc2l0aW9uXG5cblx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0Y3R4LnRyYW5zbGF0ZShjZW50ZXJMZWZ0LGNlbnRlclRvcCk7XG5cdFx0XHRcdGN0eC5zY2FsZSgxLCBvcHRpb25zLnNlcmllcy5waWUudGlsdCk7XG5cdFx0XHRcdC8vY3R4LnJvdGF0ZShzdGFydEFuZ2xlKTsgLy8gc3RhcnQgYXQgdG9wOyAtLSBUaGlzIGRvZXNuJ3Qgd29yayBwcm9wZXJseSBpbiBPcGVyYVxuXG5cdFx0XHRcdC8vIGRyYXcgc2xpY2VzXG5cblx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0dmFyIGN1cnJlbnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0c2xpY2VzW2ldLnN0YXJ0QW5nbGUgPSBjdXJyZW50QW5nbGU7XG5cdFx0XHRcdFx0ZHJhd1NsaWNlKHNsaWNlc1tpXS5hbmdsZSwgc2xpY2VzW2ldLmNvbG9yLCB0cnVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXG5cdFx0XHRcdC8vIGRyYXcgc2xpY2Ugb3V0bGluZXNcblxuXHRcdFx0XHRpZiAob3B0aW9ucy5zZXJpZXMucGllLnN0cm9rZS53aWR0aCA+IDApIHtcblx0XHRcdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0XHRcdGN0eC5saW5lV2lkdGggPSBvcHRpb25zLnNlcmllcy5waWUuc3Ryb2tlLndpZHRoO1xuXHRcdFx0XHRcdGN1cnJlbnRBbmdsZSA9IHN0YXJ0QW5nbGU7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0XHRcdGRyYXdTbGljZShzbGljZXNbaV0uYW5nbGUsIG9wdGlvbnMuc2VyaWVzLnBpZS5zdHJva2UuY29sb3IsIGZhbHNlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGRyYXcgZG9udXQgaG9sZVxuXG5cdFx0XHRcdGRyYXdEb251dEhvbGUoY3R4KTtcblxuXHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXG5cdFx0XHRcdC8vIERyYXcgdGhlIGxhYmVscywgcmV0dXJuaW5nIHRydWUgaWYgdGhleSBmaXQgd2l0aGluIHRoZSBwbG90XG5cblx0XHRcdFx0aWYgKG9wdGlvbnMuc2VyaWVzLnBpZS5sYWJlbC5zaG93KSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRyYXdMYWJlbHMoKTtcblx0XHRcdFx0fSBlbHNlIHJldHVybiB0cnVlO1xuXG5cdFx0XHRcdGZ1bmN0aW9uIGRyYXdTbGljZShhbmdsZSwgY29sb3IsIGZpbGwpIHtcblxuXHRcdFx0XHRcdGlmIChhbmdsZSA8PSAwIHx8IGlzTmFOKGFuZ2xlKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChmaWxsKSB7XG5cdFx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gY29sb3I7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGN0eC5zdHJva2VTdHlsZSA9IGNvbG9yO1xuXHRcdFx0XHRcdFx0Y3R4LmxpbmVKb2luID0gXCJyb3VuZFwiO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRpZiAoTWF0aC5hYnMoYW5nbGUgLSBNYXRoLlBJICogMikgPiAwLjAwMDAwMDAwMSkge1xuXHRcdFx0XHRcdFx0Y3R4Lm1vdmVUbygwLCAwKTsgLy8gQ2VudGVyIG9mIHRoZSBwaWVcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvL2N0eC5hcmMoMCwgMCwgcmFkaXVzLCAwLCBhbmdsZSwgZmFsc2UpOyAvLyBUaGlzIGRvZXNuJ3Qgd29yayBwcm9wZXJseSBpbiBPcGVyYVxuXHRcdFx0XHRcdGN0eC5hcmMoMCwgMCwgcmFkaXVzLGN1cnJlbnRBbmdsZSwgY3VycmVudEFuZ2xlICsgYW5nbGUgLyAyLCBmYWxzZSk7XG5cdFx0XHRcdFx0Y3R4LmFyYygwLCAwLCByYWRpdXMsY3VycmVudEFuZ2xlICsgYW5nbGUgLyAyLCBjdXJyZW50QW5nbGUgKyBhbmdsZSwgZmFsc2UpO1xuXHRcdFx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0XHQvL2N0eC5yb3RhdGUoYW5nbGUpOyAvLyBUaGlzIGRvZXNuJ3Qgd29yayBwcm9wZXJseSBpbiBPcGVyYVxuXHRcdFx0XHRcdGN1cnJlbnRBbmdsZSArPSBhbmdsZTtcblxuXHRcdFx0XHRcdGlmIChmaWxsKSB7XG5cdFx0XHRcdFx0XHRjdHguZmlsbCgpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZnVuY3Rpb24gZHJhd0xhYmVscygpIHtcblxuXHRcdFx0XHRcdHZhciBjdXJyZW50QW5nbGUgPSBzdGFydEFuZ2xlO1xuXHRcdFx0XHRcdHZhciByYWRpdXMgPSBvcHRpb25zLnNlcmllcy5waWUubGFiZWwucmFkaXVzID4gMSA/IG9wdGlvbnMuc2VyaWVzLnBpZS5sYWJlbC5yYWRpdXMgOiBtYXhSYWRpdXMgKiBvcHRpb25zLnNlcmllcy5waWUubGFiZWwucmFkaXVzO1xuXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0XHRcdGlmIChzbGljZXNbaV0ucGVyY2VudCA+PSBvcHRpb25zLnNlcmllcy5waWUubGFiZWwudGhyZXNob2xkICogMTAwKSB7XG5cdFx0XHRcdFx0XHRcdGlmICghZHJhd0xhYmVsKHNsaWNlc1tpXSwgY3VycmVudEFuZ2xlLCBpKSkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y3VycmVudEFuZ2xlICs9IHNsaWNlc1tpXS5hbmdsZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblxuXHRcdFx0XHRcdGZ1bmN0aW9uIGRyYXdMYWJlbChzbGljZSwgc3RhcnRBbmdsZSwgaW5kZXgpIHtcblxuXHRcdFx0XHRcdFx0aWYgKHNsaWNlLmRhdGFbMF1bMV0gPT0gMCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gZm9ybWF0IGxhYmVsIHRleHRcblxuXHRcdFx0XHRcdFx0dmFyIGxmID0gb3B0aW9ucy5sZWdlbmQubGFiZWxGb3JtYXR0ZXIsIHRleHQsIHBsZiA9IG9wdGlvbnMuc2VyaWVzLnBpZS5sYWJlbC5mb3JtYXR0ZXI7XG5cblx0XHRcdFx0XHRcdGlmIChsZikge1xuXHRcdFx0XHRcdFx0XHR0ZXh0ID0gbGYoc2xpY2UubGFiZWwsIHNsaWNlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRleHQgPSBzbGljZS5sYWJlbDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHBsZikge1xuXHRcdFx0XHRcdFx0XHR0ZXh0ID0gcGxmKHRleHQsIHNsaWNlKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGhhbGZBbmdsZSA9ICgoc3RhcnRBbmdsZSArIHNsaWNlLmFuZ2xlKSArIHN0YXJ0QW5nbGUpIC8gMjtcblx0XHRcdFx0XHRcdHZhciB4ID0gY2VudGVyTGVmdCArIE1hdGgucm91bmQoTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIHJhZGl1cyk7XG5cdFx0XHRcdFx0XHR2YXIgeSA9IGNlbnRlclRvcCArIE1hdGgucm91bmQoTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIHJhZGl1cykgKiBvcHRpb25zLnNlcmllcy5waWUudGlsdDtcblxuXHRcdFx0XHRcdFx0dmFyIGh0bWwgPSBcIjxzcGFuIGNsYXNzPSdwaWVMYWJlbCcgaWQ9J3BpZUxhYmVsXCIgKyBpbmRleCArIFwiJyBzdHlsZT0ncG9zaXRpb246YWJzb2x1dGU7dG9wOlwiICsgeSArIFwicHg7bGVmdDpcIiArIHggKyBcInB4Oyc+XCIgKyB0ZXh0ICsgXCI8L3NwYW4+XCI7XG5cdFx0XHRcdFx0XHR0YXJnZXQuYXBwZW5kKGh0bWwpO1xuXG5cdFx0XHRcdFx0XHR2YXIgbGFiZWwgPSB0YXJnZXQuY2hpbGRyZW4oXCIjcGllTGFiZWxcIiArIGluZGV4KTtcblx0XHRcdFx0XHRcdHZhciBsYWJlbFRvcCA9ICh5IC0gbGFiZWwuaGVpZ2h0KCkgLyAyKTtcblx0XHRcdFx0XHRcdHZhciBsYWJlbExlZnQgPSAoeCAtIGxhYmVsLndpZHRoKCkgLyAyKTtcblxuXHRcdFx0XHRcdFx0bGFiZWwuY3NzKFwidG9wXCIsIGxhYmVsVG9wKTtcblx0XHRcdFx0XHRcdGxhYmVsLmNzcyhcImxlZnRcIiwgbGFiZWxMZWZ0KTtcblxuXHRcdFx0XHRcdFx0Ly8gY2hlY2sgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGxhYmVsIGlzIG5vdCBvdXRzaWRlIHRoZSBjYW52YXNcblxuXHRcdFx0XHRcdFx0aWYgKDAgLSBsYWJlbFRvcCA+IDAgfHwgMCAtIGxhYmVsTGVmdCA+IDAgfHwgY2FudmFzSGVpZ2h0IC0gKGxhYmVsVG9wICsgbGFiZWwuaGVpZ2h0KCkpIDwgMCB8fCBjYW52YXNXaWR0aCAtIChsYWJlbExlZnQgKyBsYWJlbC53aWR0aCgpKSA8IDApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5zZXJpZXMucGllLmxhYmVsLmJhY2tncm91bmQub3BhY2l0eSAhPSAwKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gcHV0IGluIHRoZSB0cmFuc3BhcmVudCBiYWNrZ3JvdW5kIHNlcGFyYXRlbHkgdG8gYXZvaWQgYmxlbmRlZCBsYWJlbHMgYW5kIGxhYmVsIGJveGVzXG5cblx0XHRcdFx0XHRcdFx0dmFyIGMgPSBvcHRpb25zLnNlcmllcy5waWUubGFiZWwuYmFja2dyb3VuZC5jb2xvcjtcblxuXHRcdFx0XHRcdFx0XHRpZiAoYyA9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0YyA9IHNsaWNlLmNvbG9yO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0dmFyIHBvcyA9IFwidG9wOlwiICsgbGFiZWxUb3AgKyBcInB4O2xlZnQ6XCIgKyBsYWJlbExlZnQgKyBcInB4O1wiO1xuXHRcdFx0XHRcdFx0XHQkKFwiPGRpdiBjbGFzcz0ncGllTGFiZWxCYWNrZ3JvdW5kJyBzdHlsZT0ncG9zaXRpb246YWJzb2x1dGU7d2lkdGg6XCIgKyBsYWJlbC53aWR0aCgpICsgXCJweDtoZWlnaHQ6XCIgKyBsYWJlbC5oZWlnaHQoKSArIFwicHg7XCIgKyBwb3MgKyBcImJhY2tncm91bmQtY29sb3I6XCIgKyBjICsgXCI7Jz48L2Rpdj5cIilcblx0XHRcdFx0XHRcdFx0XHQuY3NzKFwib3BhY2l0eVwiLCBvcHRpb25zLnNlcmllcy5waWUubGFiZWwuYmFja2dyb3VuZC5vcGFjaXR5KVxuXHRcdFx0XHRcdFx0XHRcdC5pbnNlcnRCZWZvcmUobGFiZWwpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9IC8vIGVuZCBpbmRpdmlkdWFsIGxhYmVsIGZ1bmN0aW9uXG5cdFx0XHRcdH0gLy8gZW5kIGRyYXdMYWJlbHMgZnVuY3Rpb25cblx0XHRcdH0gLy8gZW5kIGRyYXdQaWUgZnVuY3Rpb25cblx0XHR9IC8vIGVuZCBkcmF3IGZ1bmN0aW9uXG5cblx0XHQvLyBQbGFjZWQgaGVyZSBiZWNhdXNlIGl0IG5lZWRzIHRvIGJlIGFjY2Vzc2VkIGZyb20gbXVsdGlwbGUgbG9jYXRpb25zXG5cblx0XHRmdW5jdGlvbiBkcmF3RG9udXRIb2xlKGxheWVyKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5zZXJpZXMucGllLmlubmVyUmFkaXVzID4gMCkge1xuXG5cdFx0XHRcdC8vIHN1YnRyYWN0IHRoZSBjZW50ZXJcblxuXHRcdFx0XHRsYXllci5zYXZlKCk7XG5cdFx0XHRcdHZhciBpbm5lclJhZGl1cyA9IG9wdGlvbnMuc2VyaWVzLnBpZS5pbm5lclJhZGl1cyA+IDEgPyBvcHRpb25zLnNlcmllcy5waWUuaW5uZXJSYWRpdXMgOiBtYXhSYWRpdXMgKiBvcHRpb25zLnNlcmllcy5waWUuaW5uZXJSYWRpdXM7XG5cdFx0XHRcdGxheWVyLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwiZGVzdGluYXRpb24tb3V0XCI7IC8vIHRoaXMgZG9lcyBub3Qgd29yayB3aXRoIGV4Y2FudmFzLCBidXQgaXQgd2lsbCBmYWxsIGJhY2sgdG8gdXNpbmcgdGhlIHN0cm9rZSBjb2xvclxuXHRcdFx0XHRsYXllci5iZWdpblBhdGgoKTtcblx0XHRcdFx0bGF5ZXIuZmlsbFN0eWxlID0gb3B0aW9ucy5zZXJpZXMucGllLnN0cm9rZS5jb2xvcjtcblx0XHRcdFx0bGF5ZXIuYXJjKDAsIDAsIGlubmVyUmFkaXVzLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuXHRcdFx0XHRsYXllci5maWxsKCk7XG5cdFx0XHRcdGxheWVyLmNsb3NlUGF0aCgpO1xuXHRcdFx0XHRsYXllci5yZXN0b3JlKCk7XG5cblx0XHRcdFx0Ly8gYWRkIGlubmVyIHN0cm9rZVxuXG5cdFx0XHRcdGxheWVyLnNhdmUoKTtcblx0XHRcdFx0bGF5ZXIuYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGxheWVyLnN0cm9rZVN0eWxlID0gb3B0aW9ucy5zZXJpZXMucGllLnN0cm9rZS5jb2xvcjtcblx0XHRcdFx0bGF5ZXIuYXJjKDAsIDAsIGlubmVyUmFkaXVzLCAwLCBNYXRoLlBJICogMiwgZmFsc2UpO1xuXHRcdFx0XHRsYXllci5zdHJva2UoKTtcblx0XHRcdFx0bGF5ZXIuY2xvc2VQYXRoKCk7XG5cdFx0XHRcdGxheWVyLnJlc3RvcmUoKTtcblxuXHRcdFx0XHQvLyBUT0RPOiBhZGQgZXh0cmEgc2hhZG93IGluc2lkZSBob2xlICh3aXRoIGEgbWFzaykgaWYgdGhlIHBpZSBpcyB0aWx0ZWQuXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8tLSBBZGRpdGlvbmFsIEludGVyYWN0aXZlIHJlbGF0ZWQgZnVuY3Rpb25zIC0tXG5cblx0XHRmdW5jdGlvbiBpc1BvaW50SW5Qb2x5KHBvbHksIHB0KSB7XG5cdFx0XHRmb3IodmFyIGMgPSBmYWxzZSwgaSA9IC0xLCBsID0gcG9seS5sZW5ndGgsIGogPSBsIC0gMTsgKytpIDwgbDsgaiA9IGkpXG5cdFx0XHRcdCgocG9seVtpXVsxXSA8PSBwdFsxXSAmJiBwdFsxXSA8IHBvbHlbal1bMV0pIHx8IChwb2x5W2pdWzFdIDw9IHB0WzFdICYmIHB0WzFdPCBwb2x5W2ldWzFdKSlcblx0XHRcdFx0JiYgKHB0WzBdIDwgKHBvbHlbal1bMF0gLSBwb2x5W2ldWzBdKSAqIChwdFsxXSAtIHBvbHlbaV1bMV0pIC8gKHBvbHlbal1bMV0gLSBwb2x5W2ldWzFdKSArIHBvbHlbaV1bMF0pXG5cdFx0XHRcdCYmIChjID0gIWMpO1xuXHRcdFx0cmV0dXJuIGM7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gZmluZE5lYXJieVNsaWNlKG1vdXNlWCwgbW91c2VZKSB7XG5cblx0XHRcdHZhciBzbGljZXMgPSBwbG90LmdldERhdGEoKSxcblx0XHRcdFx0b3B0aW9ucyA9IHBsb3QuZ2V0T3B0aW9ucygpLFxuXHRcdFx0XHRyYWRpdXMgPSBvcHRpb25zLnNlcmllcy5waWUucmFkaXVzID4gMSA/IG9wdGlvbnMuc2VyaWVzLnBpZS5yYWRpdXMgOiBtYXhSYWRpdXMgKiBvcHRpb25zLnNlcmllcy5waWUucmFkaXVzLFxuXHRcdFx0XHR4LCB5O1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlcy5sZW5ndGg7ICsraSkge1xuXG5cdFx0XHRcdHZhciBzID0gc2xpY2VzW2ldO1xuXG5cdFx0XHRcdGlmIChzLnBpZS5zaG93KSB7XG5cblx0XHRcdFx0XHRjdHguc2F2ZSgpO1xuXHRcdFx0XHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRcdFx0XHRjdHgubW92ZVRvKDAsIDApOyAvLyBDZW50ZXIgb2YgdGhlIHBpZVxuXHRcdFx0XHRcdC8vY3R4LnNjYWxlKDEsIG9wdGlvbnMuc2VyaWVzLnBpZS50aWx0KTtcdC8vIHRoaXMgYWN0dWFsbHkgc2VlbXMgdG8gYnJlYWsgZXZlcnl0aGluZyB3aGVuIGhlcmUuXG5cdFx0XHRcdFx0Y3R4LmFyYygwLCAwLCByYWRpdXMsIHMuc3RhcnRBbmdsZSwgcy5zdGFydEFuZ2xlICsgcy5hbmdsZSAvIDIsIGZhbHNlKTtcblx0XHRcdFx0XHRjdHguYXJjKDAsIDAsIHJhZGl1cywgcy5zdGFydEFuZ2xlICsgcy5hbmdsZSAvIDIsIHMuc3RhcnRBbmdsZSArIHMuYW5nbGUsIGZhbHNlKTtcblx0XHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRcdFx0eCA9IG1vdXNlWCAtIGNlbnRlckxlZnQ7XG5cdFx0XHRcdFx0eSA9IG1vdXNlWSAtIGNlbnRlclRvcDtcblxuXHRcdFx0XHRcdGlmIChjdHguaXNQb2ludEluUGF0aCkge1xuXHRcdFx0XHRcdFx0aWYgKGN0eC5pc1BvaW50SW5QYXRoKG1vdXNlWCAtIGNlbnRlckxlZnQsIG1vdXNlWSAtIGNlbnRlclRvcCkpIHtcblx0XHRcdFx0XHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRkYXRhcG9pbnQ6IFtzLnBlcmNlbnQsIHMuZGF0YV0sXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUluZGV4OiAwLFxuXHRcdFx0XHRcdFx0XHRcdHNlcmllczogcyxcblx0XHRcdFx0XHRcdFx0XHRzZXJpZXNJbmRleDogaVxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIGV4Y2FudmFzIGZvciBJRSBkb2Vzbjt0IHN1cHBvcnQgaXNQb2ludEluUGF0aCwgdGhpcyBpcyBhIHdvcmthcm91bmQuXG5cblx0XHRcdFx0XHRcdHZhciBwMVggPSByYWRpdXMgKiBNYXRoLmNvcyhzLnN0YXJ0QW5nbGUpLFxuXHRcdFx0XHRcdFx0XHRwMVkgPSByYWRpdXMgKiBNYXRoLnNpbihzLnN0YXJ0QW5nbGUpLFxuXHRcdFx0XHRcdFx0XHRwMlggPSByYWRpdXMgKiBNYXRoLmNvcyhzLnN0YXJ0QW5nbGUgKyBzLmFuZ2xlIC8gNCksXG5cdFx0XHRcdFx0XHRcdHAyWSA9IHJhZGl1cyAqIE1hdGguc2luKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyA0KSxcblx0XHRcdFx0XHRcdFx0cDNYID0gcmFkaXVzICogTWF0aC5jb3Mocy5zdGFydEFuZ2xlICsgcy5hbmdsZSAvIDIpLFxuXHRcdFx0XHRcdFx0XHRwM1kgPSByYWRpdXMgKiBNYXRoLnNpbihzLnN0YXJ0QW5nbGUgKyBzLmFuZ2xlIC8gMiksXG5cdFx0XHRcdFx0XHRcdHA0WCA9IHJhZGl1cyAqIE1hdGguY29zKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUgLyAxLjUpLFxuXHRcdFx0XHRcdFx0XHRwNFkgPSByYWRpdXMgKiBNYXRoLnNpbihzLnN0YXJ0QW5nbGUgKyBzLmFuZ2xlIC8gMS41KSxcblx0XHRcdFx0XHRcdFx0cDVYID0gcmFkaXVzICogTWF0aC5jb3Mocy5zdGFydEFuZ2xlICsgcy5hbmdsZSksXG5cdFx0XHRcdFx0XHRcdHA1WSA9IHJhZGl1cyAqIE1hdGguc2luKHMuc3RhcnRBbmdsZSArIHMuYW5nbGUpLFxuXHRcdFx0XHRcdFx0XHRhcnJQb2x5ID0gW1swLCAwXSwgW3AxWCwgcDFZXSwgW3AyWCwgcDJZXSwgW3AzWCwgcDNZXSwgW3A0WCwgcDRZXSwgW3A1WCwgcDVZXV0sXG5cdFx0XHRcdFx0XHRcdGFyclBvaW50ID0gW3gsIHldO1xuXG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBwZXJoYXBzIGRvIHNvbWUgbWF0aG1hdGljYWwgdHJpY2tlcnkgaGVyZSB3aXRoIHRoZSBZLWNvb3JkaW5hdGUgdG8gY29tcGVuc2F0ZSBmb3IgcGllIHRpbHQ/XG5cblx0XHRcdFx0XHRcdGlmIChpc1BvaW50SW5Qb2x5KGFyclBvbHksIGFyclBvaW50KSkge1xuXHRcdFx0XHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFwb2ludDogW3MucGVyY2VudCwgcy5kYXRhXSxcblx0XHRcdFx0XHRcdFx0XHRkYXRhSW5kZXg6IDAsXG5cdFx0XHRcdFx0XHRcdFx0c2VyaWVzOiBzLFxuXHRcdFx0XHRcdFx0XHRcdHNlcmllc0luZGV4OiBpXG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBvbk1vdXNlTW92ZShlKSB7XG5cdFx0XHR0cmlnZ2VyQ2xpY2tIb3ZlckV2ZW50KFwicGxvdGhvdmVyXCIsIGUpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuXHRcdFx0dHJpZ2dlckNsaWNrSG92ZXJFdmVudChcInBsb3RjbGlja1wiLCBlKTtcblx0XHR9XG5cblx0XHQvLyB0cmlnZ2VyIGNsaWNrIG9yIGhvdmVyIGV2ZW50ICh0aGV5IHNlbmQgdGhlIHNhbWUgcGFyYW1ldGVycyBzbyB3ZSBzaGFyZSB0aGVpciBjb2RlKVxuXG5cdFx0ZnVuY3Rpb24gdHJpZ2dlckNsaWNrSG92ZXJFdmVudChldmVudG5hbWUsIGUpIHtcblxuXHRcdFx0dmFyIG9mZnNldCA9IHBsb3Qub2Zmc2V0KCk7XG5cdFx0XHR2YXIgY2FudmFzWCA9IHBhcnNlSW50KGUucGFnZVggLSBvZmZzZXQubGVmdCk7XG5cdFx0XHR2YXIgY2FudmFzWSA9ICBwYXJzZUludChlLnBhZ2VZIC0gb2Zmc2V0LnRvcCk7XG5cdFx0XHR2YXIgaXRlbSA9IGZpbmROZWFyYnlTbGljZShjYW52YXNYLCBjYW52YXNZKTtcblxuXHRcdFx0aWYgKG9wdGlvbnMuZ3JpZC5hdXRvSGlnaGxpZ2h0KSB7XG5cblx0XHRcdFx0Ly8gY2xlYXIgYXV0by1oaWdobGlnaHRzXG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBoaWdobGlnaHRzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0dmFyIGggPSBoaWdobGlnaHRzW2ldO1xuXHRcdFx0XHRcdGlmIChoLmF1dG8gPT0gZXZlbnRuYW1lICYmICEoaXRlbSAmJiBoLnNlcmllcyA9PSBpdGVtLnNlcmllcykpIHtcblx0XHRcdFx0XHRcdHVuaGlnaGxpZ2h0KGguc2VyaWVzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gaGlnaGxpZ2h0IHRoZSBzbGljZVxuXG5cdFx0XHRpZiAoaXRlbSkge1xuXHRcdFx0XHRoaWdobGlnaHQoaXRlbS5zZXJpZXMsIGV2ZW50bmFtZSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHRyaWdnZXIgYW55IGhvdmVyIGJpbmQgZXZlbnRzXG5cblx0XHRcdHZhciBwb3MgPSB7IHBhZ2VYOiBlLnBhZ2VYLCBwYWdlWTogZS5wYWdlWSB9O1xuXHRcdFx0dGFyZ2V0LnRyaWdnZXIoZXZlbnRuYW1lLCBbcG9zLCBpdGVtXSk7XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gaGlnaGxpZ2h0KHMsIGF1dG8pIHtcblx0XHRcdC8vaWYgKHR5cGVvZiBzID09IFwibnVtYmVyXCIpIHtcblx0XHRcdC8vXHRzID0gc2VyaWVzW3NdO1xuXHRcdFx0Ly99XG5cblx0XHRcdHZhciBpID0gaW5kZXhPZkhpZ2hsaWdodChzKTtcblxuXHRcdFx0aWYgKGkgPT0gLTEpIHtcblx0XHRcdFx0aGlnaGxpZ2h0cy5wdXNoKHsgc2VyaWVzOiBzLCBhdXRvOiBhdXRvIH0pO1xuXHRcdFx0XHRwbG90LnRyaWdnZXJSZWRyYXdPdmVybGF5KCk7XG5cdFx0XHR9IGVsc2UgaWYgKCFhdXRvKSB7XG5cdFx0XHRcdGhpZ2hsaWdodHNbaV0uYXV0byA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIHVuaGlnaGxpZ2h0KHMpIHtcblx0XHRcdGlmIChzID09IG51bGwpIHtcblx0XHRcdFx0aGlnaGxpZ2h0cyA9IFtdO1xuXHRcdFx0XHRwbG90LnRyaWdnZXJSZWRyYXdPdmVybGF5KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vaWYgKHR5cGVvZiBzID09IFwibnVtYmVyXCIpIHtcblx0XHRcdC8vXHRzID0gc2VyaWVzW3NdO1xuXHRcdFx0Ly99XG5cblx0XHRcdHZhciBpID0gaW5kZXhPZkhpZ2hsaWdodChzKTtcblxuXHRcdFx0aWYgKGkgIT0gLTEpIHtcblx0XHRcdFx0aGlnaGxpZ2h0cy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdHBsb3QudHJpZ2dlclJlZHJhd092ZXJsYXkoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpbmRleE9mSGlnaGxpZ2h0KHMpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgaGlnaGxpZ2h0cy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgaCA9IGhpZ2hsaWdodHNbaV07XG5cdFx0XHRcdGlmIChoLnNlcmllcyA9PSBzKVxuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIC0xO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGRyYXdPdmVybGF5KHBsb3QsIG9jdHgpIHtcblxuXHRcdFx0dmFyIG9wdGlvbnMgPSBwbG90LmdldE9wdGlvbnMoKTtcblxuXHRcdFx0dmFyIHJhZGl1cyA9IG9wdGlvbnMuc2VyaWVzLnBpZS5yYWRpdXMgPiAxID8gb3B0aW9ucy5zZXJpZXMucGllLnJhZGl1cyA6IG1heFJhZGl1cyAqIG9wdGlvbnMuc2VyaWVzLnBpZS5yYWRpdXM7XG5cblx0XHRcdG9jdHguc2F2ZSgpO1xuXHRcdFx0b2N0eC50cmFuc2xhdGUoY2VudGVyTGVmdCwgY2VudGVyVG9wKTtcblx0XHRcdG9jdHguc2NhbGUoMSwgb3B0aW9ucy5zZXJpZXMucGllLnRpbHQpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhpZ2hsaWdodHMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0ZHJhd0hpZ2hsaWdodChoaWdobGlnaHRzW2ldLnNlcmllcyk7XG5cdFx0XHR9XG5cblx0XHRcdGRyYXdEb251dEhvbGUob2N0eCk7XG5cblx0XHRcdG9jdHgucmVzdG9yZSgpO1xuXG5cdFx0XHRmdW5jdGlvbiBkcmF3SGlnaGxpZ2h0KHNlcmllcykge1xuXG5cdFx0XHRcdGlmIChzZXJpZXMuYW5nbGUgPD0gMCB8fCBpc05hTihzZXJpZXMuYW5nbGUpKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9vY3R4LmZpbGxTdHlsZSA9IHBhcnNlQ29sb3Iob3B0aW9ucy5zZXJpZXMucGllLmhpZ2hsaWdodC5jb2xvcikuc2NhbGUobnVsbCwgbnVsbCwgbnVsbCwgb3B0aW9ucy5zZXJpZXMucGllLmhpZ2hsaWdodC5vcGFjaXR5KS50b1N0cmluZygpO1xuXHRcdFx0XHRvY3R4LmZpbGxTdHlsZSA9IFwicmdiYSgyNTUsIDI1NSwgMjU1LCBcIiArIG9wdGlvbnMuc2VyaWVzLnBpZS5oaWdobGlnaHQub3BhY2l0eSArIFwiKVwiOyAvLyB0aGlzIGlzIHRlbXBvcmFyeSB1bnRpbCB3ZSBoYXZlIGFjY2VzcyB0byBwYXJzZUNvbG9yXG5cdFx0XHRcdG9jdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdGlmIChNYXRoLmFicyhzZXJpZXMuYW5nbGUgLSBNYXRoLlBJICogMikgPiAwLjAwMDAwMDAwMSkge1xuXHRcdFx0XHRcdG9jdHgubW92ZVRvKDAsIDApOyAvLyBDZW50ZXIgb2YgdGhlIHBpZVxuXHRcdFx0XHR9XG5cdFx0XHRcdG9jdHguYXJjKDAsIDAsIHJhZGl1cywgc2VyaWVzLnN0YXJ0QW5nbGUsIHNlcmllcy5zdGFydEFuZ2xlICsgc2VyaWVzLmFuZ2xlIC8gMiwgZmFsc2UpO1xuXHRcdFx0XHRvY3R4LmFyYygwLCAwLCByYWRpdXMsIHNlcmllcy5zdGFydEFuZ2xlICsgc2VyaWVzLmFuZ2xlIC8gMiwgc2VyaWVzLnN0YXJ0QW5nbGUgKyBzZXJpZXMuYW5nbGUsIGZhbHNlKTtcblx0XHRcdFx0b2N0eC5jbG9zZVBhdGgoKTtcblx0XHRcdFx0b2N0eC5maWxsKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IC8vIGVuZCBpbml0IChwbHVnaW4gYm9keSlcblxuXHQvLyBkZWZpbmUgcGllIHNwZWNpZmljIG9wdGlvbnMgYW5kIHRoZWlyIGRlZmF1bHQgdmFsdWVzXG5cblx0dmFyIG9wdGlvbnMgPSB7XG5cdFx0c2VyaWVzOiB7XG5cdFx0XHRwaWU6IHtcblx0XHRcdFx0c2hvdzogZmFsc2UsXG5cdFx0XHRcdHJhZGl1czogXCJhdXRvXCIsXHQvLyBhY3R1YWwgcmFkaXVzIG9mIHRoZSB2aXNpYmxlIHBpZSAoYmFzZWQgb24gZnVsbCBjYWxjdWxhdGVkIHJhZGl1cyBpZiA8PTEsIG9yIGhhcmQgcGl4ZWwgdmFsdWUpXG5cdFx0XHRcdGlubmVyUmFkaXVzOiAwLCAvKiBmb3IgZG9udXQgKi9cblx0XHRcdFx0c3RhcnRBbmdsZTogMy8yLFxuXHRcdFx0XHR0aWx0OiAxLFxuXHRcdFx0XHRzaGFkb3c6IHtcblx0XHRcdFx0XHRsZWZ0OiA1LFx0Ly8gc2hhZG93IGxlZnQgb2Zmc2V0XG5cdFx0XHRcdFx0dG9wOiAxNSxcdC8vIHNoYWRvdyB0b3Agb2Zmc2V0XG5cdFx0XHRcdFx0YWxwaGE6IDAuMDJcdC8vIHNoYWRvdyBhbHBoYVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRvZmZzZXQ6IHtcblx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0bGVmdDogXCJhdXRvXCJcblx0XHRcdFx0fSxcblx0XHRcdFx0c3Ryb2tlOiB7XG5cdFx0XHRcdFx0Y29sb3I6IFwiI2ZmZlwiLFxuXHRcdFx0XHRcdHdpZHRoOiAxXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGxhYmVsOiB7XG5cdFx0XHRcdFx0c2hvdzogXCJhdXRvXCIsXG5cdFx0XHRcdFx0Zm9ybWF0dGVyOiBmdW5jdGlvbihsYWJlbCwgc2xpY2UpIHtcblx0XHRcdFx0XHRcdHJldHVybiBcIjxkaXYgc3R5bGU9J2ZvbnQtc2l6ZTp4LXNtYWxsO3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MnB4O2NvbG9yOlwiICsgc2xpY2UuY29sb3IgKyBcIjsnPlwiICsgbGFiZWwgKyBcIjxici8+XCIgKyBNYXRoLnJvdW5kKHNsaWNlLnBlcmNlbnQpICsgXCIlPC9kaXY+XCI7XG5cdFx0XHRcdFx0fSxcdC8vIGZvcm1hdHRlciBmdW5jdGlvblxuXHRcdFx0XHRcdHJhZGl1czogMSxcdC8vIHJhZGl1cyBhdCB3aGljaCB0byBwbGFjZSB0aGUgbGFiZWxzIChiYXNlZCBvbiBmdWxsIGNhbGN1bGF0ZWQgcmFkaXVzIGlmIDw9MSwgb3IgaGFyZCBwaXhlbCB2YWx1ZSlcblx0XHRcdFx0XHRiYWNrZ3JvdW5kOiB7XG5cdFx0XHRcdFx0XHRjb2xvcjogbnVsbCxcblx0XHRcdFx0XHRcdG9wYWNpdHk6IDBcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHRocmVzaG9sZDogMFx0Ly8gcGVyY2VudGFnZSBhdCB3aGljaCB0byBoaWRlIHRoZSBsYWJlbCAoaS5lLiB0aGUgc2xpY2UgaXMgdG9vIG5hcnJvdylcblx0XHRcdFx0fSxcblx0XHRcdFx0Y29tYmluZToge1xuXHRcdFx0XHRcdHRocmVzaG9sZDogLTEsXHQvLyBwZXJjZW50YWdlIGF0IHdoaWNoIHRvIGNvbWJpbmUgbGl0dGxlIHNsaWNlcyBpbnRvIG9uZSBsYXJnZXIgc2xpY2Vcblx0XHRcdFx0XHRjb2xvcjogbnVsbCxcdC8vIGNvbG9yIHRvIGdpdmUgdGhlIG5ldyBzbGljZSAoYXV0by1nZW5lcmF0ZWQgaWYgbnVsbClcblx0XHRcdFx0XHRsYWJlbDogXCJPdGhlclwiXHQvLyBsYWJlbCB0byBnaXZlIHRoZSBuZXcgc2xpY2Vcblx0XHRcdFx0fSxcblx0XHRcdFx0aGlnaGxpZ2h0OiB7XG5cdFx0XHRcdFx0Ly9jb2xvcjogXCIjZmZmXCIsXHRcdC8vIHdpbGwgYWRkIHRoaXMgZnVuY3Rpb25hbGl0eSBvbmNlIHBhcnNlQ29sb3IgaXMgYXZhaWxhYmxlXG5cdFx0XHRcdFx0b3BhY2l0eTogMC41XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0JC5wbG90LnBsdWdpbnMucHVzaCh7XG5cdFx0aW5pdDogaW5pdCxcblx0XHRvcHRpb25zOiBvcHRpb25zLFxuXHRcdG5hbWU6IFwicGllXCIsXG5cdFx0dmVyc2lvbjogXCIxLjFcIlxuXHR9KTtcblxufSkoalF1ZXJ5KTtcbiJdfQ==
