var angles=angular.module("angles",[]);angles.chart=function(type){return{restrict:"A",scope:{data:"=",options:"=",id:"@",width:"=",height:"=",resize:"=",chart:"@",segments:"@",responsive:"=",tooltip:"=",legend:"="},link:function($scope,$elem){var ctx=$elem[0].getContext("2d"),autosize=!1;$scope.size=function(){$scope.width<=0?($elem.width($elem.parent().width()),ctx.canvas.width=$elem.width()):(ctx.canvas.width=$scope.width||ctx.canvas.width,autosize=!0),$scope.height<=0?($elem.height($elem.parent().height()),ctx.canvas.height=ctx.canvas.width/2):(ctx.canvas.height=$scope.height||ctx.canvas.height,autosize=!0)},$scope.$watch("data",(function(newVal,oldVal){chartCreated&&chartCreated.destroy(),newVal&&($scope.chart&&(type=$scope.chart),autosize&&($scope.size(),chart=new Chart(ctx)),($scope.responsive||$scope.resize)&&($scope.options.responsive=!0),void 0!==$scope.responsive&&($scope.options.responsive=$scope.responsive),(chartCreated=chart[type]($scope.data,$scope.options)).update(),$scope.legend&&angular.element($elem[0]).parent().after(chartCreated.generateLegend()))}),!0),$scope.$watch("tooltip",(function(newVal,oldVal){if(chartCreated&&chartCreated.draw(),void 0!==newVal&&chartCreated.segments&&!(!isFinite(newVal)||newVal>=chartCreated.segments.length||newVal<0)){var activeSegment=chartCreated.segments[newVal];activeSegment.save(),activeSegment.fillColor=activeSegment.highlightColor,chartCreated.showTooltip([activeSegment]),activeSegment.restore()}}),!0),$scope.size();var chartCreated,chart=new Chart(ctx)}}},angles.directive("chart",(function(){return angles.chart()})),angles.directive("linechart",(function(){return angles.chart("Line")})),angles.directive("barchart",(function(){return angles.chart("Bar")})),angles.directive("radarchart",(function(){return angles.chart("Radar")})),angles.directive("polarchart",(function(){return angles.chart("PolarArea")})),angles.directive("piechart",(function(){return angles.chart("Pie")})),angles.directive("doughnutchart",(function(){return angles.chart("Doughnut")})),angles.directive("donutchart",(function(){return angles.chart("Doughnut")}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvY2hhcnRKcy9hbmdsZXMuanMiXSwibmFtZXMiOlsiYW5nbGVzIiwiYW5ndWxhciIsIm1vZHVsZSIsImNoYXJ0IiwidHlwZSIsInJlc3RyaWN0Iiwic2NvcGUiLCJkYXRhIiwib3B0aW9ucyIsImlkIiwid2lkdGgiLCJoZWlnaHQiLCJyZXNpemUiLCJzZWdtZW50cyIsInJlc3BvbnNpdmUiLCJ0b29sdGlwIiwibGVnZW5kIiwibGluayIsIiRzY29wZSIsIiRlbGVtIiwiY3R4IiwiZ2V0Q29udGV4dCIsImF1dG9zaXplIiwic2l6ZSIsInBhcmVudCIsImNhbnZhcyIsIiR3YXRjaCIsIm5ld1ZhbCIsIm9sZFZhbCIsImNoYXJ0Q3JlYXRlZCIsImRlc3Ryb3kiLCJDaGFydCIsInVuZGVmaW5lZCIsInVwZGF0ZSIsImVsZW1lbnQiLCJhZnRlciIsImdlbmVyYXRlTGVnZW5kIiwiZHJhdyIsImlzRmluaXRlIiwibGVuZ3RoIiwiYWN0aXZlU2VnbWVudCIsInNhdmUiLCJmaWxsQ29sb3IiLCJoaWdobGlnaHRDb2xvciIsInNob3dUb29sdGlwIiwicmVzdG9yZSIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBU0MsUUFBUUMsT0FBTyxTQUFVLElBRXRDRixPQUFPRyxNQUFRLFNBQVVDLE1BQ3JCLE1BQU8sQ0FDSEMsU0FBVSxJQUNWQyxNQUFPLENBQ0hDLEtBQU0sSUFDTkMsUUFBUyxJQUNUQyxHQUFJLElBQ0pDLE1BQU8sSUFDUEMsT0FBUSxJQUNSQyxPQUFRLElBQ1JULE1BQU8sSUFDUFUsU0FBVSxJQUNWQyxXQUFZLElBQ1pDLFFBQVMsSUFDVEMsT0FBUSxLQUVaQyxLQUFNLFNBQVVDLE9BQVFDLE9BQ3BCLElBQUlDLElBQU1ELE1BQU0sR0FBR0UsV0FBVyxNQUMxQkMsVUFBVyxFQUVmSixPQUFPSyxLQUFPLFdBQ05MLE9BQU9SLE9BQVMsR0FDaEJTLE1BQU1ULE1BQU1TLE1BQU1LLFNBQVNkLFNBQzNCVSxJQUFJSyxPQUFPZixNQUFRUyxNQUFNVCxVQUV6QlUsSUFBSUssT0FBT2YsTUFBUVEsT0FBT1IsT0FBU1UsSUFBSUssT0FBT2YsTUFDOUNZLFVBQVcsR0FHWkosT0FBT1AsUUFBVSxHQUNoQlEsTUFBTVIsT0FBT1EsTUFBTUssU0FBU2IsVUFDNUJTLElBQUlLLE9BQU9kLE9BQVNTLElBQUlLLE9BQU9mLE1BQVEsSUFFdkNVLElBQUlLLE9BQU9kLE9BQVNPLE9BQU9QLFFBQVVTLElBQUlLLE9BQU9kLE9BQ2hEVyxVQUFXLElBSW5CSixPQUFPUSxPQUFPLFFBQVEsU0FBVUMsT0FBUUMsUUFDakNDLGNBQ0NBLGFBQWFDLFVBR1pILFNBR0RULE9BQU9mLFFBQVNDLEtBQU9jLE9BQU9mLE9BRS9CbUIsV0FDQ0osT0FBT0ssT0FDUHBCLE1BQVEsSUFBSTRCLE1BQU1YLE9BR25CRixPQUFPSixZQUFjSSxPQUFPTixVQUMzQk0sT0FBT1YsUUFBUU0sWUFBYSxRQUVQa0IsSUFBdEJkLE9BQU9KLGFBQ05JLE9BQU9WLFFBQVFNLFdBQWFJLE9BQU9KLGFBRXZDZSxhQUFlMUIsTUFBTUMsTUFBTWMsT0FBT1gsS0FBTVcsT0FBT1YsVUFDbEN5QixTQUNWZixPQUFPRixRQUNOZixRQUFRaUMsUUFBUWYsTUFBTSxJQUFJSyxTQUFTVyxNQUFPTixhQUFhTyxzQkFDNUQsR0FFSGxCLE9BQU9RLE9BQU8sV0FBVyxTQUFVQyxPQUFRQyxRQUd2QyxHQUZJQyxjQUNBQSxhQUFhUSxZQUNMTCxJQUFUTCxRQUF1QkUsYUFBYWhCLGFBRW5DeUIsU0FBU1gsU0FBV0EsUUFBVUUsYUFBYWhCLFNBQVMwQixRQUFVWixPQUFTLEdBQTNFLENBRUEsSUFBSWEsY0FBZ0JYLGFBQWFoQixTQUFTYyxRQUMxQ2EsY0FBY0MsT0FDZEQsY0FBY0UsVUFBWUYsY0FBY0csZUFDeENkLGFBQWFlLFlBQVksQ0FBQ0osZ0JBQzFCQSxjQUFjSyxjQUNmLEdBRUgzQixPQUFPSyxPQUNQLElBQ0lNLGFBREExQixNQUFRLElBQUk0QixNQUFNWCxRQVFsQ3BCLE9BQU84QyxVQUFVLFNBQVMsV0FBYyxPQUFPOUMsT0FBT0csV0FDdERILE9BQU84QyxVQUFVLGFBQWEsV0FBYyxPQUFPOUMsT0FBT0csTUFBTSxXQUNoRUgsT0FBTzhDLFVBQVUsWUFBWSxXQUFjLE9BQU85QyxPQUFPRyxNQUFNLFVBQy9ESCxPQUFPOEMsVUFBVSxjQUFjLFdBQWMsT0FBTzlDLE9BQU9HLE1BQU0sWUFDakVILE9BQU84QyxVQUFVLGNBQWMsV0FBYyxPQUFPOUMsT0FBT0csTUFBTSxnQkFDakVILE9BQU84QyxVQUFVLFlBQVksV0FBYyxPQUFPOUMsT0FBT0csTUFBTSxVQUMvREgsT0FBTzhDLFVBQVUsaUJBQWlCLFdBQWMsT0FBTzlDLE9BQU9HLE1BQU0sZUFDcEVILE9BQU84QyxVQUFVLGNBQWMsV0FBYyxPQUFPOUMsT0FBT0csTUFBTSIsImZpbGUiOiJwbHVnaW5zL2NoYXJ0SnMvYW5nbGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFuZ2xlcyA9IGFuZ3VsYXIubW9kdWxlKFwiYW5nbGVzXCIsIFtdKTtcblxuYW5nbGVzLmNoYXJ0ID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogXCJBXCIsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiBcIj1cIixcbiAgICAgICAgICAgIG9wdGlvbnM6IFwiPVwiLFxuICAgICAgICAgICAgaWQ6IFwiQFwiLFxuICAgICAgICAgICAgd2lkdGg6IFwiPVwiLFxuICAgICAgICAgICAgaGVpZ2h0OiBcIj1cIixcbiAgICAgICAgICAgIHJlc2l6ZTogXCI9XCIsXG4gICAgICAgICAgICBjaGFydDogXCJAXCIsXG4gICAgICAgICAgICBzZWdtZW50czogXCJAXCIsXG4gICAgICAgICAgICByZXNwb25zaXZlOiBcIj1cIixcbiAgICAgICAgICAgIHRvb2x0aXA6IFwiPVwiLFxuICAgICAgICAgICAgbGVnZW5kOiBcIj1cIlxuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbSkge1xuICAgICAgICAgICAgdmFyIGN0eCA9ICRlbGVtWzBdLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIHZhciBhdXRvc2l6ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAkc2NvcGUuc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLndpZHRoIDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgJGVsZW0ud2lkdGgoJGVsZW0ucGFyZW50KCkud2lkdGgoKSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jYW52YXMud2lkdGggPSAkZWxlbS53aWR0aCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jYW52YXMud2lkdGggPSAkc2NvcGUud2lkdGggfHwgY3R4LmNhbnZhcy53aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgYXV0b3NpemUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCRzY29wZS5oZWlnaHQgPD0gMCl7XG4gICAgICAgICAgICAgICAgICAgICRlbGVtLmhlaWdodCgkZWxlbS5wYXJlbnQoKS5oZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jYW52YXMuaGVpZ2h0ID0gY3R4LmNhbnZhcy53aWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmNhbnZhcy5oZWlnaHQgPSAkc2NvcGUuaGVpZ2h0IHx8IGN0eC5jYW52YXMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBhdXRvc2l6ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkc2NvcGUuJHdhdGNoKFwiZGF0YVwiLCBmdW5jdGlvbiAobmV3VmFsLCBvbGRWYWwpIHtcbiAgICAgICAgICAgICAgICBpZihjaGFydENyZWF0ZWQpXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0Q3JlYXRlZC5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBkYXRhIG5vdCBkZWZpbmVkLCBleGl0XG4gICAgICAgICAgICAgICAgaWYgKCFuZXdWYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNoYXJ0KSB7IHR5cGUgPSAkc2NvcGUuY2hhcnQ7IH1cblxuICAgICAgICAgICAgICAgIGlmKGF1dG9zaXplKXtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpemUoKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQgPSBuZXcgQ2hhcnQoY3R4KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaWYoJHNjb3BlLnJlc3BvbnNpdmUgfHwgJHNjb3BlLnJlc2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wdGlvbnMucmVzcG9uc2l2ZSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBpZigkc2NvcGUucmVzcG9uc2l2ZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3B0aW9ucy5yZXNwb25zaXZlID0gJHNjb3BlLnJlc3BvbnNpdmU7XG5cbiAgICAgICAgICAgICAgICBjaGFydENyZWF0ZWQgPSBjaGFydFt0eXBlXSgkc2NvcGUuZGF0YSwgJHNjb3BlLm9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNoYXJ0Q3JlYXRlZC51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICBpZigkc2NvcGUubGVnZW5kKVxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJGVsZW1bMF0pLnBhcmVudCgpLmFmdGVyKCBjaGFydENyZWF0ZWQuZ2VuZXJhdGVMZWdlbmQoKSApO1xuICAgICAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICRzY29wZS4kd2F0Y2goXCJ0b29sdGlwXCIsIGZ1bmN0aW9uIChuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgICAgICAgIGlmIChjaGFydENyZWF0ZWQpXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0Q3JlYXRlZC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgaWYobmV3VmFsPT09dW5kZWZpbmVkIHx8ICFjaGFydENyZWF0ZWQuc2VnbWVudHMpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBpZighaXNGaW5pdGUobmV3VmFsKSB8fCBuZXdWYWwgPj0gY2hhcnRDcmVhdGVkLnNlZ21lbnRzLmxlbmd0aCB8fCBuZXdWYWwgPCAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2ZVNlZ21lbnQgPSBjaGFydENyZWF0ZWQuc2VnbWVudHNbbmV3VmFsXTtcbiAgICAgICAgICAgICAgICBhY3RpdmVTZWdtZW50LnNhdmUoKTtcbiAgICAgICAgICAgICAgICBhY3RpdmVTZWdtZW50LmZpbGxDb2xvciA9IGFjdGl2ZVNlZ21lbnQuaGlnaGxpZ2h0Q29sb3I7XG4gICAgICAgICAgICAgICAgY2hhcnRDcmVhdGVkLnNob3dUb29sdGlwKFthY3RpdmVTZWdtZW50XSk7XG4gICAgICAgICAgICAgICAgYWN0aXZlU2VnbWVudC5yZXN0b3JlKCk7XG4gICAgICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICAgICAgJHNjb3BlLnNpemUoKTtcbiAgICAgICAgICAgIHZhciBjaGFydCA9IG5ldyBDaGFydChjdHgpO1xuICAgICAgICAgICAgdmFyIGNoYXJ0Q3JlYXRlZDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vKiBBbGlhc2VzIGZvciB2YXJpb3VzIGNoYXJ0IHR5cGVzICovXG5hbmdsZXMuZGlyZWN0aXZlKFwiY2hhcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5nbGVzLmNoYXJ0KCk7IH0pO1xuYW5nbGVzLmRpcmVjdGl2ZShcImxpbmVjaGFydFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBhbmdsZXMuY2hhcnQoXCJMaW5lXCIpOyB9KTtcbmFuZ2xlcy5kaXJlY3RpdmUoXCJiYXJjaGFydFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBhbmdsZXMuY2hhcnQoXCJCYXJcIik7IH0pO1xuYW5nbGVzLmRpcmVjdGl2ZShcInJhZGFyY2hhcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5nbGVzLmNoYXJ0KFwiUmFkYXJcIik7IH0pO1xuYW5nbGVzLmRpcmVjdGl2ZShcInBvbGFyY2hhcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5nbGVzLmNoYXJ0KFwiUG9sYXJBcmVhXCIpOyB9KTtcbmFuZ2xlcy5kaXJlY3RpdmUoXCJwaWVjaGFydFwiLCBmdW5jdGlvbiAoKSB7IHJldHVybiBhbmdsZXMuY2hhcnQoXCJQaWVcIik7IH0pO1xuYW5nbGVzLmRpcmVjdGl2ZShcImRvdWdobnV0Y2hhcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5nbGVzLmNoYXJ0KFwiRG91Z2hudXRcIik7IH0pO1xuYW5nbGVzLmRpcmVjdGl2ZShcImRvbnV0Y2hhcnRcIiwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYW5nbGVzLmNoYXJ0KFwiRG91Z2hudXRcIik7IH0pO1xuIl19
