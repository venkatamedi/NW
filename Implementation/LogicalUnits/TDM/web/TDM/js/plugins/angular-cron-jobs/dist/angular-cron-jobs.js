/**
 * UI Component For Creating Cron Job Syntax To Send To Server
 * @version v3.2.0 - 2016-09-20 * @link https://github.com/jacobscarter/angular-cron-jobs
 * @author Jacob Carter <jc@jacobcarter.com>
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
angular.module("templates-angularcronjobs",["cronselection.html"]),angular.module("cronselection.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("cronselection.html",'<div class="cron-wrap">\n    <span style="vertical-align: top;" >Every: </span>\n    <div style="vertical-align: top;" class="cron-select-wrap">\n        <select ng-disabled="disablechange" name="frequencyCron" required class="cron-select" ng-model="myFrequency.base" ng-options="item.value as item.label for item in frequency"></select>\n         <div class="m-t-xs" ng-show="form.frequencyCron.$invalid && form.submitted">\n             <small class="text-danger" ng-show="form.frequencyCron.$error.required">Please Choose Frequency</small>\n         </div>\n    </div>\n    <div class="select-options">\n        <span style="vertical-align: top;" ng-show="myFrequency.base == 4">on </span>\n        <div ng-show="myFrequency.base == 4" class="cron-select-wrap">\n            \x3c!-- If Multiple is Enabled --\x3e\n            <select ng-disabled="disablechange" class="cron-select day-value"\n                    ng-model="myFrequency.dayValues"\n                    ng-if="allowMultiple" multiple\n                    ng-options="value as (value | cronDayName: cronStyle) for value in dayValues">\n            </select>\n            \x3c!-- If Multiple is not Enabled --\x3e\n            <select ng-disabled="disablechange" class="cron-select day-value"\n                    ng-model="myFrequency.dayValues"\n                    ng-if="!allowMultiple"\n                    ng-options="value as (value | cronDayName: cronStyle) for value in dayValues">\n            </select>\n        </div>\n        <span style="vertical-align: top;" ng-show="myFrequency.base >= 5">on the </span>\n        <div ng-show="myFrequency.base >= 5" class="cron-select-wrap">\n            \x3c!-- If Multiple is Enabled --\x3e\n            <select ng-disabled="disablechange" class="cron-select day-of-month-value"\n                    ng-model="myFrequency.dayOfMonthValues"\n                    ng-if="allowMultiple" multiple\n                    ng-options="value as (value | cronNumeral) for value in dayOfMonthValues">\n            </select>\n            \x3c!-- If Multiple is not Enabled --\x3e\n            <select ng-disabled="disablechange" class="cron-select day-of-month-value"\n                    ng-model="myFrequency.dayOfMonthValues"\n                    ng-if="!allowMultiple"\n                    ng-options="value as (value | cronNumeral) for value in dayOfMonthValues">\n            </select>\n        </div>\n        <span style="vertical-align: top;" ng-show="myFrequency.base == 6">of </span>\n        \x3c!-- If Multiple is Enabled --\x3e\n        <div ng-show="myFrequency.base == 6" class="cron-select-wrap">\n            <select ng-disabled="disablechange" class="cron-select month-value"\n                    ng-model="myFrequency.monthValues"\n                    ng-if="allowMultiple" multiple\n                    ng-options="value as (value | cronMonthName) for value in monthValues">\n            </select>\n            \x3c!-- If Multiple is not Enabled --\x3e\n            <select ng-disabled="disablechange" class="cron-select month-value"\n                    ng-model="myFrequency.monthValues"\n                    ng-if="!allowMultiple"\n                    ng-options="value as (value | cronMonthName) for value in monthValues">\n            </select>\n        </div>\n        <span style="vertical-align: top;"  ng-show="myFrequency.base >= 2">at </span>\n        \x3c!-- If Multiple is Enabled --\x3e\n        <div ng-show="myFrequency.base >= 3" class="cron-select-wrap">\n            <select ng-disabled="disablechange" class="cron-select hour-value"\n                    ng-model="myFrequency.hourValues"\n                    ng-if="allowMultiple" multiple\n                    ng-options="value as value for value in hourValues">\n            </select>\n            \x3c!-- If Multiple is not Enabled --\x3e\n            <select ng-disabled="disablechange" class="cron-select hour-value"\n                    ng-model="myFrequency.hourValues"\n                    ng-if="!allowMultiple"\n                    ng-options="value as value for value in hourValues">\n            </select>\n        </div>\n        <span style="vertical-align: top;" ng-show="myFrequency.base >= 3"> : </span>\n        \x3c!-- If Multiple is Enabled --\x3e\n        <div ng-show="myFrequency.base >= 2" class="cron-select-wrap">\n            <select ng-disabled="disablechange" class="cron-select minute-value"\n                    ng-model="myFrequency.minuteValues"\n                    ng-if="allowMultiple" multiple\n                    ng-options="value as value for value in minuteValues">\n            </select>\n            \x3c!-- If Multiple is not Enabled --\x3e\n            <select ng-disabled="disablechange" class="cron-select minute-value"\n                    ng-model="myFrequency.minuteValues"\n                    ng-if="!allowMultiple"\n                    ng-options="value as value for value in minuteValues">\n            </select>\n        </div>\n        <span style="vertical-align: top;" ng-show="myFrequency.base == 2"> past the hour</span>\n    </div>\n</div>')}]),angular.module("angular-cron-jobs",["templates-angularcronjobs"]),angular.module("angular-cron-jobs").directive("cronSelection",["cronService","baseFrequency",function(cronService,baseFrequency){return{restrict:"EA",replace:!0,transclude:!0,require:"ngModel",scope:{ngModel:"=",config:"=",myFrequency:"=?frequency",form:"=",disablechange:"="},templateUrl:function(element,attributes){return attributes.template||"cronselection.html"},link:function($scope,$el,$attr,$ngModel){var modelChanged=!1;if($scope.baseFrequency=baseFrequency,$scope.frequency=[{value:1,label:"Minute"},{value:2,label:"Hour"},{value:3,label:"Day"},{value:4,label:"Week"},{value:5,label:"Month"},{value:6,label:"Year"}],$scope.$watch("ngModel",(function(newValue){angular.isDefined(newValue)&&newValue?(modelChanged=!0,$scope.myFrequency=cronService.fromCron(newValue,$scope.allowMultiple,$scope.cronStyle)):""===newValue&&($scope.myFrequency=void 0)})),"object"==typeof $scope.config&&!$scope.config.length){if("object"==typeof $scope.config.options){var optionsKeyArray=Object.keys($scope.config.options);for(var i in optionsKeyArray){var currentKey=optionsKeyArray[i].replace(/^allow/,""),originalKey=optionsKeyArray[i];if(!$scope.config.options[originalKey])for(var b in $scope.frequency)$scope.frequency[b].label===currentKey&&$scope.frequency.splice(b,1)}}angular.isDefined($scope.config.allowMultiple)?$scope.allowMultiple=$scope.config.allowMultiple:$scope.allowMultiple=!1,angular.isDefined($scope.config.quartz)&&$scope.config.quartz?$scope.cronStyle="quartz":$scope.cronStyle="default"}$scope.minuteValues=[0,5,10,15,20,25,30,35,40,45,50,55],$scope.hourValues=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],$scope.dayOfMonthValues=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],$scope.dayValues=[0,1,2,3,4,5,6],$scope.monthValues=[1,2,3,4,5,6,7,8,9,10,11,12],"quartz"===$scope.cronStyle&&($scope.dayValues=[1,2,3,4,5,6,7]),$scope.$watch("myFrequency",(function(n,o){if(void 0!==n){!n||!n.base||o&&n.base===o.base||modelChanged?n&&n.base&&o&&o.base&&(modelChanged=!1):function(freq){freq.base=parseInt(freq.base),freq.base>=baseFrequency.hour&&(freq.minuteValues=$scope.minuteValues[0]);freq.base>=baseFrequency.day&&(freq.hourValues=$scope.hourValues[0]);freq.base===baseFrequency.week&&(freq.dayValues=$scope.dayValues[0]);freq.base>=baseFrequency.month&&(freq.dayOfMonthValues=$scope.dayOfMonthValues[0]);freq.base===baseFrequency.year&&(freq.monthValues=$scope.monthValues[0])}(n);var newVal=cronService.setCron(n,$scope.cronStyle);$ngModel.$setViewValue(newVal)}}),!0)}}}]).filter("cronNumeral",(function(){return function(input){switch(input){case 1:return"1st";case 2:return"2nd";case 3:return"3rd";case 21:return"21st";case 22:return"22nd";case 23:return"23rd";case 31:return"31st";case null:return null;default:return input+"th"}}})).filter("cronMonthName",(function(){return function(input){var months={1:"January",2:"February",3:"March",4:"April",5:"May",6:"June",7:"July",8:"August",9:"September",10:"October",11:"November",12:"December"};return null!==input&&angular.isDefined(months[input])?months[input]:null}})).filter("cronDayName",(function(){return function(input,cronType){var days;return days="quartz"===cronType?{1:"Sunday",2:"Monday",3:"Tuesday",4:"Wednesday",5:"Thursday",6:"Friday",7:"Saturday"}:{0:"Sunday",1:"Monday",2:"Tuesday",3:"Wednesday",4:"Thursday",5:"Friday",6:"Saturday"},null!==input&&angular.isDefined(days[input])?days[input]:null}})).directive("ngMultiple",(function(){return{restrict:"A",scope:{ngMultiple:"="},link:function(scope,element){scope.$watch("ngMultiple",(function(newValue){newValue?element.attr("multiple","multiple"):element.removeAttr("multiple")}))}}})),angular.module("angular-cron-jobs").value("baseFrequency",{minute:1,hour:2,day:3,week:4,month:5,year:6}).factory("cronService",["baseFrequency",function(baseFrequency){var service={setCron:function(n,cronType){return"quartz"===cronType?this.setQuartzCron(n):this.setDefaultCron(n)},setQuartzCron:function(n){var cron=["0","*","*","*","*","?"];return n&&n.base&&n.base>=baseFrequency.hour&&(cron[1]=void 0!==n.minuteValues?n.minuteValues:"0"),n&&n.base&&n.base>=baseFrequency.day&&(cron[2]=void 0!==n.hourValues?n.hourValues:"*"),n&&n.base&&n.base===baseFrequency.week&&(cron[3]="?",cron[5]=n.dayValues),n&&n.base&&n.base>=baseFrequency.month&&(cron[3]=void 0!==n.dayOfMonthValues?n.dayOfMonthValues:"?"),n&&n.base&&n.base===baseFrequency.year&&(cron[4]=void 0!==n.monthValues?n.monthValues:"*"),cron.join(" ")},setDefaultCron:function(n){var cron=["*","*","*","*","*"];return n&&n.base&&n.base>=baseFrequency.hour&&(angular.isArray(n.minuteValues)&&0==n.minuteValues.length?cron[0]="*":cron[0]=void 0!==n.minuteValues?n.minuteValues:"*"),n&&n.base&&n.base>=baseFrequency.day&&(angular.isArray(n.hourValues)&&0==n.hourValues.length?cron[1]="*":cron[1]=void 0!==n.hourValues?n.hourValues:"*"),n&&n.base&&n.base===baseFrequency.week&&(angular.isArray(n.dayValues)&&0==n.dayValues.length?cron[4]="*":cron[4]=void 0!==n.dayValues?n.dayValues:"*"),n&&n.base&&n.base>=baseFrequency.month&&(angular.isArray(n.dayOfMonthValues)&&0==n.dayOfMonthValues.length?cron[2]="*":cron[2]=void 0!==n.dayOfMonthValues?n.dayOfMonthValues:"*"),n&&n.base&&n.base===baseFrequency.year&&(angular.isArray(n.monthValues)&&0==n.monthValues.length?cron[3]="*":cron[3]=void 0!==n.monthValues?n.monthValues:"*"),cron.join(" ")},fromCron:function(value,allowMultiple,cronType){return"quartz"===cronType?this.fromQuartzCron(value,allowMultiple):this.fromDefaultCron(value,allowMultiple)},fromDefaultCron:function(value,allowMultiple){var cron=value.replace(/\s+/g," ").split(" "),frequency={base:"1"},tempArray=[];if("*"===cron[0]&&"*"===cron[1]&&"*"===cron[2]&&"*"===cron[3]&&"*"===cron[4]?frequency.base=baseFrequency.minute:"*"===cron[1]&&"*"===cron[2]&&"*"===cron[3]&&"*"===cron[4]?frequency.base=baseFrequency.hour:"*"===cron[2]&&"*"===cron[3]&&"*"===cron[4]?frequency.base=baseFrequency.day:"*"===cron[2]&&"*"===cron[3]?frequency.base=baseFrequency.week:"*"===cron[3]&&"*"===cron[4]?frequency.base=baseFrequency.month:"*"===cron[4]&&(frequency.base=baseFrequency.year),"*"!==cron[0])if(allowMultiple){tempArray=cron[0].split(",");for(var i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.minuteValues=tempArray}else frequency.minuteValues=parseInt(cron[0]);if("*"!==cron[1])if(allowMultiple){tempArray=cron[1].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.hourValues=tempArray}else frequency.hourValues=parseInt(cron[1]);if("*"!==cron[2])if(allowMultiple){tempArray=cron[2].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.dayOfMonthValues=tempArray}else frequency.dayOfMonthValues=parseInt(cron[2]);if("*"!==cron[3])if(allowMultiple){tempArray=cron[3].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.monthValues=tempArray}else frequency.monthValues=parseInt(cron[3]);if("*"!==cron[4])if(allowMultiple){tempArray=cron[4].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.dayValues=tempArray}else frequency.dayValues=parseInt(cron[4]);return frequency},fromQuartzCron:function(value,allowMultiple){var cron=value.replace(/\s+/g," ").split(" "),frequency={base:"1"},tempArray=[];if("*"===cron[1]&&"*"===cron[2]&&"*"===cron[3]&&"*"===cron[4]&&"?"===cron[5]?frequency.base=1:"*"===cron[2]&&"*"===cron[3]&&"*"===cron[4]&&"?"===cron[5]?frequency.base=2:"*"===cron[3]&&"*"===cron[4]&&"?"===cron[5]?frequency.base=3:"?"===cron[3]?frequency.base=4:"*"===cron[4]&&"?"===cron[5]?frequency.base=5:"?"===cron[5]&&(frequency.base=6),"*"!==cron[1])if(allowMultiple){tempArray=cron[1].split(",");for(var i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.minuteValues=tempArray}else frequency.minuteValues=parseInt(cron[1]);if("*"!==cron[2])if(allowMultiple){tempArray=cron[2].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.hourValues=tempArray}else frequency.hourValues=parseInt(cron[2]);if("*"!==cron[3]&&"?"!==cron[3])if(allowMultiple){tempArray=cron[3].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.dayOfMonthValues=tempArray}else frequency.dayOfMonthValues=parseInt(cron[3]);if("*"!==cron[4])if(allowMultiple){tempArray=cron[4].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.monthValues=tempArray}else frequency.monthValues=parseInt(cron[4]);if("*"!==cron[5]&&"?"!==cron[5])if(allowMultiple){tempArray=cron[5].split(",");for(i=0;i<tempArray.length;i++)tempArray[i]=+tempArray[i];frequency.dayValues=tempArray}else frequency.dayValues=parseInt(cron[5]);return frequency}};return service}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
