/**
   * angular-bootstrap-confirm - Displays a bootstrap confirmation popover when clicking the given element.
   * @version v2.5.0
   * @link https://github.com/mattlewis92/angular-bootstrap-confirm
   * @license MIT
   */
!function(root,factory){"object"==typeof exports&&"object"==typeof module?module.exports=factory(require("angular"),require("angular-sanitize")):"function"==typeof define&&define.amd?define(["angular","angular-sanitize"],factory):"object"==typeof exports?exports.angularBootstrapConfirmModuleName=factory(require("angular"),require("angular-sanitize")):root.angularBootstrapConfirmModuleName=factory(root.angular,root["angular-sanitize"])}(this,(function(__WEBPACK_EXTERNAL_MODULE_1__,__WEBPACK_EXTERNAL_MODULE_3__){return function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";var angular=__webpack_require__(1),defaultPopoverTemplate=__webpack_require__(2);__webpack_require__(3),__webpack_require__(1);module.exports=angular.module("mwl.confirm",["ngSanitize","ui.bootstrap.position"]).run(["$templateCache",function($templateCache){$templateCache.put("angular-bootstrap-confirm.html",defaultPopoverTemplate)}]).controller("PopoverConfirmCtrl",["$scope","$rootScope","$element","$attrs","$compile","$document","$window","$timeout","$injector","$templateRequest","$parse","$log","$animate","confirmationPopoverDefaults",function($scope,$rootScope,$element,$attrs,$compile,$document,$window,$timeout,$injector,$templateRequest,$parse,$log,$animate,confirmationPopoverDefaults){var vm=this;vm.defaults=confirmationPopoverDefaults,vm.$attrs=$attrs;var positionServiceName=$injector.has("$uibPosition")?"$uibPosition":"$position",positionService=$injector.get(positionServiceName),templateUrl=$attrs.templateUrl||confirmationPopoverDefaults.templateUrl,popoverScope=$rootScope.$new(!0),animation=vm.animation="true"===$attrs.animation||confirmationPopoverDefaults.animation;function assignOuterScopeValue(attributeName,value){var scopeName=$attrs[attributeName];angular.isDefined(scopeName)&&($parse(scopeName).assign?$parse(scopeName).assign($scope,value):$log.warn("Could not set value of "+attributeName+" to "+value+". This is normally because the value is not a variable."))}function evaluateOuterScopeValue(scopeName,defaultValue,locals){return angular.isDefined(scopeName)?$parse(scopeName)($scope,locals):defaultValue}popoverScope.vm=vm;var popoverLoaded=$templateRequest(templateUrl).then((function(template){var popover=angular.element(template);return popover.css("display","none"),$compile(popover)(popoverScope),$document.find("body").append(popover),popover}));function positionPopover(){popoverLoaded.then((function(popover){var position=positionService.positionElements($element,popover,$attrs.placement||vm.defaults.placement,!0);position.top+="px",position.left+="px",popover.css(position)}))}function showPopover(){vm.isVisible||evaluateOuterScopeValue($attrs.isDisabled,!1)||popoverLoaded.then((function(popover){var buttonToFocus;popover.css({display:"block"}),animation&&$animate.addClass(popover,"in"),positionPopover(),(buttonToFocus=$attrs.focusButton||vm.defaults.focusButton)&&popoverLoaded.then((function(popover){var targetButtonClass=buttonToFocus+"-button";popover[0].getElementsByClassName(targetButtonClass)[0].focus()})),vm.isVisible=!0,assignOuterScopeValue("isOpen",!0)}))}function hidePopover(){vm.isVisible&&popoverLoaded.then((function(popover){animation&&$animate.removeClass(popover,"in"),popover.css({display:"none"}),vm.isVisible=!1,assignOuterScopeValue("isOpen",!1)}))}function togglePopover(){vm.isVisible?hidePopover():showPopover()}function documentClick(event){popoverLoaded.then((function(popover){!vm.isVisible||popover[0].contains(event.target)||$element[0].contains(event.target)||hidePopover()}))}vm.isVisible=!1,vm.showPopover=showPopover,vm.hidePopover=hidePopover,vm.togglePopover=togglePopover,vm.onConfirm=function(callbackLocals){evaluateOuterScopeValue($attrs.onConfirm,null,callbackLocals)},vm.onCancel=function(callbackLocals){evaluateOuterScopeValue($attrs.onCancel,null,callbackLocals)},$scope.$watch($attrs.isOpen,(function(newIsOpenValue){$timeout((function(){newIsOpenValue?showPopover():hidePopover()}))})),$element.bind("click",togglePopover),$window.addEventListener("resize",positionPopover),$document.bind("click",documentClick),$document.bind("touchend",documentClick),$scope.$on("$destroy",(function(){popoverLoaded.then((function(popover){popover.remove(),$element.unbind("click",togglePopover),$window.removeEventListener("resize",positionPopover),$document.unbind("click",documentClick),$document.unbind("touchend",documentClick),popoverScope.$destroy()}))}))}]).directive("mwlConfirm",(function(){return{restrict:"A",controller:"PopoverConfirmCtrl"}})).value("confirmationPopoverDefaults",{confirmText:"Confirm",cancelText:"Cancel",confirmButtonType:"success",cancelButtonType:"default",placement:"top",focusButton:null,templateUrl:"angular-bootstrap-confirm.html",hideConfirmButton:!1,hideCancelButton:!1,animation:!1}).name},function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_1__},function(module,exports){module.exports='<div\n  class="popover"\n  ng-class="[vm.$attrs.placement || vm.defaults.placement, \'popover-\' + (vm.$attrs.placement || vm.defaults.placement), vm.$attrs.popoverClass || vm.defaults.popoverClass, {fade: vm.animation}]">\n  <div class="popover-arrow arrow"></div>\n  <h3 class="popover-title" ng-bind-html="vm.$attrs.title"></h3>\n  <div class="popover-content">\n    <p ng-bind-html="vm.$attrs.message"></p>\n    <div class="row">\n      <div\n        class="col-xs-6"\n        ng-if="!vm.$attrs.hideConfirmButton && !vm.defaults.hideConfirmButton"\n        ng-class="{\'col-xs-offset-3\': vm.$attrs.hideCancelButton || vm.defaults.hideCancelButton}">\n        <button\n          class="btn btn-block confirm-button"\n          ng-class="\'btn-\' + (vm.$attrs.confirmButtonType || vm.defaults.confirmButtonType)"\n          ng-click="vm.onConfirm(); vm.hidePopover()"\n          ng-bind-html="vm.$attrs.confirmText || vm.defaults.confirmText">\n        </button>\n      </div>\n      <div\n        class="col-xs-6"\n        ng-if="!vm.$attrs.hideCancelButton && !vm.defaults.hideCancelButton"\n        ng-class="{\'col-xs-offset-3\': vm.$attrs.hideConfirmButton || vm.defaults.hideConfirmButton}">\n        <button\n          class="btn btn-block cancel-button"\n          ng-class="\'btn-\' + (vm.$attrs.cancelButtonType || vm.defaults.cancelButtonType)"\n          ng-click="vm.onCancel(); vm.hidePopover()"\n          ng-bind-html="vm.$attrs.cancelText || vm.defaults.cancelText">\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n'},function(module,exports){module.exports=__WEBPACK_EXTERNAL_MODULE_3__}])}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
