/*!
 * @author Thomas <thansen@solire.fr>
 * @licence CC BY-NC 4.0 http://creativecommons.org/licenses/by-nc/4.0/
 *
 * A light filter column pluggin for jquery.dataTables#1.10
 */
!function(window,document){var factory=function($,dataTable){"use strict";var Column=function(dataTable,index,dataTableColumn,options){var defaultOptions,self=this;console.log(dataTableColumn.visible()),defaultOptions=options.type in ColumnFilter.filter?$.extend({},ColumnFilter.filter[options.type]):{},self.options=$.extend({},defaultOptions,options),$.each(["dom","bindEvents","request"],(function(ii,method){method in self.options&&(self[method]=self.options[method])})),self.dataTable=dataTable,self.dataTableColumn=dataTableColumn,self.index=index},ColumnFilter=function(dataTable,options){this.columns=[],this.dataTable=null,this.init(dataTable,options)};return Column.prototype={dom:function(th){},bindEvents:function(){},request:function(){},search:function(){this.dataTableColumn.search(this.request(),!0).draw()}},ColumnFilter.prototype={init:function(dataTable,options){var tr,self=this;self.dataTable=dataTable,tr=$("<tr>").appendTo(self.dataTable.table().header()),self.dataTable.columns().eq(0).each((function(index){var columnOptions,column,th,className=self.dataTable.column(index).header().className,never=className.match(/\bnever\b/),none=className.match(/\bnone\b/);(never||none)&&"responsive"in self.dataTable||(columnOptions=index in options?options[index]:{},column=new Column(self.dataTable,index,self.dataTable.column(index),columnOptions),th=$("<th>").appendTo(tr),self.columns.push(column),1==column.options.hidden&&$("th",tr).eq(column.index).hide(),column.dom(th),column.bindEvents())})),$(self.dataTable.table().node()).on("column-visibility.dt",(function(e,settings,column,state){state?$("th",tr).eq(column).show():$("th",tr).eq(column).hide()}))},addFilter:function(name,filter){ColumnFilter.filter[name]=filter}},ColumnFilter.default={type:"text"},ColumnFilter.filter={text:{dom:function(th){return this.elements=$("<input>",{type:"text"}).appendTo(th),void 0!==this.options.width?this.elements.css("width",this.options.width):this.elements.css("width","100%"),this.elements},bindEvents:function(){var self=this,time=200,timeOutId=0;"time"in self.options&&(time=self.options.time),self.elements.keyup((function(){clearTimeout(timeOutId),timeOutId=window.setTimeout((function(){self.search()}),time)}))},request:function(){return this.elements.val()}},select:{dom:function(th){var select;return(select=$("<select>").append("<option></option>")).addClass(this.options.cssClass),$.each(this.options.values,(function(ii,value){$("<option>").val(value.value).text(value.label).appendTo(select)})),this.elements=select.appendTo(th),this.options.defaultValue&&(this.elements[0].value=this.options.defaultValue,this.search()),void 0!==this.options.width?this.elements.css("width",this.options.width):this.elements.css("width","100%"),this.elements},bindEvents:function(){var self=this;self.elements.on("change",(function(){self.search()}))},request:function(){return"^"+this.elements.val()}},dateRange:{separator:"~",dom:function(th){return this.elements=$("<input>",{type:"text"}).add($("<input>",{type:"text"})).appendTo(th),void 0!==this.options.width?this.elements.css("width",this.options.width):this.elements.css("width","50%"),this.elements},bindEvents:function(){var self=this;self.elements.change((function(){self.search()}))},request:function(){var request=[];return this.elements.each((function(){request.push($(this).val())})),request.join(this.options.separator)}}},$.fn.dataTable.ColumnFilter=ColumnFilter,$.fn.DataTable.ColumnFilter=ColumnFilter,ColumnFilter};"function"==typeof define&&define.amd?define(["jquery","datatables"],factory):"object"==typeof exports?factory(require("jquery"),require("datatables")):jQuery&&!jQuery.fn.dataTable.ColumnFilter&&factory(jQuery,jQuery.fn.dataTable)}(window,document);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
