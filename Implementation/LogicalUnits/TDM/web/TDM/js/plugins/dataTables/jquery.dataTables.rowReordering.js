/*!
 * File:        jquery.dataTables.rowReordering.js
 * Version:     1.2.3 / Datatables 1.10 hack
 * Author:      Jovan Popovic
 *
 * Copyright 2013 Jovan Popovic, all rights reserved.
 *
 * This source file is free software, under either the GPL v2 license or a
 * BSD style license, as supplied with this software.
 */
!function($){"use strict";($.fn.rowReordering=function(options){function fnCancelSorting(oTable,tbody,properties,iLogLevel,sMessage){tbody.sortable("cancel"),iLogLevel<=properties.iLogLevel&&(null!=sMessage?properties.fnAlert(sMessage,""):properties.fnAlert("Row cannot be moved","")),properties.fnEndProcessingMode(oTable)}function fnMoveRows(oTable,sSelector,iCurrentPosition,iNewPosition,sDirection,id,sGroup){var iStart=iCurrentPosition,iEnd=iNewPosition;"back"==sDirection&&(iStart=iNewPosition,iEnd=iCurrentPosition),$(oTable.fnGetNodes()).each((function(){if(""==sGroup||$(this).attr("data-group")==sGroup){var tr=this,iRowPosition=parseInt(oTable.fnGetData(tr,properties.iIndexColumn),10);iStart<=iRowPosition&&iRowPosition<=iEnd&&(tr.id==id?oTable.fnUpdate(iNewPosition,oTable.fnGetPosition(tr),properties.iIndexColumn,!1):"back"==sDirection?oTable.fnUpdate(iRowPosition+1,oTable.fnGetPosition(tr),properties.iIndexColumn,!1):oTable.fnUpdate(iRowPosition-1,oTable.fnGetPosition(tr),properties.iIndexColumn,!1))}}));var oSettings=oTable.fnSettings();if(!1===oSettings.oFeatures.bServerSide){var before=oSettings._iDisplayStart;oSettings.oApi._fnReDraw(oSettings),oSettings._iDisplayStart=before,oSettings.oApi._fnCalculateEnd(oSettings)}oSettings.oApi._fnDraw(oSettings)}var tables,defaults={iIndexColumn:0,iStartPosition:1,sURL:null,sRequestType:"POST",iGroupingLevel:0,fnAlert:function(message,type){alert(message)},fnSuccess:jQuery.noop,iLogLevel:1,sDataGroupAttribute:"data-group",fnStartProcessingMode:function(oTable){oTable.fnSettings().oFeatures.bProcessing&&$(".dataTables_processing").css("visibility","visible")},fnEndProcessingMode:function(oTable){oTable.fnSettings().oFeatures.bProcessing&&$(".dataTables_processing").css("visibility","hidden")},fnUpdateAjaxRequest:jQuery.noop},properties=$.extend(defaults,options),tableFixHelper=function(e,tr){var $originals=tr.children(),$helper=tr.clone();return $helper.children().each((function(index){$(this).width($originals.eq(index).width())})),$helper};return tables=this instanceof jQuery?this:this.context,$.each(tables,(function(){var oTable,aaSortingFixed=null==(oTable=void 0!==this.nodeType?$(this).dataTable():$(this.nTable).dataTable()).fnSettings().aaSortingFixed?new Array:oTable.fnSettings().aaSortingFixed;aaSortingFixed.push([properties.iIndexColumn,"asc"]),oTable.fnSettings().aaSortingFixed=aaSortingFixed;for(var i=0;i<oTable.fnSettings().aoColumns.length;i++)oTable.fnSettings().aoColumns[i].bSortable=!1;oTable.fnDraw(),$("tbody",oTable).disableSelection().sortable({cursor:"move",helper:tableFixHelper,update:function(event,ui){var $dataTable=oTable,tbody=$(this),sSelector="tbody tr",sGroup="";if(properties.bGroupingUsed){if(null==(sGroup=$(ui.item).attr(properties.sDataGroupAttribute))||null==sGroup)return void fnCancelSorting($dataTable,tbody,properties,3,"Grouping row cannot be moved");sSelector="tbody tr["+properties.sDataGroupAttribute+" ='"+sGroup+"']"}var tr=$(ui.item.context),oState=function(oTable,sSelector,tr){var iCurrentPosition=parseInt(oTable.fnGetData(tr[0],properties.iIndexColumn),10),iNewPosition=-1,trPrevious=tr.prev(sSelector);if(trPrevious.length>0)(iNewPosition=parseInt(oTable.fnGetData(trPrevious[0],properties.iIndexColumn),10))<iCurrentPosition&&(iNewPosition+=1);else{var trNext=tr.next(sSelector);trNext.length>0&&(iNewPosition=parseInt(oTable.fnGetData(trNext[0],properties.iIndexColumn),10))>iCurrentPosition&&(iNewPosition-=1)}return{sDirection:iNewPosition<iCurrentPosition?"back":"forward",iCurrentPosition:iCurrentPosition,iNewPosition:iNewPosition}}($dataTable,sSelector,tr);if(-1!=oState.iNewPosition){var sRequestData={id:ui.item.context.id,fromPosition:oState.iCurrentPosition,toPosition:oState.iNewPosition,direction:oState.sDirection,group:sGroup,data:properties.sData};if(null!=properties.sURL){properties.fnStartProcessingMode($dataTable);var oAjaxRequest={url:properties.sURL,type:properties.sRequestType,data:sRequestData,success:function(data){properties.fnSuccess(data),properties.avoidMovingRows||fnMoveRows($dataTable,0,oState.iCurrentPosition,oState.iNewPosition,oState.sDirection,ui.item.context.id,sGroup),properties.fnEndProcessingMode($dataTable),properties.fnUpdateCallback&&"function"==typeof properties.fnUpdateCallback&&properties.fnUpdateCallback(sRequestData)},error:function(jqXHR){var err=""!=jqXHR.responseText?jqXHR.responseText:jqXHR.statusText;fnCancelSorting($dataTable,tbody,properties,1,err)}};properties.fnUpdateAjaxRequest(oAjaxRequest,properties,$dataTable),$.ajax(oAjaxRequest)}else fnMoveRows($dataTable,0,oState.iCurrentPosition,oState.iNewPosition,oState.sDirection,ui.item.context.id,sGroup),properties.fnUpdateCallback&&"function"==typeof properties.fnUpdateCallback&&properties.fnUpdateCallback(sRequestData)}else fnCancelSorting($dataTable,tbody,properties,2)}})})),this},$.fn.dataTable.rowReordering=$.fn.rowReordering,$.fn.DataTable.rowReordering=$.fn.rowReordering,$.fn.dataTable.Api)&&$.fn.dataTable.Api.register("rowReordering()",$.fn.rowReordering)}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
