"use strict";!function(angular){(Module=angular.module("datePicker",[])).constant("datePickerConfig",{template:"templates/datepicker.html",view:"month",views:["year","month","date","hours","minutes"],momentNames:{year:"year",month:"month",date:"day",hours:"hours",minutes:"minutes"},viewConfig:{year:["years","isSameYear"],month:["months","isSameMonth"],hours:["hours","isSameHour"],minutes:["minutes","isSameMinutes"]},step:5,firstDay:0}),Module.filter("mFormat",(function(){return function(m,format,tz){if(m)return moment.isMoment(m)?tz?moment.tz(m,tz).format(format):m.format(format):moment(m).format(format)}})),Module.directive("datePicker",["datePickerConfig","datePickerUtils",function(datePickerConfig,datePickerUtils){return{require:"?ngModel",template:'<div ng-include="template"></div>',scope:{model:"=datePicker",after:"=?",before:"=?"},link:function(scope,element,attrs,ngModel){function prepareViews(){scope.views=datePickerConfig.views.concat(),scope.view=attrs.view||datePickerConfig.view,scope.views=scope.views.slice(scope.views.indexOf(attrs.maxView||"year"),scope.views.indexOf(attrs.minView||"minutes")+1),1!==scope.views.length&&-1!==scope.views.indexOf(scope.view)||(scope.view=scope.views[0])}function getDate(name){return datePickerUtils.getDate(scope,attrs,name)}var arrowClick=!1,tz=scope.tz=attrs.timezone,createMoment=datePickerUtils.createMoment,eventIsForPicker=datePickerUtils.eventIsForPicker,step=parseInt(attrs.step||datePickerConfig.step,10),partial=!!attrs.partial,minDate=getDate("minDate"),maxDate=getDate("maxDate"),pickerID=element[0].id,now=scope.now=createMoment(),selected=scope.date=createMoment(scope.model||now),autoclose="true"===attrs.autoClose,firstDay=attrs.firstDay&&attrs.firstDay>=0&&attrs.firstDay<=6?parseInt(attrs.firstDay,10):datePickerConfig.firstDay;function setDate(date){date&&(scope.model=date,ngModel&&ngModel.$setViewValue(date)),scope.$emit("setDate",scope.model,scope.view),scope.callbackOnSetDate&&scope.callbackOnSetDate(attrs.datePicker,scope.date)}function update(){var view=scope.view;datePickerUtils.setParams(tz,firstDay),scope.model&&!arrowClick&&(scope.date=createMoment(scope.model),arrowClick=!1);var date=scope.date;switch(view){case"year":scope.years=datePickerUtils.getVisibleYears(date);break;case"month":scope.months=datePickerUtils.getVisibleMonths(date);break;case"date":scope.weekdays=scope.weekdays||datePickerUtils.getDaysOfWeek(),scope.weeks=datePickerUtils.getVisibleWeeks(date);break;case"hours":scope.hours=datePickerUtils.getVisibleHours(date);break;case"minutes":scope.minutes=datePickerUtils.getVisibleMinutes(date,step)}prepareViewData()}function prepareViewData(){var i,j,view=scope.view,date=scope.date,classes=[],classList="";if(datePickerUtils.setParams(tz,firstDay),"date"===view){var week,weeks=scope.weeks;for(i=0;i<weeks.length;i++)for(week=weeks[i],classes.push([]),j=0;j<week.length;j++)classList="",datePickerUtils.isSameDay(date,week[j])&&(classList+="active"),isNow(week[j],view)&&(classList+=" now"),week[j].month()===date.month()&&inValidRange(week[j])||(classList+=" disabled"),classes[i].push(classList)}else{var params=datePickerConfig.viewConfig[view],dates=scope[params[0]],compareFunc=params[1];for(i=0;i<dates.length;i++)classList="",datePickerUtils[compareFunc](date,dates[i])&&(classList+="active"),isNow(dates[i],view)&&(classList+=" now"),inValidRange(dates[i])||(classList+=" disabled"),classes.push(classList)}scope.classes=classes}function inValidRange(date){var valid=!0;return minDate&&minDate.isAfter(date)&&(valid=isSame(minDate,date)),maxDate&&maxDate.isBefore(date)&&(valid&=isSame(maxDate,date)),valid}function isSame(date1,date2){return!!date1.isSame(date2,datePickerConfig.momentNames[scope.view])}function clipDate(date){return minDate&&minDate.isAfter(date)?minDate:maxDate&&maxDate.isBefore(date)?maxDate:date}function isNow(date,view){var is=!0;switch(view){case"minutes":is&=~~(now.minutes()/step)==~~(date.minutes()/step);case"hours":is&=now.hours()===date.hours();case"date":is&=now.date()===date.date();case"month":is&=now.month()===date.month();case"year":is&=now.year()===date.year()}return is}datePickerUtils.setParams(tz,firstDay),scope.model||selected.minute(Math.ceil(selected.minute()/step)*step).second(0),scope.template=attrs.template||datePickerConfig.template,scope.watchDirectChanges=void 0!==attrs.watchDirectChanges,scope.callbackOnSetDate=attrs.dateChange?datePickerUtils.findFunction(scope,attrs.dateChange):void 0,prepareViews(),scope.setView=function(nextView){-1!==scope.views.indexOf(nextView)&&(scope.view=nextView)},scope.selectDate=function(date){if(attrs.disabled)return!1;if(isSame(scope.date,date)&&(date=scope.date),!(date=clipDate(date)))return!1;scope.date=date;var nextView=scope.views[scope.views.indexOf(scope.view)+1];(!nextView||partial||scope.model)&&setDate(date),nextView?(setDate(date),scope.setView(nextView)):autoclose?(element.addClass("hidden"),scope.$emit("hidePicker")):prepareViewData()},scope.$watch((function(){return"date"!==scope.view?scope.view:scope.date?scope.date.month():null}),update),scope.watchDirectChanges&&scope.$watch("model",(function(){arrowClick=!1,update()})),scope.next=function(delta){var date=moment(scope.date);switch(delta=delta||1,scope.view){case"year":case"month":date.year(date.year()+delta);break;case"date":date.month(date.month()+delta);break;case"hours":case"minutes":date.hours(date.hours()+delta)}(date=clipDate(date))&&(scope.date=date,setDate(date),arrowClick=!0,update())},scope.prev=function(delta){return scope.next(-delta||-1)},pickerID&&scope.$on("pickerUpdate",(function(event,pickerIDs,data){if(eventIsForPicker(pickerIDs,pickerID)){var updateViews=!1,updateViewData=!1;angular.isDefined(data.minDate)&&(minDate=!!data.minDate&&data.minDate,updateViewData=!0),angular.isDefined(data.maxDate)&&(maxDate=!!data.maxDate&&data.maxDate,updateViewData=!0),angular.isDefined(data.minView)&&(attrs.minView=data.minView,updateViews=!0),angular.isDefined(data.maxView)&&(attrs.maxView=data.maxView,updateViews=!0),attrs.view=data.view||attrs.view,updateViews&&prepareViews(),updateViewData&&update()}}))}}}]),angular.module("datePicker").factory("datePickerUtils",(function(){var tz,firstDay,createNewDate=function(year,month,day,hour,minute){var utc=Date.UTC(0|year,0|month,0|day,0|hour,0|minute);return tz?moment.tz(utc,tz):moment(utc)};return{getVisibleMinutes:function(m,step){var pushedDate,minute,year=m.year(),month=m.month(),day=m.date(),hour=m.hours(),offset=m.utcOffset()/60,minutes=[];for(minute=0;minute<60;minute+=step)pushedDate=createNewDate(year,month,day,hour-offset,minute),minutes.push(pushedDate);return minutes},getVisibleWeeks:function(m){var startYear=(m=moment(m)).year(),startMonth=m.month();m.date(1);var day=m.day();m.date(firstDay-(day+(firstDay>=day?6:-1)));for(var weeks=[];weeks.length<6&&!(m.year()===startYear&&m.month()>startMonth);)weeks.push(this.getDaysOfWeek(m)),m.add(7,"d");return weeks},getVisibleYears:function(d){var m=moment(d),year=m.year();m.year(year-year%10),year=m.year();for(var pushedDate,actualOffset,offset=m.utcOffset()/60,years=[],i=0;i<12;i++)(actualOffset=(pushedDate=createNewDate(year,0,1,0-offset)).utcOffset()/60)!==offset&&(pushedDate=createNewDate(year,0,1,0-actualOffset),offset=actualOffset),years.push(pushedDate),year++;return years},getDaysOfWeek:function(m){for(var pushedDate,actualOffset,year=(m=m||(tz?moment.tz(tz).day(firstDay):moment().day(firstDay))).year(),month=m.month(),day=m.date(),days=[],offset=m.utcOffset()/60,i=0;i<7;i++)(actualOffset=(pushedDate=createNewDate(year,month,day,0-offset,0)).utcOffset()/60)!==offset&&(pushedDate=createNewDate(year,month,day,0-actualOffset,0)),days.push(pushedDate),day++;return days},getVisibleMonths:function(m){for(var pushedDate,actualOffset,year=m.year(),offset=m.utcOffset()/60,months=[],month=0;month<12;month++)(actualOffset=(pushedDate=createNewDate(year,month,1,0-offset,0)).utcOffset()/60)!==offset&&(pushedDate=createNewDate(year,month,1,0-actualOffset,0)),months.push(pushedDate);return months},getVisibleHours:function(m){var hour,pushedDate,actualOffset,year=m.year(),month=m.month(),day=m.date(),hours=[],offset=m.utcOffset()/60;for(hour=0;hour<24;hour++)(actualOffset=(pushedDate=createNewDate(year,month,day,hour-offset,0)).utcOffset()/60)!==offset&&(pushedDate=createNewDate(year,month,day,hour-actualOffset,0)),hours.push(pushedDate);return hours},isAfter:function(model,date){return model&&model.unix()>=date.unix()},isBefore:function(model,date){return model.unix()<=date.unix()},isSameYear:function(model,date){return model&&model.year()===date.year()},isSameMonth:function(model,date){return this.isSameYear(model,date)&&model.month()===date.month()},isSameDay:function(model,date){return this.isSameMonth(model,date)&&model.date()===date.date()},isSameHour:function(model,date){return this.isSameDay(model,date)&&model.hours()===date.hours()},isSameMinutes:function(model,date){return this.isSameHour(model,date)&&model.minutes()===date.minutes()},setParams:function(zone,fd){tz=zone,firstDay=fd},scopeSearch:function(scope,name,comparisonFn){var target,i,parentScope=scope,nameArray=name.split("."),j=nameArray.length;do{for(target=parentScope=parentScope.$parent,i=0;i<j;i++)target=target[nameArray[i]];if(target&&comparisonFn(target))return target}while(parentScope.$parent);return!1},findFunction:function(scope,name){return this.scopeSearch(scope,name,(function(target){return angular.isFunction(target)}))},findParam:function(scope,name){return this.scopeSearch(scope,name,(function(){return!0}))},createMoment:function(m){return tz?moment.tz(m,tz):moment.isMoment(m)?moment.unix(m.unix()):moment(m)},getDate:function(scope,attrs,name){var result=!1;return attrs[name]&&((result=this.createMoment(attrs[name])).isValid()||(result=this.findParam(scope,attrs[name]))&&(result=this.createMoment(result))),result},eventIsForPicker:function(targetIDs,pickerID){return angular.isArray(targetIDs)&&targetIDs.indexOf(pickerID)>-1||targetIDs===pickerID}}})),(Module=angular.module("datePicker")).directive("dateRange",["$compile","datePickerUtils","dateTimeConfig",function($compile,datePickerUtils,dateTimeConfig){function getTemplate(attrs,id,model,min,max){return dateTimeConfig.template(angular.extend(attrs,{ngModel:model,minDate:!(!min||!moment.isMoment(min))&&min.format(),maxDate:!(!max||!moment.isMoment(max))&&max.format()}),id)}function randomName(){return"picker"+Math.random().toString().substr(2)}return{scope:{start:"=",end:"="},link:function(scope,element,attrs){var dateChange=null,pickerRangeID=element[0].id,pickerIDs=[randomName(),randomName()],createMoment=datePickerUtils.createMoment,eventIsForPicker=datePickerUtils.eventIsForPicker;scope.dateChange=function(modelName,newDate){dateChange&&dateChange(modelName,newDate)},pickerRangeID&&scope.$on("pickerUpdate",(function(event,targetIDs,data){eventIsForPicker(targetIDs,pickerRangeID)&&scope.$broadcast("pickerUpdate",pickerIDs,data)})),datePickerUtils.setParams(attrs.timezone),scope.start=createMoment(scope.start),scope.end=createMoment(scope.end),scope.$watchGroup(["start","end"],(function(dates){var date;date=dates[0],scope.$broadcast("pickerUpdate",pickerIDs[1],{minDate:date}),function(date){scope.$broadcast("pickerUpdate",pickerIDs[0],{maxDate:date})}(dates[1])})),angular.isDefined(attrs.dateChange)&&(dateChange=datePickerUtils.findFunction(scope,attrs.dateChange)),attrs.onSetDate="dateChange";var template='<div><table class="date-range"><tr><td valign="top">'+getTemplate(attrs,pickerIDs[0],"start",!1,scope.end)+'</td><td valign="top">'+getTemplate(attrs,pickerIDs[1],"end",scope.start,!1)+"</td></tr></table></div>",picker=$compile(template)(scope);element.append(picker)}}}]);var Module;(Module=angular.module("datePicker")).constant("dateTimeConfig",{template:function(attrs,id){return"<div "+(id?'id="'+id+'" ':"")+'date-picker="'+attrs.ngModel+'" '+(attrs.view?'view="'+attrs.view+'" ':"")+(attrs.maxView?'max-view="'+attrs.maxView+'" ':"")+(attrs.maxDate?'max-date="'+attrs.maxDate+'" ':"")+(attrs.autoClose?'auto-close="'+attrs.autoClose+'" ':"")+(attrs.template?'template="'+attrs.template+'" ':"")+(attrs.minView?'min-view="'+attrs.minView+'" ':"")+(attrs.minDate?'min-date="'+attrs.minDate+'" ':"")+(attrs.partial?'partial="'+attrs.partial+'" ':"")+(attrs.step?'step="'+attrs.step+'" ':"")+(attrs.onSetDate?'date-change="'+attrs.onSetDate+'" ':"")+(attrs.ngModel?'ng-model="'+attrs.ngModel+'" ':"")+(attrs.firstDay?'first-day="'+attrs.firstDay+'" ':"")+(attrs.timezone?'timezone="'+attrs.timezone+'" ':"")+'class="date-picker-date-time"></div>'},format:"YYYY-MM-DD HH:mm",views:["date","year","month","hours","minutes"],autoClose:!1,position:"relative"}),Module.directive("dateTimeAppend",(function(){return{link:function(scope,element){element.bind("click",(function(){element.find("input")[0].focus()}))}}})),Module.directive("dateTime",["$compile","$document","$filter","dateTimeConfig","$parse","datePickerUtils",function($compile,$document,$filter,dateTimeConfig,$parse,datePickerUtils){var body=$document.find("body"),dateFilter=$filter("mFormat");return{require:"ngModel",scope:!0,link:function(scope,element,attrs,ngModel){var template,format=attrs.format||dateTimeConfig.format,parentForm=element.inheritedData("$formController"),views=$parse(attrs.views)(scope)||dateTimeConfig.views.concat(),view=attrs.view||views[0],index=views.indexOf(view),dismiss=attrs.autoClose?$parse(attrs.autoClose)(scope):dateTimeConfig.autoClose,picker=null,pickerID=element[0].id,position=attrs.position||dateTimeConfig.position,container=null,minDate=null,minValid=null,maxDate=null,maxValid=null,timezone=attrs.timezone||!1,eventIsForPicker=datePickerUtils.eventIsForPicker,dateChange=null,shownOnce=!1;function setMin(date){minDate=date,attrs.minDate=date?date.format():date,minValid=moment.isMoment(date)}function setMax(date){maxDate=date,attrs.maxDate=date?date.format():date,maxValid=moment.isMoment(date)}function getTemplate(){template=dateTimeConfig.template(attrs)}function clear(){picker&&(picker.remove(),picker=null),container&&(container.remove(),container=null)}-1===index&&views.splice(index,1),views.unshift(view),ngModel.$formatters.push((function(value){return dateFilter(value,format,timezone)})),ngModel.$parsers.unshift((function(viewValue){if(viewValue.length===format.length)return viewValue})),angular.isDefined(attrs.minDate)&&(setMin(datePickerUtils.findParam(scope,attrs.minDate)),ngModel.$validators.min=function(value){return!minValid||moment.isMoment(value)&&(minDate.isSame(value)||minDate.isBefore(value))}),angular.isDefined(attrs.maxDate)&&(setMax(datePickerUtils.findParam(scope,attrs.maxDate)),ngModel.$validators.max=function(value){return!maxValid||moment.isMoment(value)&&(maxDate.isSame(value)||maxDate.isAfter(value))}),angular.isDefined(attrs.dateChange)&&(dateChange=datePickerUtils.findFunction(scope,attrs.dateChange)),pickerID&&scope.$on("pickerUpdate",(function(event,pickerIDs,data){if(eventIsForPicker(pickerIDs,pickerID))if(picker);else{var validateRequired=!1;angular.isDefined(data.minDate)&&(setMin(data.minDate),validateRequired=!0),angular.isDefined(data.maxDate)&&(setMax(data.maxDate),validateRequired=!0),angular.isDefined(data.minView)&&(attrs.minView=data.minView),angular.isDefined(data.maxView)&&(attrs.maxView=data.maxView),attrs.view=data.view||attrs.view,validateRequired&&ngModel.$validate(),angular.isDefined(data.format)&&(format=attrs.format=data.format||dateTimeConfig.format,ngModel.$modelValue=-1),getTemplate()}})),element.bind("focus",(function(){if(!picker){if(picker=$compile(template)(scope),scope.$digest(),shownOnce||(scope.$on("setDate",(function(event,date,view){!function(event){event.stopPropagation(),ngModel.$pristine&&(ngModel.$dirty=!0,ngModel.$pristine=!1,element.removeClass("ng-pristine").addClass("ng-dirty"),parentForm&&parentForm.$setDirty(),ngModel.$render())}(event),dateChange&&dateChange(attrs.ngModel,date),dismiss&&views[views.length-1]===view&&clear()})),scope.$on("hidePicker",(function(){element.triggerHandler("blur")})),scope.$on("$destroy",clear),shownOnce=!0),"absolute"===position){var pos=element[0].getBoundingClientRect(),height=pos.height||element[0].offsetHeight;picker.css({top:pos.top+height+"px",left:pos.left+"px",display:"block",position:position}),body.append(picker)}else{container=angular.element("<div date-picker-wrapper></div>"),element[0].parentElement.insertBefore(container[0],element[0]),container.append(picker);var rectPageBottom=element[0].getBoundingClientRect().bottom,pageHieght=document.body.clientHeight;picker.height()+rectPageBottom>=pageHieght?picker.css({bottom:"0px",display:"block"}):picker.css({top:element[0].offsetHeight+"px",display:"block"})}picker.bind("mousedown",(function(evt){evt.preventDefault()}))}})),element.bind("blur",clear),getTemplate()}}}]),angular.module("datePicker").run(["$templateCache",function($templateCache){$templateCache.put("templates/datepicker.html",'<div ng-switch="view">\r\n  <div ng-switch-when="date">\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th ng-click="prev()">&lsaquo;</th>\r\n        <th colspan="5" class="switch" ng-click="setView(\'month\')" ng-bind="date|mFormat:\'YYYY MMMM\':tz"></th>\r\n        <th ng-click="next()">&rsaquo;</i></th>\r\n      </tr>\r\n      <tr>\r\n        <th ng-repeat="day in weekdays" style="overflow: hidden" ng-bind="day|mFormat:\'ddd\':tz"></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr ng-repeat="week in weeks" ng-init="$index2 = $index">\r\n        <td ng-repeat="day in week">\r\n          <span\r\n            ng-class="classes[$index2][$index]"\r\n            ng-click="selectDate(day)" ng-bind="day|mFormat:\'DD\':tz"></span>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div ng-switch-when="year">\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th ng-click="prev(10)">&lsaquo;</th>\r\n        <th colspan="5" class="switch"ng-bind="years[0].year()+\' - \'+years[years.length-1].year()"></th>\r\n        <th ng-click="next(10)">&rsaquo;</i></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr>\r\n        <td colspan="7">\r\n          <span ng-class="classes[$index]"\r\n                ng-repeat="year in years"\r\n                ng-click="selectDate(year)" ng-bind="year.year()"></span>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div ng-switch-when="month">\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th ng-click="prev()">&lsaquo;</th>\r\n        <th colspan="5" class="switch" ng-click="setView(\'year\')" ng-bind="date|mFormat:\'YYYY\':tz"></th>\r\n        <th ng-click="next()">&rsaquo;</i></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr>\r\n        <td colspan="7">\r\n          <span ng-repeat="month in months"\r\n                ng-class="classes[$index]"\r\n                ng-click="selectDate(month)"\r\n                ng-bind="month|mFormat:\'MMM\':tz"></span>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div ng-switch-when="hours">\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th ng-click="prev(24)">&lsaquo;</th>\r\n        <th colspan="5" class="switch" ng-click="setView(\'date\')" ng-bind="date|mFormat:\'DD MMMM YYYY\':tz"></th>\r\n        <th ng-click="next(24)">&rsaquo;</i></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr>\r\n        <td colspan="7">\r\n          <span ng-repeat="hour in hours"\r\n                ng-class="classes[$index]"\r\n                ng-click="selectDate(hour)" ng-bind="hour|mFormat:\'HH:mm\':tz"></span>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div ng-switch-when="minutes">\r\n    <table>\r\n      <thead>\r\n      <tr>\r\n        <th ng-click="prev()">&lsaquo;</th>\r\n        <th colspan="5" class="switch" ng-click="setView(\'hours\')" ng-bind="date|mFormat:\'DD MMMM YYYY\':tz"></th>\r\n        <th ng-click="next()">&rsaquo;</i></th>\r\n      </tr>\r\n      </thead>\r\n      <tbody>\r\n      <tr>\r\n        <td colspan="7">\r\n          <span ng-repeat="minute in minutes"\r\n                ng-class="classes[$index]"\r\n                ng-click="selectDate(minute)"\r\n                ng-bind="minute|mFormat:\'HH:mm\':tz"></span>\r\n        </td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</div>')}])}(angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
