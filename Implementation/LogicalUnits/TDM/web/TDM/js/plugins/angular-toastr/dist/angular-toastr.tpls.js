!function(){"use strict";function toastr($animate,$injector,$document,$rootScope,$sce,toastrConfig,$q){var container,index=0,toasts=[],previousToastMessage="",openToasts={},containerDefer=$q.defer();return{active:function(){return toasts.length},clear:function(toast){if(1===arguments.length&&!toast)return;if(toast)remove(toast.toastId);else for(var i=0;i<toasts.length;i++)remove(toasts[i].toastId)},error:function(message,title,optionsOverride){return _buildNotification(_getOptions().iconClasses.error,message,title,optionsOverride)},info:function(message,title,optionsOverride){return _buildNotification(_getOptions().iconClasses.info,message,title,optionsOverride)},remove:remove,success:function(message,title,optionsOverride){return _buildNotification(_getOptions().iconClasses.success,message,title,optionsOverride)},warning:function(message,title,optionsOverride){return _buildNotification(_getOptions().iconClasses.warning,message,title,optionsOverride)},refreshTimer:function(toast,newTime){toast&&toast.isOpened&&toasts.indexOf(toast)>=0&&toast.scope.refreshTimer(newTime)}};function remove(toastId,wasClicked){var toast=function(toastId){for(var i=0;i<toasts.length;i++)if(toasts[i].toastId===toastId)return toasts[i]}(toastId);toast&&!toast.deleting&&(toast.deleting=!0,toast.isOpened=!1,$animate.leave(toast.el).then((function(){toast.scope.options.onHidden&&toast.scope.options.onHidden(!!wasClicked,toast),toast.scope.$destroy();var index=toasts.indexOf(toast);delete openToasts[toast.scope.message],toasts.splice(index,1);var maxOpened=toastrConfig.maxOpened;maxOpened&&toasts.length>=maxOpened&&toasts[maxOpened-1].open.resolve(),toasts.length||(container.remove(),container=null,containerDefer=$q.defer())})))}function _buildNotification(type,message,title,optionsOverride){return angular.isObject(title)&&(optionsOverride=title,title=null),function(map){var options=_getOptions();if(function(){var isDuplicateOfLast=options.preventDuplicates&&map.message===previousToastMessage,isDuplicateOpen=options.preventOpenDuplicates&&openToasts[map.message];if(isDuplicateOfLast||isDuplicateOpen)return!0;return previousToastMessage=map.message,openToasts[map.message]=!0,!1}())return;var newToast=function(){var newToast={toastId:index++,isOpened:!1,scope:$rootScope.$new(),open:$q.defer()};newToast.iconClass=map.iconClass,map.optionsOverride&&(angular.extend(options,function(options){for(var badOptions=["containerId","iconClasses","maxOpened","newestOnTop","positionClass","preventDuplicates","preventOpenDuplicates","templates"],i=0,l=badOptions.length;i<l;i++)delete options[badOptions[i]];return options}(map.optionsOverride)),newToast.iconClass=map.optionsOverride.iconClass||newToast.iconClass);return function(toast,map,options){options.allowHtml?(toast.scope.allowHtml=!0,toast.scope.title=$sce.trustAsHtml(map.title),toast.scope.message=$sce.trustAsHtml(map.message)):(toast.scope.title=map.title,toast.scope.message=map.message);toast.scope.toastType=toast.iconClass,toast.scope.toastId=toast.toastId,toast.scope.extraData=options.extraData,toast.scope.options={extendedTimeOut:options.extendedTimeOut,messageClass:options.messageClass,onHidden:options.onHidden,onShown:generateEvent("onShown"),onTap:generateEvent("onTap"),progressBar:options.progressBar,tapToDismiss:options.tapToDismiss,timeOut:options.timeOut,titleClass:options.titleClass,toastClass:options.toastClass},options.closeButton&&(toast.scope.options.closeHtml=options.closeHtml);function generateEvent(event){if(options[event])return function(){options[event](toast)}}}(newToast,map,options),newToast.el=function(scope){var angularDomEl=angular.element("<div toast></div>");return $injector.get("$compile")(angularDomEl)(scope)}(newToast.scope),newToast}();if(toasts.push(newToast),function(){return options.autoDismiss&&options.maxOpened&&toasts.length>options.maxOpened}())for(var oldToasts=toasts.slice(0,toasts.length-options.maxOpened),i=0,len=oldToasts.length;i<len;i++)remove(oldToasts[i].toastId);(options.maxOpened&&toasts.length<=options.maxOpened||!options.maxOpened)&&newToast.open.resolve();return newToast.open.promise.then((function(){(function(options){if(container)return containerDefer.promise;(container=angular.element("<div></div>")).attr("id",options.containerId),container.addClass(options.positionClass),container.css({"pointer-events":"auto"});var target=angular.element(document.querySelector(options.target));if(!target||!target.length)throw"Target for toasts doesn't exist";return $animate.enter(container,target).then((function(){containerDefer.resolve()})),containerDefer.promise})(options).then((function(){if(newToast.isOpened=!0,options.newestOnTop)$animate.enter(newToast.el,container).then((function(){newToast.scope.init()}));else{var sibling=container[0].lastChild?angular.element(container[0].lastChild):null;$animate.enter(newToast.el,container,sibling).then((function(){newToast.scope.init()}))}}))})),newToast}({iconClass:type,message:message,optionsOverride:optionsOverride,title:title})}function _getOptions(){return angular.extend({},toastrConfig)}}angular.module("toastr",[]).factory("toastr",toastr),toastr.$inject=["$animate","$injector","$document","$rootScope","$sce","toastrConfig","$q"]}(),function(){"use strict";angular.module("toastr").constant("toastrConfig",{allowHtml:!1,autoDismiss:!1,closeButton:!1,closeHtml:"<button>&times;</button>",containerId:"toast-container",extendedTimeOut:1e3,iconClasses:{error:"toast-error",info:"toast-info",success:"toast-success",warning:"toast-warning"},maxOpened:0,messageClass:"toast-message",newestOnTop:!0,onHidden:null,onShown:null,onTap:null,positionClass:"toast-top-right",preventDuplicates:!1,preventOpenDuplicates:!1,progressBar:!1,tapToDismiss:!0,target:"body",templates:{toast:"directives/toast/toast.html",progressbar:"directives/progressbar/progressbar.html"},timeOut:5e3,titleClass:"toast-title",toastClass:"toast"})}(),function(){"use strict";function progressBar(toastrConfig){return{require:"^toast",templateUrl:function(){return toastrConfig.templates.progressbar},link:function(scope,element,attrs,toastCtrl){var intervalId,currentTimeOut,hideTime;function updateProgress(){var percentage=(hideTime-(new Date).getTime())/currentTimeOut*100;element.css("width",percentage+"%")}toastCtrl.progressBar=scope,scope.start=function(duration){intervalId&&clearInterval(intervalId),currentTimeOut=parseFloat(duration),hideTime=(new Date).getTime()+currentTimeOut,intervalId=setInterval(updateProgress,10)},scope.stop=function(){intervalId&&clearInterval(intervalId)},scope.$on("$destroy",(function(){clearInterval(intervalId)}))}}}angular.module("toastr").directive("progressBar",progressBar),progressBar.$inject=["toastrConfig"]}(),function(){"use strict";angular.module("toastr").controller("ToastController",(function(){this.progressBar=null,this.startProgressBar=function(duration){this.progressBar&&this.progressBar.start(duration)},this.stopProgressBar=function(){this.progressBar&&this.progressBar.stop()}}))}(),function(){"use strict";function toast($injector,$interval,toastrConfig,toastr){return{templateUrl:function(){return toastrConfig.templates.toast},controller:"ToastController",link:function(scope,element,attrs,toastCtrl){var timeout;if(scope.toastClass=scope.options.toastClass,scope.titleClass=scope.options.titleClass,scope.messageClass=scope.options.messageClass,scope.progressBar=scope.options.progressBar,function(){return scope.options.closeHtml}()){var button=angular.element(scope.options.closeHtml),$compile=$injector.get("$compile");button.addClass("toast-close-button"),button.attr("ng-click","close(true, $event)"),$compile(button)(scope),element.children().prepend(button)}function createTimeout(time){return toastCtrl.startProgressBar(time),$interval((function(){toastCtrl.stopProgressBar(),toastr.remove(scope.toastId)}),time,1)}scope.init=function(){scope.options.timeOut&&(timeout=createTimeout(scope.options.timeOut)),scope.options.onShown&&scope.options.onShown()},element.on("mouseenter",(function(){scope.progressBar=!1,toastCtrl.stopProgressBar(),timeout&&$interval.cancel(timeout)})),scope.tapToast=function(){angular.isFunction(scope.options.onTap)&&scope.options.onTap(),scope.options.tapToDismiss&&scope.close(!0)},scope.close=function(wasClicked,$event){$event&&angular.isFunction($event.stopPropagation)&&$event.stopPropagation(),toastr.remove(scope.toastId,wasClicked)},scope.refreshTimer=function(newTime){timeout&&($interval.cancel(timeout),timeout=createTimeout(newTime||scope.options.timeOut))},element.on("mouseleave",(function(){0===scope.options.timeOut&&0===scope.options.extendedTimeOut||(scope.$apply((function(){scope.progressBar=scope.options.progressBar})),timeout=createTimeout(scope.options.extendedTimeOut))}))}}}angular.module("toastr").directive("toast",toast),toast.$inject=["$injector","$interval","toastrConfig","toastr"]}(),angular.module("toastr").run(["$templateCache",function($templateCache){$templateCache.put("directives/progressbar/progressbar.html",'<div class="toast-progress"></div>\n'),$templateCache.put("directives/toast/toast.html",'<div class="{{toastClass}} {{toastType}}" ng-click="tapToast()">\n  <div ng-switch on="allowHtml">\n    <div ng-switch-default ng-if="title" class="{{titleClass}}" aria-label="{{title}}">{{title}}</div>\n    <div ng-switch-default class="{{messageClass}}" aria-label="{{message}}">{{message}}</div>\n    <div ng-switch-when="true" ng-if="title" class="{{titleClass}}" ng-bind-html="title"></div>\n    <div ng-switch-when="true" class="{{messageClass}}" ng-bind-html="message"></div>\n  </div>\n  <progress-bar ng-if="progressBar"></progress-bar>\n</div>\n')}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
