/**
 * oclazyload - Load modules on demand (lazy load) with angularJS
 * @version v1.0.10
 * @link https://github.com/ocombe/ocLazyLoad
 * @license MIT
 * @author Olivier Combe <olivier.combe@gmail.com>
 */
!function(e,n){"use strict";var r=["ng","oc.lazyLoad"],o={},t=[],i=[],a=[],s=[],u=e.noop,c={},d=[];e.module("oc.lazyLoad",["ng"]).provider("$ocLazyLoad",["$controllerProvider","$provide","$compileProvider","$filterProvider","$injector","$animateProvider",function(l,f,p,m,v,y){function L(n,o,t){if(o){var i,s,l,f=[];for(i=o.length-1;i>=0;i--)if(s=o[i],e.isString(s)||(s=E(s)),s&&-1===d.indexOf(s)&&(!w[s]||-1!==a.indexOf(s))){var h=-1===r.indexOf(s);if(l=g(s),h&&(r.push(s),L(n,l.requires,t)),l._runBlocks.length>0)for(c[s]=[];l._runBlocks.length>0;)c[s].push(l._runBlocks.shift());e.isDefined(c[s])&&(h||t.rerun)&&(f=f.concat(c[s])),j(n,l._invokeQueue,s,t.reconfig),j(n,l._configBlocks,s,t.reconfig),u(h?"ocLazyLoad.moduleLoaded":"ocLazyLoad.moduleReloaded",s),o.pop(),d.push(s)}var p=n.getInstanceInjector();e.forEach(f,(function(e){p.invoke(e)}))}}function $(n,r){function t(n,r){var o,t=!0;return r.length&&(o=i(n),e.forEach(r,(function(e){t=t&&i(e)!==o}))),t}function i(n){return e.isArray(n)?M(n.toString()):e.isObject(n)?M(S(n)):e.isDefined(n)&&null!==n?M(n.toString()):n}var a=n[2][0],s=n[1],c=!1;e.isUndefined(o[r])&&(o[r]={}),e.isUndefined(o[r][s])&&(o[r][s]={});var d=function(e,n){o[r][s].hasOwnProperty(e)||(o[r][s][e]=[]),t(n,o[r][s][e])&&(c=!0,o[r][s][e].push(n),u("ocLazyLoad.componentLoaded",[r,s,e]))};if(e.isString(a))d(a,n[2][1]);else{if(!e.isObject(a))return!1;e.forEach(a,(function(n,r){e.isString(n)?d(n,a[1]):d(r,n)}))}return c}function j(n,r,o,i){var a,s,u,c;if(r)for(a=0,s=r.length;s>a;a++)if(u=r[a],e.isArray(u)){if(null!==n){if(!n.hasOwnProperty(u[0]))throw new Error("unsupported provider "+u[0]);c=n[u[0]]}var d=$(u,o);if("invoke"!==u[1])d&&e.isDefined(c)&&c[u[1]].apply(c,u[2]);else{var l=function(n){var r=t.indexOf(o+"-"+n);(-1===r||i)&&(-1===r&&t.push(o+"-"+n),e.isDefined(c)&&c[u[1]].apply(c,u[2]))};if(e.isFunction(u[2][0]))l(u[2][0]);else if(e.isArray(u[2][0]))for(var f=0,h=u[2][0].length;h>f;f++)e.isFunction(u[2][0][f])&&l(u[2][0][f])}}}function E(n){var r=null;return e.isString(n)?r=n:e.isObject(n)&&n.hasOwnProperty("name")&&e.isString(n.name)&&(r=n.name),r}function _(n){if(!e.isString(n))return!1;try{return g(n)}catch(r){if(/No module/.test(r)||r.message.indexOf("$injector:nomod")>-1)return!1}}var w={},O={$controllerProvider:l,$compileProvider:p,$filterProvider:m,$provide:f,$injector:v,$animateProvider:y},x=!1,b=!1,z=[],D={};z.push=function(e){-1===this.indexOf(e)&&Array.prototype.push.apply(this,arguments)},this.config=function(n){e.isDefined(n.modules)&&(e.isArray(n.modules)?e.forEach(n.modules,(function(e){w[e.name]=e})):w[n.modules.name]=n.modules),e.isDefined(n.debug)&&(x=n.debug),e.isDefined(n.events)&&(b=n.events)},this._init=function(o){if(0===i.length){var t=[o],a=["ng:app","ng-app","x-ng-app","data-ng-app"],u=/\sng[:\-]app(:\s*([\w\d_]+);?)?\s/,c=function(e){return e&&t.push(e)};e.forEach(a,(function(n){a[n]=!0,c(document.getElementById(n)),n=n.replace(":","\\:"),void 0!==o[0]&&o[0].querySelectorAll&&(e.forEach(o[0].querySelectorAll("."+n),c),e.forEach(o[0].querySelectorAll("."+n+"\\:"),c),e.forEach(o[0].querySelectorAll("["+n+"]"),c))})),e.forEach(t,(function(n){if(0===i.length){var r=" "+o.className+" ",t=u.exec(r);t?i.push((t[2]||"").replace(/\s+/g,",")):e.forEach(n.attributes,(function(e){0===i.length&&a[e.name]&&i.push(e.value)}))}}))}0!==i.length||(n.jasmine||n.mocha)&&e.isDefined(e.mock)||console.error("No module found during bootstrap, unable to init ocLazyLoad. You should always use the ng-app directive or angular.boostrap when you use ocLazyLoad.");var d=function l(n){if(-1===r.indexOf(n)){r.push(n);var o=e.module(n);j(null,o._invokeQueue,n),j(null,o._configBlocks,n),e.forEach(o.requires,l)}};e.forEach(i,(function(e){d(e)})),i=[],s.pop()};var S=function(n){try{return JSON.stringify(n)}catch(r){var o=[];return JSON.stringify(n,(function(n,r){if(e.isObject(r)&&null!==r){if(-1!==o.indexOf(r))return;o.push(r)}return r}))}},M=function(e){var n,o,t=0;if(0==e.length)return t;for(n=0,o=e.length;o>n;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return t};this.$get=["$log","$rootElement","$rootScope","$cacheFactory","$q",function(n,t,a,c,l){function f(e){var r=l.defer();return n.error(e.message),r.reject(e),r.promise}var p,m=c("ocLazyLoad");return x||((n={}).error=e.noop,n.warn=e.noop,n.info=e.noop),O.getInstanceInjector=function(){return p||(p=t.data("$injector")||e.injector())},{_broadcast:u=function(e,r){b&&a.$broadcast(e,r),x&&n.info(e,r)},_$log:n,_getFilesCache:function(){return m},toggleWatch:function(e){e?s.push(!0):s.pop()},getModuleConfig:function(n){if(!e.isString(n))throw new Error("You need to give the name of the module to get");return w[n]?e.copy(w[n]):null},setModuleConfig:function(n){if(!e.isObject(n))throw new Error("You need to give the module config object to set");return w[n.name]=n,n},getModules:function(){return r},isLoaded:function(n){var o=function(e){var n=r.indexOf(e)>-1;return n||(n=!!_(e)),n};if(e.isString(n)&&(n=[n]),e.isArray(n)){var t,i;for(t=0,i=n.length;i>t;t++)if(!o(n[t]))return!1;return!0}throw new Error("You need to define the module(s) name(s)")},_getModuleName:E,_getModule:function(e){try{return g(e)}catch(n){throw(/No module/.test(n)||n.message.indexOf("$injector:nomod")>-1)&&(n.message='The module "'+S(e)+'" that you are trying to load does not exist. '+n.message),n}},moduleExists:_,_loadDependencies:function(n,r){var o,t,i,a=[],s=this;if(null===(n=s._getModuleName(n)))return l.when();try{o=s._getModule(n)}catch(u){return f(u)}return t=s.getRequires(o),e.forEach(t,(function(o){if(e.isString(o)){var t=s.getModuleConfig(o);if(null===t)return void z.push(o);o=t,t.name=void 0}if(s.moduleExists(o.name))return 0!==(i=o.files.filter((function(e){return s.getModuleConfig(o.name).files.indexOf(e)<0}))).length&&s._$log.warn('Module "',n,'" attempted to redefine configuration for dependency. "',o.name,'"\n Additional Files Loaded:',i),e.isDefined(s.filesLoader)?void a.push(s.filesLoader(o,r).then((function(){return s._loadDependencies(o)}))):f(new Error("Error: New dependencies need to be loaded from external files ("+o.files+"), but no loader has been defined."));if(e.isArray(o)){var u=[];e.forEach(o,(function(e){var n=s.getModuleConfig(e);null===n?u.push(e):n.files&&(u=u.concat(n.files))})),u.length>0&&(o={files:u})}else e.isObject(o)&&o.hasOwnProperty("name")&&o.name&&(s.setModuleConfig(o),z.push(o.name));if(e.isDefined(o.files)&&0!==o.files.length){if(!e.isDefined(s.filesLoader))return f(new Error('Error: the module "'+o.name+'" is defined in external files ('+o.files+"), but no loader has been defined."));a.push(s.filesLoader(o,r).then((function(){return s._loadDependencies(o)})))}})),l.all(a)},inject:function(n){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=!(arguments.length<=2||void 0===arguments[2])&&arguments[2],t=this,a=l.defer();if(e.isDefined(n)&&null!==n){if(e.isArray(n)){var s=[];return e.forEach(n,(function(e){s.push(t.inject(e,r,o))})),l.all(s)}t._addToLoadList(t._getModuleName(n),!0,o)}if(i.length>0){var u=i.slice(),c=function f(e){z.push(e),D[e]=a.promise,t._loadDependencies(e,r).then((function(){try{d=[],L(O,z,r)}catch(e){return t._$log.error(e.message),void a.reject(e)}i.length>0?f(i.shift()):a.resolve(u)}),(function(e){a.reject(e)}))};c(i.shift())}else{if(r&&r.name&&D[r.name])return D[r.name];a.resolve()}return a.promise},getRequires:function(n){var o=[];return e.forEach(n.requires,(function(e){-1===r.indexOf(e)&&o.push(e)})),o},_invokeQueue:j,_registerInvokeList:$,_register:L,_addToLoadList:h,_unregister:function(n){e.isDefined(n)&&e.isArray(n)&&e.forEach(n,(function(e){o[e]=void 0}))}}}],this._init(e.element(n.document))}]);var f=e.bootstrap;e.bootstrap=function(n,l,g){return r=["ng","oc.lazyLoad"],o={},t=[],i=[],a=[],s=[],u=e.noop,c={},d=[],e.forEach(l.slice(),(function(e){h(e,!0,!0)})),f(n,l,g)};var h=function(n,r,o){(s.length>0||r)&&e.isString(n)&&-1===i.indexOf(n)&&(i.push(n),o&&a.push(n))},g=e.module;e.module=function(e,n,r){return h(e,!1,!0),g(e,n,r)},"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="oc.lazyLoad")}(angular,window),function(e){"use strict";e.module("oc.lazyLoad").directive("ocLazyLoad",["$ocLazyLoad","$compile","$animate","$parse","$timeout",function(n,r,o,t,i){return{restrict:"A",terminal:!0,priority:1e3,compile:function(i,a){var s=i[0].innerHTML;return i.html(""),function(i,a,u){var c=t(u.ocLazyLoad);i.$watch((function(){return c(i)||u.ocLazyLoad}),(function(t){e.isDefined(t)&&n.load(t).then((function(){o.enter(s,a),r(a.contents())(i)}))}),!0)}}}}])}(angular),function(e){"use strict";e.module("oc.lazyLoad").config(["$provide",function(n){n.decorator("$ocLazyLoad",["$delegate","$q","$window","$interval",function(n,r,o,t){var a=!1,s=o.document.getElementsByTagName("head")[0]||o.document.getElementsByTagName("body")[0];return n.buildElement=function(u,c,d){var l,f,h=r.defer(),g=n._getFilesCache(),p=function(e){var n=(new Date).getTime();return e.indexOf("?")>=0?"&"===e.substring(0,e.length-1)?e+"_dc="+n:e+"&_dc="+n:e+"?_dc="+n};switch(e.isUndefined(g.get(c))&&g.put(c,h.promise),u){case"css":(l=o.document.createElement("link")).type="text/css",l.rel="stylesheet",l.href=!1===d.cache?p(c):c;break;case"js":(l=o.document.createElement("script")).src=!1===d.cache?p(c):c;break;default:g.remove(c),h.reject(new Error('Requested type "'+u+'" is not known. Could not inject "'+c+'"'))}l.onload=l.onreadystatechange=function(e){l.readyState&&!/^c|loade/.test(l.readyState)||f||(l.onload=l.onreadystatechange=null,f=1,n._broadcast("ocLazyLoad.fileLoaded",c),h.resolve(l))},l.onerror=function(){g.remove(c),h.reject(new Error("Unable to load "+c))},l.async=d.serie?0:1;var m=s.lastChild;if(d.insertBefore){var v=e.element(e.isDefined(window.jQuery)?d.insertBefore:document.querySelector(d.insertBefore));v&&v.length>0&&(m=v[0])}if(m.parentNode.insertBefore(l,m),"css"==u){var y=o.navigator.userAgent.toLowerCase();if(y.indexOf("phantomjs/1.9")>-1)a=!0;else if(/iP(hone|od|ad)/.test(o.navigator.platform)){var L=o.navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),$=parseFloat([parseInt(L[1],10),parseInt(L[2],10),parseInt(L[3]||0,10)].join("."));a=6>$}else if(y.indexOf("android")>-1){var j=parseFloat(y.slice(y.indexOf("android")+8));a=4.4>j}else if(y.indexOf("safari")>-1){var E=y.match(/version\/([\.\d]+)/i);a=E&&E[1]&&parseFloat(E[1])<6}if(a)var _=1e3,w=t((function(){try{l.sheet.cssRules,t.cancel(w),l.onload()}catch(e){--_<=0&&l.onerror()}}),20)}return h.promise},n}])}])}(angular),function(e){"use strict";e.module("oc.lazyLoad").config(["$provide",function(n){n.decorator("$ocLazyLoad",["$delegate","$q",function(n,r){return n.filesLoader=function(o){var t=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],i=[],a=[],s=[],u=[],c=null,d=n._getFilesCache();n.toggleWatch(!0),e.extend(t,o);var l=function(r){var o,l=null;if(e.isObject(r)&&(l=r.type,r=r.path),c=d.get(r),e.isUndefined(c)||!1===t.cache){if(null!==(o=/^(css|less|html|htm|js)?(?=!)/.exec(r))&&(l=o[1],r=r.substr(o[1].length+1,r.length)),!l)if(null!==(o=/[.](css|less|html|htm|js)?((\?|#).*)?$/.exec(r)))l=o[1];else{if(n.jsLoader.hasOwnProperty("ocLazyLoadLoader")||!n.jsLoader.hasOwnProperty("requirejs"))return void n._$log.error("File type could not be determined. "+r);l="js"}"css"!==l&&"less"!==l||-1!==i.indexOf(r)?"html"!==l&&"htm"!==l||-1!==a.indexOf(r)?"js"===l||-1===s.indexOf(r)?s.push(r):n._$log.error("File type is not valid. "+r):a.push(r):i.push(r)}else c&&u.push(c)};if(t.serie?l(t.files.shift()):e.forEach(t.files,(function(e){l(e)})),i.length>0){var f=r.defer();n.cssLoader(i,(function(r){e.isDefined(r)&&n.cssLoader.hasOwnProperty("ocLazyLoadLoader")?(n._$log.error(r),f.reject(r)):f.resolve()}),t),u.push(f.promise)}if(a.length>0){var h=r.defer();n.templatesLoader(a,(function(r){e.isDefined(r)&&n.templatesLoader.hasOwnProperty("ocLazyLoadLoader")?(n._$log.error(r),h.reject(r)):h.resolve()}),t),u.push(h.promise)}if(s.length>0){var g=r.defer();n.jsLoader(s,(function(r){e.isDefined(r)&&(n.jsLoader.hasOwnProperty("ocLazyLoadLoader")||n.jsLoader.hasOwnProperty("requirejs"))?(n._$log.error(r),g.reject(r)):g.resolve()}),t),u.push(g.promise)}if(0===u.length){var p=r.defer(),m="Error: no file to load has been found, if you're trying to load an existing module you should use the 'inject' method instead of 'load'.";return n._$log.error(m),p.reject(m),p.promise}return t.serie&&t.files.length>0?r.all(u).then((function(){return n.filesLoader(o,t)})):r.all(u).finally((function(e){return n.toggleWatch(!1),e}))},n.load=function(o){var t,i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=this,s=null,u=[],c=r.defer(),d=e.copy(o),l=e.copy(i);if(e.isArray(d))return e.forEach(d,(function(e){u.push(a.load(e,l))})),r.all(u).then((function(e){c.resolve(e)}),(function(e){c.reject(e)})),c.promise;if(e.isString(d)?(s=a.getModuleConfig(d))||(s={files:[d]}):e.isObject(d)&&(s=e.isDefined(d.path)&&e.isDefined(d.type)?{files:[d]}:a.setModuleConfig(d)),null===s){var f=a._getModuleName(d);return t='Module "'+(f||"unknown")+'" is not configured, cannot load.',n._$log.error(t),c.reject(new Error(t)),c.promise}e.isDefined(s.template)&&(e.isUndefined(s.files)&&(s.files=[]),e.isString(s.template)?s.files.push(s.template):e.isArray(s.template)&&s.files.concat(s.template));var h=e.extend({},l,s);return e.isUndefined(s.files)&&e.isDefined(s.name)&&n.moduleExists(s.name)?n.inject(s.name,h,!0):(n.filesLoader(s,h).then((function(){n.inject(null,h).then((function(e){c.resolve(e)}),(function(e){c.reject(e)}))}),(function(e){c.reject(e)})),c.promise)},n}])}])}(angular),function(e){"use strict";e.module("oc.lazyLoad").config(["$provide",function(n){n.decorator("$ocLazyLoad",["$delegate","$q",function(n,r){return n.cssLoader=function(o,t,i){var a=[];e.forEach(o,(function(e){a.push(n.buildElement("css",e,i))})),r.all(a).then((function(){t()}),(function(e){t(e)}))},n.cssLoader.ocLazyLoadLoader=!0,n}])}])}(angular),function(e){"use strict";e.module("oc.lazyLoad").config(["$provide",function(n){n.decorator("$ocLazyLoad",["$delegate","$q",function(n,r){return n.jsLoader=function(o,t,i){var a=[];e.forEach(o,(function(e){a.push(n.buildElement("js",e,i))})),r.all(a).then((function(){t()}),(function(e){t(e)}))},n.jsLoader.ocLazyLoadLoader=!0,n}])}])}(angular),function(e){"use strict";e.module("oc.lazyLoad").config(["$provide",function(n){n.decorator("$ocLazyLoad",["$delegate","$templateCache","$q","$http",function(n,r,o,t){return n.templatesLoader=function(i,a,s){var u=[],c=n._getFilesCache();return e.forEach(i,(function(n){var i=o.defer();u.push(i.promise),t.get(n,s).then((function(o){var t=o.data;e.isString(t)&&t.length>0&&e.forEach(e.element(t),(function(e){"SCRIPT"===e.nodeName&&"text/ng-template"===e.type&&r.put(e.id,e.innerHTML)})),e.isUndefined(c.get(n))&&c.put(n,!0),i.resolve()})).catch((function(e){i.reject(new Error('Unable to load template file "'+n+'": '+e.data))}))})),o.all(u).then((function(){a()}),(function(e){a(e)}))},n.templatesLoader.ocLazyLoadLoader=!0,n}])}])}(angular),Array.prototype.indexOf||(Array.prototype.indexOf=function(e,n){var r;if(null==this)throw new TypeError('"this" is null or not defined');var o=Object(this),t=o.length>>>0;if(0===t)return-1;var i=+n||0;if(Math.abs(i)===1/0&&(i=0),i>=t)return-1;for(r=Math.max(i>=0?i:t-Math.abs(i),0);t>r;){if(r in o&&o[r]===e)return r;r++}return-1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBsdWdpbnMvb2NsYXp5bG9hZC9kaXN0L29jTGF6eUxvYWQubWluLmpzIl0sIm5hbWVzIjpbImUiLCJuIiwiciIsIm8iLCJ0IiwiaSIsImEiLCJzIiwidSIsIm5vb3AiLCJjIiwiZCIsIm1vZHVsZSIsInByb3ZpZGVyIiwibCIsImYiLCJwIiwibSIsInYiLCJ5IiwiTCIsImxlbmd0aCIsImlzU3RyaW5nIiwiRSIsImluZGV4T2YiLCJ3IiwiaCIsImciLCJwdXNoIiwicmVxdWlyZXMiLCJfcnVuQmxvY2tzIiwic2hpZnQiLCJpc0RlZmluZWQiLCJyZXJ1biIsImNvbmNhdCIsImoiLCJfaW52b2tlUXVldWUiLCJyZWNvbmZpZyIsIl9jb25maWdCbG9ja3MiLCJwb3AiLCJnZXRJbnN0YW5jZUluamVjdG9yIiwiZm9yRWFjaCIsImludm9rZSIsIiQiLCJpc0FycmF5IiwiTSIsInRvU3RyaW5nIiwiaXNPYmplY3QiLCJTIiwiaXNVbmRlZmluZWQiLCJoYXNPd25Qcm9wZXJ0eSIsIkVycm9yIiwiYXBwbHkiLCJpc0Z1bmN0aW9uIiwibmFtZSIsIl8iLCJ0ZXN0IiwibWVzc2FnZSIsIk8iLCIkY29udHJvbGxlclByb3ZpZGVyIiwiJGNvbXBpbGVQcm92aWRlciIsIiRmaWx0ZXJQcm92aWRlciIsIiRwcm92aWRlIiwiJGluamVjdG9yIiwiJGFuaW1hdGVQcm92aWRlciIsIngiLCJiIiwieiIsIkQiLCJ0aGlzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJhcmd1bWVudHMiLCJjb25maWciLCJtb2R1bGVzIiwiZGVidWciLCJldmVudHMiLCJfaW5pdCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJyZXBsYWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImNsYXNzTmFtZSIsImV4ZWMiLCJhdHRyaWJ1dGVzIiwidmFsdWUiLCJqYXNtaW5lIiwibW9jaGEiLCJtb2NrIiwiY29uc29sZSIsImVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImNoYXJDb2RlQXQiLCIkZ2V0IiwiZGVmZXIiLCJyZWplY3QiLCJwcm9taXNlIiwid2FybiIsImluZm8iLCJkYXRhIiwiaW5qZWN0b3IiLCJfYnJvYWRjYXN0IiwiJGJyb2FkY2FzdCIsIl8kbG9nIiwiX2dldEZpbGVzQ2FjaGUiLCJ0b2dnbGVXYXRjaCIsImdldE1vZHVsZUNvbmZpZyIsImNvcHkiLCJzZXRNb2R1bGVDb25maWciLCJnZXRNb2R1bGVzIiwiaXNMb2FkZWQiLCJfZ2V0TW9kdWxlTmFtZSIsIl9nZXRNb2R1bGUiLCJtb2R1bGVFeGlzdHMiLCJfbG9hZERlcGVuZGVuY2llcyIsIndoZW4iLCJnZXRSZXF1aXJlcyIsImZpbGVzIiwiZmlsdGVyIiwiZmlsZXNMb2FkZXIiLCJ0aGVuIiwiYWxsIiwiaW5qZWN0IiwiX2FkZFRvTG9hZExpc3QiLCJzbGljZSIsInJlc29sdmUiLCJfcmVnaXN0ZXJJbnZva2VMaXN0IiwiX3JlZ2lzdGVyIiwiX3VucmVnaXN0ZXIiLCJlbGVtZW50IiwiYm9vdHN0cmFwIiwiZXhwb3J0cyIsImFuZ3VsYXIiLCJ3aW5kb3ciLCJkaXJlY3RpdmUiLCJyZXN0cmljdCIsInRlcm1pbmFsIiwicHJpb3JpdHkiLCJjb21waWxlIiwiaW5uZXJIVE1MIiwiaHRtbCIsIm9jTGF6eUxvYWQiLCIkd2F0Y2giLCJsb2FkIiwiZW50ZXIiLCJjb250ZW50cyIsImRlY29yYXRvciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYnVpbGRFbGVtZW50IiwiRGF0ZSIsImdldFRpbWUiLCJzdWJzdHJpbmciLCJnZXQiLCJwdXQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsInJlbCIsImhyZWYiLCJjYWNoZSIsInNyYyIsInJlbW92ZSIsIm9ubG9hZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJvbmVycm9yIiwiYXN5bmMiLCJzZXJpZSIsImxhc3RDaGlsZCIsImluc2VydEJlZm9yZSIsImpRdWVyeSIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJlbnROb2RlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidG9Mb3dlckNhc2UiLCJwbGF0Zm9ybSIsImFwcFZlcnNpb24iLCJtYXRjaCIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsImpvaW4iLCJzaGVldCIsImNzc1J1bGVzIiwiY2FuY2VsIiwiZXh0ZW5kIiwicGF0aCIsInN1YnN0ciIsImpzTG9hZGVyIiwiY3NzTG9hZGVyIiwidGVtcGxhdGVzTG9hZGVyIiwidGVtcGxhdGUiLCJvY0xhenlMb2FkTG9hZGVyIiwibm9kZU5hbWUiLCJpZCIsIlR5cGVFcnJvciIsIk9iamVjdCIsIk1hdGgiLCJhYnMiLCJtYXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Q0FPQyxTQUFTQSxFQUFFQyxHQUFHLGFBQWEsSUFBSUMsRUFBRSxDQUFDLEtBQUssZUFBZUMsRUFBRSxHQUFHQyxFQUFFLEdBQUdDLEVBQUUsR0FBR0MsRUFBRSxHQUFHQyxFQUFFLEdBQUdDLEVBQUVSLEVBQUVTLEtBQUtDLEVBQUUsR0FBR0MsRUFBRSxHQUFLWCxFQUFFWSxPQUFPLGNBQWMsQ0FBQyxPQUFTQyxTQUFTLGNBQWMsQ0FBQyxzQkFBc0IsV0FBVyxtQkFBbUIsa0JBQWtCLFlBQVksbUJBQW1CLFNBQVNDLEVBQUVDLEVBQUVDLEVBQUVDLEVBQUVDLEVBQUVDLEdBQUcsU0FBU0MsRUFBRW5CLEVBQUVFLEVBQUVDLEdBQUcsR0FBR0QsRUFBRSxDQUFDLElBQUlFLEVBQUVFLEVBQUVPLEVBQUVDLEVBQUUsR0FBRyxJQUFJVixFQUFFRixFQUFFa0IsT0FBTyxFQUFFaEIsR0FBRyxFQUFFQSxJQUFJLEdBQUdFLEVBQUVKLEVBQUVFLEdBQUdMLEVBQUVzQixTQUFTZixLQUFLQSxFQUFFZ0IsRUFBRWhCLElBQUlBLElBQUksSUFBSUksRUFBRWEsUUFBUWpCLE1BQU1rQixFQUFFbEIsS0FBSyxJQUFJRCxFQUFFa0IsUUFBUWpCLElBQUksQ0FBQyxJQUFJbUIsR0FBRyxJQUFJeEIsRUFBRXNCLFFBQVFqQixHQUFHLEdBQUdPLEVBQUVhLEVBQUVwQixHQUFHbUIsSUFBSXhCLEVBQUUwQixLQUFLckIsR0FBR2EsRUFBRW5C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QUFFQSxFQUFFRCxFQUFFaU0sS0FBS0MsSUFBSWpNLEdBQUcsR0FBR0QsRUFBRUYsR0FBRyxDQUFDLEdBQUdBLEtBQUtDLEdBQUdBLEVBQUVELEtBQUtGLEVBQUUsT0FBT0UsRUFBRUEsSUFBSSxPQUFPIiwiZmlsZSI6InBsdWdpbnMvb2NsYXp5bG9hZC9kaXN0L29jTGF6eUxvYWQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBvY2xhenlsb2FkIC0gTG9hZCBtb2R1bGVzIG9uIGRlbWFuZCAobGF6eSBsb2FkKSB3aXRoIGFuZ3VsYXJKU1xuICogQHZlcnNpb24gdjEuMC4xMFxuICogQGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL29jb21iZS9vY0xhenlMb2FkXG4gKiBAbGljZW5zZSBNSVRcbiAqIEBhdXRob3IgT2xpdmllciBDb21iZSA8b2xpdmllci5jb21iZUBnbWFpbC5jb20+XG4gKi9cbiFmdW5jdGlvbihlLG4pe1widXNlIHN0cmljdFwiO3ZhciByPVtcIm5nXCIsXCJvYy5sYXp5TG9hZFwiXSxvPXt9LHQ9W10saT1bXSxhPVtdLHM9W10sdT1lLm5vb3AsYz17fSxkPVtdLGw9ZS5tb2R1bGUoXCJvYy5sYXp5TG9hZFwiLFtcIm5nXCJdKTtsLnByb3ZpZGVyKFwiJG9jTGF6eUxvYWRcIixbXCIkY29udHJvbGxlclByb3ZpZGVyXCIsXCIkcHJvdmlkZVwiLFwiJGNvbXBpbGVQcm92aWRlclwiLFwiJGZpbHRlclByb3ZpZGVyXCIsXCIkaW5qZWN0b3JcIixcIiRhbmltYXRlUHJvdmlkZXJcIixmdW5jdGlvbihsLGYscCxtLHYseSl7ZnVuY3Rpb24gTChuLG8sdCl7aWYobyl7dmFyIGkscyxsLGY9W107Zm9yKGk9by5sZW5ndGgtMTtpPj0wO2ktLSlpZihzPW9baV0sZS5pc1N0cmluZyhzKXx8KHM9RShzKSkscyYmLTE9PT1kLmluZGV4T2YocykmJighd1tzXXx8LTEhPT1hLmluZGV4T2YocykpKXt2YXIgaD0tMT09PXIuaW5kZXhPZihzKTtpZihsPWcocyksaCYmKHIucHVzaChzKSxMKG4sbC5yZXF1aXJlcyx0KSksbC5fcnVuQmxvY2tzLmxlbmd0aD4wKWZvcihjW3NdPVtdO2wuX3J1bkJsb2Nrcy5sZW5ndGg+MDspY1tzXS5wdXNoKGwuX3J1bkJsb2Nrcy5zaGlmdCgpKTtlLmlzRGVmaW5lZChjW3NdKSYmKGh8fHQucmVydW4pJiYoZj1mLmNvbmNhdChjW3NdKSksaihuLGwuX2ludm9rZVF1ZXVlLHMsdC5yZWNvbmZpZyksaihuLGwuX2NvbmZpZ0Jsb2NrcyxzLHQucmVjb25maWcpLHUoaD9cIm9jTGF6eUxvYWQubW9kdWxlTG9hZGVkXCI6XCJvY0xhenlMb2FkLm1vZHVsZVJlbG9hZGVkXCIscyksby5wb3AoKSxkLnB1c2gocyl9dmFyIHA9bi5nZXRJbnN0YW5jZUluamVjdG9yKCk7ZS5mb3JFYWNoKGYsZnVuY3Rpb24oZSl7cC5pbnZva2UoZSl9KX19ZnVuY3Rpb24gJChuLHIpe2Z1bmN0aW9uIHQobixyKXt2YXIgbyx0PSEwO3JldHVybiByLmxlbmd0aCYmKG89aShuKSxlLmZvckVhY2gocixmdW5jdGlvbihlKXt0PXQmJmkoZSkhPT1vfSkpLHR9ZnVuY3Rpb24gaShuKXtyZXR1cm4gZS5pc0FycmF5KG4pP00obi50b1N0cmluZygpKTplLmlzT2JqZWN0KG4pP00oUyhuKSk6ZS5pc0RlZmluZWQobikmJm51bGwhPT1uP00obi50b1N0cmluZygpKTpufXZhciBhPW5bMl1bMF0scz1uWzFdLGM9ITE7ZS5pc1VuZGVmaW5lZChvW3JdKSYmKG9bcl09e30pLGUuaXNVbmRlZmluZWQob1tyXVtzXSkmJihvW3JdW3NdPXt9KTt2YXIgZD1mdW5jdGlvbihlLG4pe29bcl1bc10uaGFzT3duUHJvcGVydHkoZSl8fChvW3JdW3NdW2VdPVtdKSx0KG4sb1tyXVtzXVtlXSkmJihjPSEwLG9bcl1bc11bZV0ucHVzaChuKSx1KFwib2NMYXp5TG9hZC5jb21wb25lbnRMb2FkZWRcIixbcixzLGVdKSl9O2lmKGUuaXNTdHJpbmcoYSkpZChhLG5bMl1bMV0pO2Vsc2V7aWYoIWUuaXNPYmplY3QoYSkpcmV0dXJuITE7ZS5mb3JFYWNoKGEsZnVuY3Rpb24obixyKXtlLmlzU3RyaW5nKG4pP2QobixhWzFdKTpkKHIsbil9KX1yZXR1cm4gY31mdW5jdGlvbiBqKG4scixvLGkpe2lmKHIpe3ZhciBhLHMsdSxjO2ZvcihhPTAscz1yLmxlbmd0aDtzPmE7YSsrKWlmKHU9clthXSxlLmlzQXJyYXkodSkpe2lmKG51bGwhPT1uKXtpZighbi5oYXNPd25Qcm9wZXJ0eSh1WzBdKSl0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBwcm92aWRlciBcIit1WzBdKTtjPW5bdVswXV19dmFyIGQ9JCh1LG8pO2lmKFwiaW52b2tlXCIhPT11WzFdKWQmJmUuaXNEZWZpbmVkKGMpJiZjW3VbMV1dLmFwcGx5KGMsdVsyXSk7ZWxzZXt2YXIgbD1mdW5jdGlvbihuKXt2YXIgcj10LmluZGV4T2YobytcIi1cIituKTsoLTE9PT1yfHxpKSYmKC0xPT09ciYmdC5wdXNoKG8rXCItXCIrbiksZS5pc0RlZmluZWQoYykmJmNbdVsxXV0uYXBwbHkoYyx1WzJdKSl9O2lmKGUuaXNGdW5jdGlvbih1WzJdWzBdKSlsKHVbMl1bMF0pO2Vsc2UgaWYoZS5pc0FycmF5KHVbMl1bMF0pKWZvcih2YXIgZj0wLGg9dVsyXVswXS5sZW5ndGg7aD5mO2YrKyllLmlzRnVuY3Rpb24odVsyXVswXVtmXSkmJmwodVsyXVswXVtmXSl9fX19ZnVuY3Rpb24gRShuKXt2YXIgcj1udWxsO3JldHVybiBlLmlzU3RyaW5nKG4pP3I9bjplLmlzT2JqZWN0KG4pJiZuLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmZS5pc1N0cmluZyhuLm5hbWUpJiYocj1uLm5hbWUpLHJ9ZnVuY3Rpb24gXyhuKXtpZighZS5pc1N0cmluZyhuKSlyZXR1cm4hMTt0cnl7cmV0dXJuIGcobil9Y2F0Y2gocil7aWYoL05vIG1vZHVsZS8udGVzdChyKXx8ci5tZXNzYWdlLmluZGV4T2YoXCIkaW5qZWN0b3I6bm9tb2RcIik+LTEpcmV0dXJuITF9fXZhciB3PXt9LE89eyRjb250cm9sbGVyUHJvdmlkZXI6bCwkY29tcGlsZVByb3ZpZGVyOnAsJGZpbHRlclByb3ZpZGVyOm0sJHByb3ZpZGU6ZiwkaW5qZWN0b3I6diwkYW5pbWF0ZVByb3ZpZGVyOnl9LHg9ITEsYj0hMSx6PVtdLEQ9e307ei5wdXNoPWZ1bmN0aW9uKGUpey0xPT09dGhpcy5pbmRleE9mKGUpJiZBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LHRoaXMuY29uZmlnPWZ1bmN0aW9uKG4pe2UuaXNEZWZpbmVkKG4ubW9kdWxlcykmJihlLmlzQXJyYXkobi5tb2R1bGVzKT9lLmZvckVhY2gobi5tb2R1bGVzLGZ1bmN0aW9uKGUpe3dbZS5uYW1lXT1lfSk6d1tuLm1vZHVsZXMubmFtZV09bi5tb2R1bGVzKSxlLmlzRGVmaW5lZChuLmRlYnVnKSYmKHg9bi5kZWJ1ZyksZS5pc0RlZmluZWQobi5ldmVudHMpJiYoYj1uLmV2ZW50cyl9LHRoaXMuX2luaXQ9ZnVuY3Rpb24obyl7aWYoMD09PWkubGVuZ3RoKXt2YXIgdD1bb10sYT1bXCJuZzphcHBcIixcIm5nLWFwcFwiLFwieC1uZy1hcHBcIixcImRhdGEtbmctYXBwXCJdLHU9L1xcc25nWzpcXC1dYXBwKDpcXHMqKFtcXHdcXGRfXSspOz8pP1xccy8sYz1mdW5jdGlvbihlKXtyZXR1cm4gZSYmdC5wdXNoKGUpfTtlLmZvckVhY2goYSxmdW5jdGlvbihuKXthW25dPSEwLGMoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobikpLG49bi5yZXBsYWNlKFwiOlwiLFwiXFxcXDpcIiksXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG9bMF0mJm9bMF0ucXVlcnlTZWxlY3RvckFsbCYmKGUuZm9yRWFjaChvWzBdLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIrbiksYyksZS5mb3JFYWNoKG9bMF0ucXVlcnlTZWxlY3RvckFsbChcIi5cIituK1wiXFxcXDpcIiksYyksZS5mb3JFYWNoKG9bMF0ucXVlcnlTZWxlY3RvckFsbChcIltcIituK1wiXVwiKSxjKSl9KSxlLmZvckVhY2godCxmdW5jdGlvbihuKXtpZigwPT09aS5sZW5ndGgpe3ZhciByPVwiIFwiK28uY2xhc3NOYW1lK1wiIFwiLHQ9dS5leGVjKHIpO3Q/aS5wdXNoKCh0WzJdfHxcIlwiKS5yZXBsYWNlKC9cXHMrL2csXCIsXCIpKTplLmZvckVhY2gobi5hdHRyaWJ1dGVzLGZ1bmN0aW9uKGUpezA9PT1pLmxlbmd0aCYmYVtlLm5hbWVdJiZpLnB1c2goZS52YWx1ZSl9KX19KX0wIT09aS5sZW5ndGh8fChuLmphc21pbmV8fG4ubW9jaGEpJiZlLmlzRGVmaW5lZChlLm1vY2spfHxjb25zb2xlLmVycm9yKFwiTm8gbW9kdWxlIGZvdW5kIGR1cmluZyBib290c3RyYXAsIHVuYWJsZSB0byBpbml0IG9jTGF6eUxvYWQuIFlvdSBzaG91bGQgYWx3YXlzIHVzZSB0aGUgbmctYXBwIGRpcmVjdGl2ZSBvciBhbmd1bGFyLmJvb3N0cmFwIHdoZW4geW91IHVzZSBvY0xhenlMb2FkLlwiKTt2YXIgZD1mdW5jdGlvbiBsKG4pe2lmKC0xPT09ci5pbmRleE9mKG4pKXtyLnB1c2gobik7dmFyIG89ZS5tb2R1bGUobik7aihudWxsLG8uX2ludm9rZVF1ZXVlLG4pLGoobnVsbCxvLl9jb25maWdCbG9ja3MsbiksZS5mb3JFYWNoKG8ucmVxdWlyZXMsbCl9fTtlLmZvckVhY2goaSxmdW5jdGlvbihlKXtkKGUpfSksaT1bXSxzLnBvcCgpfTt2YXIgUz1mdW5jdGlvbihuKXt0cnl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KG4pfWNhdGNoKHIpe3ZhciBvPVtdO3JldHVybiBKU09OLnN0cmluZ2lmeShuLGZ1bmN0aW9uKG4scil7aWYoZS5pc09iamVjdChyKSYmbnVsbCE9PXIpe2lmKC0xIT09by5pbmRleE9mKHIpKXJldHVybjtvLnB1c2gocil9cmV0dXJuIHJ9KX19LE09ZnVuY3Rpb24oZSl7dmFyIG4scixvLHQ9MDtpZigwPT1lLmxlbmd0aClyZXR1cm4gdDtmb3Iobj0wLG89ZS5sZW5ndGg7bz5uO24rKylyPWUuY2hhckNvZGVBdChuKSx0PSh0PDw1KS10K3IsdHw9MDtyZXR1cm4gdH07dGhpcy4kZ2V0PVtcIiRsb2dcIixcIiRyb290RWxlbWVudFwiLFwiJHJvb3RTY29wZVwiLFwiJGNhY2hlRmFjdG9yeVwiLFwiJHFcIixmdW5jdGlvbihuLHQsYSxjLGwpe2Z1bmN0aW9uIGYoZSl7dmFyIHI9bC5kZWZlcigpO3JldHVybiBuLmVycm9yKGUubWVzc2FnZSksci5yZWplY3QoZSksci5wcm9taXNlfXZhciBwLG09YyhcIm9jTGF6eUxvYWRcIik7cmV0dXJuIHh8fChuPXt9LG4uZXJyb3I9ZS5ub29wLG4ud2Fybj1lLm5vb3Asbi5pbmZvPWUubm9vcCksTy5nZXRJbnN0YW5jZUluamVjdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIHA/cDpwPXQuZGF0YShcIiRpbmplY3RvclwiKXx8ZS5pbmplY3RvcigpfSx1PWZ1bmN0aW9uKGUscil7YiYmYS4kYnJvYWRjYXN0KGUscikseCYmbi5pbmZvKGUscil9LHtfYnJvYWRjYXN0OnUsXyRsb2c6bixfZ2V0RmlsZXNDYWNoZTpmdW5jdGlvbigpe3JldHVybiBtfSx0b2dnbGVXYXRjaDpmdW5jdGlvbihlKXtlP3MucHVzaCghMCk6cy5wb3AoKX0sZ2V0TW9kdWxlQ29uZmlnOmZ1bmN0aW9uKG4pe2lmKCFlLmlzU3RyaW5nKG4pKXRocm93IG5ldyBFcnJvcihcIllvdSBuZWVkIHRvIGdpdmUgdGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBnZXRcIik7cmV0dXJuIHdbbl0/ZS5jb3B5KHdbbl0pOm51bGx9LHNldE1vZHVsZUNvbmZpZzpmdW5jdGlvbihuKXtpZighZS5pc09iamVjdChuKSl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbmVlZCB0byBnaXZlIHRoZSBtb2R1bGUgY29uZmlnIG9iamVjdCB0byBzZXRcIik7cmV0dXJuIHdbbi5uYW1lXT1uLG59LGdldE1vZHVsZXM6ZnVuY3Rpb24oKXtyZXR1cm4gcn0saXNMb2FkZWQ6ZnVuY3Rpb24obil7dmFyIG89ZnVuY3Rpb24oZSl7dmFyIG49ci5pbmRleE9mKGUpPi0xO3JldHVybiBufHwobj0hIV8oZSkpLG59O2lmKGUuaXNTdHJpbmcobikmJihuPVtuXSksZS5pc0FycmF5KG4pKXt2YXIgdCxpO2Zvcih0PTAsaT1uLmxlbmd0aDtpPnQ7dCsrKWlmKCFvKG5bdF0pKXJldHVybiExO3JldHVybiEwfXRocm93IG5ldyBFcnJvcihcIllvdSBuZWVkIHRvIGRlZmluZSB0aGUgbW9kdWxlKHMpIG5hbWUocylcIil9LF9nZXRNb2R1bGVOYW1lOkUsX2dldE1vZHVsZTpmdW5jdGlvbihlKXt0cnl7cmV0dXJuIGcoZSl9Y2F0Y2gobil7dGhyb3coL05vIG1vZHVsZS8udGVzdChuKXx8bi5tZXNzYWdlLmluZGV4T2YoXCIkaW5qZWN0b3I6bm9tb2RcIik+LTEpJiYobi5tZXNzYWdlPSdUaGUgbW9kdWxlIFwiJytTKGUpKydcIiB0aGF0IHlvdSBhcmUgdHJ5aW5nIHRvIGxvYWQgZG9lcyBub3QgZXhpc3QuICcrbi5tZXNzYWdlKSxufX0sbW9kdWxlRXhpc3RzOl8sX2xvYWREZXBlbmRlbmNpZXM6ZnVuY3Rpb24obixyKXt2YXIgbyx0LGksYT1bXSxzPXRoaXM7aWYobj1zLl9nZXRNb2R1bGVOYW1lKG4pLG51bGw9PT1uKXJldHVybiBsLndoZW4oKTt0cnl7bz1zLl9nZXRNb2R1bGUobil9Y2F0Y2godSl7cmV0dXJuIGYodSl9cmV0dXJuIHQ9cy5nZXRSZXF1aXJlcyhvKSxlLmZvckVhY2godCxmdW5jdGlvbihvKXtpZihlLmlzU3RyaW5nKG8pKXt2YXIgdD1zLmdldE1vZHVsZUNvbmZpZyhvKTtpZihudWxsPT09dClyZXR1cm4gdm9pZCB6LnB1c2gobyk7bz10LHQubmFtZT12b2lkIDB9aWYocy5tb2R1bGVFeGlzdHMoby5uYW1lKSlyZXR1cm4gaT1vLmZpbGVzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gcy5nZXRNb2R1bGVDb25maWcoby5uYW1lKS5maWxlcy5pbmRleE9mKGUpPDB9KSwwIT09aS5sZW5ndGgmJnMuXyRsb2cud2FybignTW9kdWxlIFwiJyxuLCdcIiBhdHRlbXB0ZWQgdG8gcmVkZWZpbmUgY29uZmlndXJhdGlvbiBmb3IgZGVwZW5kZW5jeS4gXCInLG8ubmFtZSwnXCJcXG4gQWRkaXRpb25hbCBGaWxlcyBMb2FkZWQ6JyxpKSxlLmlzRGVmaW5lZChzLmZpbGVzTG9hZGVyKT92b2lkIGEucHVzaChzLmZpbGVzTG9hZGVyKG8scikudGhlbihmdW5jdGlvbigpe3JldHVybiBzLl9sb2FkRGVwZW5kZW5jaWVzKG8pfSkpOmYobmV3IEVycm9yKFwiRXJyb3I6IE5ldyBkZXBlbmRlbmNpZXMgbmVlZCB0byBiZSBsb2FkZWQgZnJvbSBleHRlcm5hbCBmaWxlcyAoXCIrby5maWxlcytcIiksIGJ1dCBubyBsb2FkZXIgaGFzIGJlZW4gZGVmaW5lZC5cIikpO2lmKGUuaXNBcnJheShvKSl7dmFyIHU9W107ZS5mb3JFYWNoKG8sZnVuY3Rpb24oZSl7dmFyIG49cy5nZXRNb2R1bGVDb25maWcoZSk7bnVsbD09PW4/dS5wdXNoKGUpOm4uZmlsZXMmJih1PXUuY29uY2F0KG4uZmlsZXMpKX0pLHUubGVuZ3RoPjAmJihvPXtmaWxlczp1fSl9ZWxzZSBlLmlzT2JqZWN0KG8pJiZvLmhhc093blByb3BlcnR5KFwibmFtZVwiKSYmby5uYW1lJiYocy5zZXRNb2R1bGVDb25maWcobyksei5wdXNoKG8ubmFtZSkpO2lmKGUuaXNEZWZpbmVkKG8uZmlsZXMpJiYwIT09by5maWxlcy5sZW5ndGgpe2lmKCFlLmlzRGVmaW5lZChzLmZpbGVzTG9hZGVyKSlyZXR1cm4gZihuZXcgRXJyb3IoJ0Vycm9yOiB0aGUgbW9kdWxlIFwiJytvLm5hbWUrJ1wiIGlzIGRlZmluZWQgaW4gZXh0ZXJuYWwgZmlsZXMgKCcrby5maWxlcytcIiksIGJ1dCBubyBsb2FkZXIgaGFzIGJlZW4gZGVmaW5lZC5cIikpO2EucHVzaChzLmZpbGVzTG9hZGVyKG8scikudGhlbihmdW5jdGlvbigpe3JldHVybiBzLl9sb2FkRGVwZW5kZW5jaWVzKG8pfSkpfX0pLGwuYWxsKGEpfSxpbmplY3Q6ZnVuY3Rpb24obil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDw9MXx8dm9pZCAwPT09YXJndW1lbnRzWzFdP3t9OmFyZ3VtZW50c1sxXSxvPWFyZ3VtZW50cy5sZW5ndGg8PTJ8fHZvaWQgMD09PWFyZ3VtZW50c1syXT8hMTphcmd1bWVudHNbMl0sdD10aGlzLGE9bC5kZWZlcigpO2lmKGUuaXNEZWZpbmVkKG4pJiZudWxsIT09bil7aWYoZS5pc0FycmF5KG4pKXt2YXIgcz1bXTtyZXR1cm4gZS5mb3JFYWNoKG4sZnVuY3Rpb24oZSl7cy5wdXNoKHQuaW5qZWN0KGUscixvKSl9KSxsLmFsbChzKX10Ll9hZGRUb0xvYWRMaXN0KHQuX2dldE1vZHVsZU5hbWUobiksITAsbyl9aWYoaS5sZW5ndGg+MCl7dmFyIHU9aS5zbGljZSgpLGM9ZnVuY3Rpb24gZihlKXt6LnB1c2goZSksRFtlXT1hLnByb21pc2UsdC5fbG9hZERlcGVuZGVuY2llcyhlLHIpLnRoZW4oZnVuY3Rpb24oKXt0cnl7ZD1bXSxMKE8seixyKX1jYXRjaChlKXtyZXR1cm4gdC5fJGxvZy5lcnJvcihlLm1lc3NhZ2UpLHZvaWQgYS5yZWplY3QoZSl9aS5sZW5ndGg+MD9mKGkuc2hpZnQoKSk6YS5yZXNvbHZlKHUpfSxmdW5jdGlvbihlKXthLnJlamVjdChlKX0pfTtjKGkuc2hpZnQoKSl9ZWxzZXtpZihyJiZyLm5hbWUmJkRbci5uYW1lXSlyZXR1cm4gRFtyLm5hbWVdO2EucmVzb2x2ZSgpfXJldHVybiBhLnByb21pc2V9LGdldFJlcXVpcmVzOmZ1bmN0aW9uKG4pe3ZhciBvPVtdO3JldHVybiBlLmZvckVhY2gobi5yZXF1aXJlcyxmdW5jdGlvbihlKXstMT09PXIuaW5kZXhPZihlKSYmby5wdXNoKGUpfSksb30sX2ludm9rZVF1ZXVlOmosX3JlZ2lzdGVySW52b2tlTGlzdDokLF9yZWdpc3RlcjpMLF9hZGRUb0xvYWRMaXN0OmgsX3VucmVnaXN0ZXI6ZnVuY3Rpb24obil7ZS5pc0RlZmluZWQobikmJmUuaXNBcnJheShuKSYmZS5mb3JFYWNoKG4sZnVuY3Rpb24oZSl7b1tlXT12b2lkIDB9KX19fV0sdGhpcy5faW5pdChlLmVsZW1lbnQobi5kb2N1bWVudCkpfV0pO3ZhciBmPWUuYm9vdHN0cmFwO2UuYm9vdHN0cmFwPWZ1bmN0aW9uKG4sbCxnKXtyZXR1cm4gcj1bXCJuZ1wiLFwib2MubGF6eUxvYWRcIl0sbz17fSx0PVtdLGk9W10sYT1bXSxzPVtdLHU9ZS5ub29wLGM9e30sZD1bXSxlLmZvckVhY2gobC5zbGljZSgpLGZ1bmN0aW9uKGUpe2goZSwhMCwhMCl9KSxmKG4sbCxnKX07dmFyIGg9ZnVuY3Rpb24obixyLG8peyhzLmxlbmd0aD4wfHxyKSYmZS5pc1N0cmluZyhuKSYmLTE9PT1pLmluZGV4T2YobikmJihpLnB1c2gobiksbyYmYS5wdXNoKG4pKX0sZz1lLm1vZHVsZTtlLm1vZHVsZT1mdW5jdGlvbihlLG4scil7cmV0dXJuIGgoZSwhMSwhMCksZyhlLG4scil9LFwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBleHBvcnRzJiZtb2R1bGUuZXhwb3J0cz09PWV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1cIm9jLmxhenlMb2FkXCIpfShhbmd1bGFyLHdpbmRvdyksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5tb2R1bGUoXCJvYy5sYXp5TG9hZFwiKS5kaXJlY3RpdmUoXCJvY0xhenlMb2FkXCIsW1wiJG9jTGF6eUxvYWRcIixcIiRjb21waWxlXCIsXCIkYW5pbWF0ZVwiLFwiJHBhcnNlXCIsXCIkdGltZW91dFwiLGZ1bmN0aW9uKG4scixvLHQsaSl7cmV0dXJue3Jlc3RyaWN0OlwiQVwiLHRlcm1pbmFsOiEwLHByaW9yaXR5OjFlMyxjb21waWxlOmZ1bmN0aW9uKGksYSl7dmFyIHM9aVswXS5pbm5lckhUTUw7cmV0dXJuIGkuaHRtbChcIlwiKSxmdW5jdGlvbihpLGEsdSl7dmFyIGM9dCh1Lm9jTGF6eUxvYWQpO2kuJHdhdGNoKGZ1bmN0aW9uKCl7cmV0dXJuIGMoaSl8fHUub2NMYXp5TG9hZH0sZnVuY3Rpb24odCl7ZS5pc0RlZmluZWQodCkmJm4ubG9hZCh0KS50aGVuKGZ1bmN0aW9uKCl7by5lbnRlcihzLGEpLHIoYS5jb250ZW50cygpKShpKX0pfSwhMCl9fX19XSl9KGFuZ3VsYXIpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2UubW9kdWxlKFwib2MubGF6eUxvYWRcIikuY29uZmlnKFtcIiRwcm92aWRlXCIsZnVuY3Rpb24obil7bi5kZWNvcmF0b3IoXCIkb2NMYXp5TG9hZFwiLFtcIiRkZWxlZ2F0ZVwiLFwiJHFcIixcIiR3aW5kb3dcIixcIiRpbnRlcnZhbFwiLGZ1bmN0aW9uKG4scixvLHQpe3ZhciBpPSExLGE9ITEscz1vLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXXx8by5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF07cmV0dXJuIG4uYnVpbGRFbGVtZW50PWZ1bmN0aW9uKHUsYyxkKXt2YXIgbCxmLGg9ci5kZWZlcigpLGc9bi5fZ2V0RmlsZXNDYWNoZSgpLHA9ZnVuY3Rpb24oZSl7dmFyIG49KG5ldyBEYXRlKS5nZXRUaW1lKCk7cmV0dXJuIGUuaW5kZXhPZihcIj9cIik+PTA/XCImXCI9PT1lLnN1YnN0cmluZygwLGUubGVuZ3RoLTEpP2UrXCJfZGM9XCIrbjplK1wiJl9kYz1cIituOmUrXCI/X2RjPVwiK259O3N3aXRjaChlLmlzVW5kZWZpbmVkKGcuZ2V0KGMpKSYmZy5wdXQoYyxoLnByb21pc2UpLHUpe2Nhc2VcImNzc1wiOmw9by5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKSxsLnR5cGU9XCJ0ZXh0L2Nzc1wiLGwucmVsPVwic3R5bGVzaGVldFwiLGwuaHJlZj1kLmNhY2hlPT09ITE/cChjKTpjO2JyZWFrO2Nhc2VcImpzXCI6bD1vLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiksbC5zcmM9ZC5jYWNoZT09PSExP3AoYyk6YzticmVhaztkZWZhdWx0OmcucmVtb3ZlKGMpLGgucmVqZWN0KG5ldyBFcnJvcignUmVxdWVzdGVkIHR5cGUgXCInK3UrJ1wiIGlzIG5vdCBrbm93bi4gQ291bGQgbm90IGluamVjdCBcIicrYysnXCInKSl9bC5vbmxvYWQ9bC5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oZSl7bC5yZWFkeVN0YXRlJiYhL15jfGxvYWRlLy50ZXN0KGwucmVhZHlTdGF0ZSl8fGZ8fChsLm9ubG9hZD1sLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLGY9MSxuLl9icm9hZGNhc3QoXCJvY0xhenlMb2FkLmZpbGVMb2FkZWRcIixjKSxoLnJlc29sdmUobCkpfSxsLm9uZXJyb3I9ZnVuY3Rpb24oKXtnLnJlbW92ZShjKSxoLnJlamVjdChuZXcgRXJyb3IoXCJVbmFibGUgdG8gbG9hZCBcIitjKSl9LGwuYXN5bmM9ZC5zZXJpZT8wOjE7dmFyIG09cy5sYXN0Q2hpbGQ7aWYoZC5pbnNlcnRCZWZvcmUpe3ZhciB2PWUuZWxlbWVudChlLmlzRGVmaW5lZCh3aW5kb3cualF1ZXJ5KT9kLmluc2VydEJlZm9yZTpkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGQuaW5zZXJ0QmVmb3JlKSk7diYmdi5sZW5ndGg+MCYmKG09dlswXSl9aWYobS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsLG0pLFwiY3NzXCI9PXUpe2lmKCFpKXt2YXIgeT1vLm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtpZih5LmluZGV4T2YoXCJwaGFudG9tanMvMS45XCIpPi0xKWE9ITA7ZWxzZSBpZigvaVAoaG9uZXxvZHxhZCkvLnRlc3Qoby5uYXZpZ2F0b3IucGxhdGZvcm0pKXt2YXIgTD1vLm5hdmlnYXRvci5hcHBWZXJzaW9uLm1hdGNoKC9PUyAoXFxkKylfKFxcZCspXz8oXFxkKyk/LyksJD1wYXJzZUZsb2F0KFtwYXJzZUludChMWzFdLDEwKSxwYXJzZUludChMWzJdLDEwKSxwYXJzZUludChMWzNdfHwwLDEwKV0uam9pbihcIi5cIikpO2E9Nj4kfWVsc2UgaWYoeS5pbmRleE9mKFwiYW5kcm9pZFwiKT4tMSl7dmFyIGo9cGFyc2VGbG9hdCh5LnNsaWNlKHkuaW5kZXhPZihcImFuZHJvaWRcIikrOCkpO2E9NC40Pmp9ZWxzZSBpZih5LmluZGV4T2YoXCJzYWZhcmlcIik+LTEpe3ZhciBFPXkubWF0Y2goL3ZlcnNpb25cXC8oW1xcLlxcZF0rKS9pKTthPUUmJkVbMV0mJnBhcnNlRmxvYXQoRVsxXSk8Nn19aWYoYSl2YXIgXz0xZTMsdz10KGZ1bmN0aW9uKCl7dHJ5e2wuc2hlZXQuY3NzUnVsZXMsdC5jYW5jZWwodyksbC5vbmxvYWQoKX1jYXRjaChlKXstLV88PTAmJmwub25lcnJvcigpfX0sMjApfXJldHVybiBoLnByb21pc2V9LG59XSl9XSl9KGFuZ3VsYXIpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2UubW9kdWxlKFwib2MubGF6eUxvYWRcIikuY29uZmlnKFtcIiRwcm92aWRlXCIsZnVuY3Rpb24obil7bi5kZWNvcmF0b3IoXCIkb2NMYXp5TG9hZFwiLFtcIiRkZWxlZ2F0ZVwiLFwiJHFcIixmdW5jdGlvbihuLHIpe3JldHVybiBuLmZpbGVzTG9hZGVyPWZ1bmN0aW9uKG8pe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg8PTF8fHZvaWQgMD09PWFyZ3VtZW50c1sxXT97fTphcmd1bWVudHNbMV0saT1bXSxhPVtdLHM9W10sdT1bXSxjPW51bGwsZD1uLl9nZXRGaWxlc0NhY2hlKCk7bi50b2dnbGVXYXRjaCghMCksZS5leHRlbmQodCxvKTt2YXIgbD1mdW5jdGlvbihyKXt2YXIgbyxsPW51bGw7aWYoZS5pc09iamVjdChyKSYmKGw9ci50eXBlLHI9ci5wYXRoKSxjPWQuZ2V0KHIpLGUuaXNVbmRlZmluZWQoYyl8fHQuY2FjaGU9PT0hMSl7aWYobnVsbCE9PShvPS9eKGNzc3xsZXNzfGh0bWx8aHRtfGpzKT8oPz0hKS8uZXhlYyhyKSkmJihsPW9bMV0scj1yLnN1YnN0cihvWzFdLmxlbmd0aCsxLHIubGVuZ3RoKSksIWwpaWYobnVsbCE9PShvPS9bLl0oY3NzfGxlc3N8aHRtbHxodG18anMpPygoXFw/fCMpLiopPyQvLmV4ZWMocikpKWw9b1sxXTtlbHNle2lmKG4uanNMb2FkZXIuaGFzT3duUHJvcGVydHkoXCJvY0xhenlMb2FkTG9hZGVyXCIpfHwhbi5qc0xvYWRlci5oYXNPd25Qcm9wZXJ0eShcInJlcXVpcmVqc1wiKSlyZXR1cm4gdm9pZCBuLl8kbG9nLmVycm9yKFwiRmlsZSB0eXBlIGNvdWxkIG5vdCBiZSBkZXRlcm1pbmVkLiBcIityKTtsPVwianNcIn1cImNzc1wiIT09bCYmXCJsZXNzXCIhPT1sfHwtMSE9PWkuaW5kZXhPZihyKT9cImh0bWxcIiE9PWwmJlwiaHRtXCIhPT1sfHwtMSE9PWEuaW5kZXhPZihyKT9cImpzXCI9PT1sfHwtMT09PXMuaW5kZXhPZihyKT9zLnB1c2gocik6bi5fJGxvZy5lcnJvcihcIkZpbGUgdHlwZSBpcyBub3QgdmFsaWQuIFwiK3IpOmEucHVzaChyKTppLnB1c2gocil9ZWxzZSBjJiZ1LnB1c2goYyl9O2lmKHQuc2VyaWU/bCh0LmZpbGVzLnNoaWZ0KCkpOmUuZm9yRWFjaCh0LmZpbGVzLGZ1bmN0aW9uKGUpe2woZSl9KSxpLmxlbmd0aD4wKXt2YXIgZj1yLmRlZmVyKCk7bi5jc3NMb2FkZXIoaSxmdW5jdGlvbihyKXtlLmlzRGVmaW5lZChyKSYmbi5jc3NMb2FkZXIuaGFzT3duUHJvcGVydHkoXCJvY0xhenlMb2FkTG9hZGVyXCIpPyhuLl8kbG9nLmVycm9yKHIpLGYucmVqZWN0KHIpKTpmLnJlc29sdmUoKX0sdCksdS5wdXNoKGYucHJvbWlzZSl9aWYoYS5sZW5ndGg+MCl7dmFyIGg9ci5kZWZlcigpO24udGVtcGxhdGVzTG9hZGVyKGEsZnVuY3Rpb24ocil7ZS5pc0RlZmluZWQocikmJm4udGVtcGxhdGVzTG9hZGVyLmhhc093blByb3BlcnR5KFwib2NMYXp5TG9hZExvYWRlclwiKT8obi5fJGxvZy5lcnJvcihyKSxoLnJlamVjdChyKSk6aC5yZXNvbHZlKCl9LHQpLHUucHVzaChoLnByb21pc2UpfWlmKHMubGVuZ3RoPjApe3ZhciBnPXIuZGVmZXIoKTtuLmpzTG9hZGVyKHMsZnVuY3Rpb24ocil7ZS5pc0RlZmluZWQocikmJihuLmpzTG9hZGVyLmhhc093blByb3BlcnR5KFwib2NMYXp5TG9hZExvYWRlclwiKXx8bi5qc0xvYWRlci5oYXNPd25Qcm9wZXJ0eShcInJlcXVpcmVqc1wiKSk/KG4uXyRsb2cuZXJyb3IociksZy5yZWplY3QocikpOmcucmVzb2x2ZSgpfSx0KSx1LnB1c2goZy5wcm9taXNlKX1pZigwPT09dS5sZW5ndGgpe3ZhciBwPXIuZGVmZXIoKSxtPVwiRXJyb3I6IG5vIGZpbGUgdG8gbG9hZCBoYXMgYmVlbiBmb3VuZCwgaWYgeW91J3JlIHRyeWluZyB0byBsb2FkIGFuIGV4aXN0aW5nIG1vZHVsZSB5b3Ugc2hvdWxkIHVzZSB0aGUgJ2luamVjdCcgbWV0aG9kIGluc3RlYWQgb2YgJ2xvYWQnLlwiO3JldHVybiBuLl8kbG9nLmVycm9yKG0pLHAucmVqZWN0KG0pLHAucHJvbWlzZX1yZXR1cm4gdC5zZXJpZSYmdC5maWxlcy5sZW5ndGg+MD9yLmFsbCh1KS50aGVuKGZ1bmN0aW9uKCl7cmV0dXJuIG4uZmlsZXNMb2FkZXIobyx0KX0pOnIuYWxsKHUpW1wiZmluYWxseVwiXShmdW5jdGlvbihlKXtyZXR1cm4gbi50b2dnbGVXYXRjaCghMSksZX0pfSxuLmxvYWQ9ZnVuY3Rpb24obyl7dmFyIHQsaT1hcmd1bWVudHMubGVuZ3RoPD0xfHx2b2lkIDA9PT1hcmd1bWVudHNbMV0/e306YXJndW1lbnRzWzFdLGE9dGhpcyxzPW51bGwsdT1bXSxjPXIuZGVmZXIoKSxkPWUuY29weShvKSxsPWUuY29weShpKTtpZihlLmlzQXJyYXkoZCkpcmV0dXJuIGUuZm9yRWFjaChkLGZ1bmN0aW9uKGUpe3UucHVzaChhLmxvYWQoZSxsKSl9KSxyLmFsbCh1KS50aGVuKGZ1bmN0aW9uKGUpe2MucmVzb2x2ZShlKX0sZnVuY3Rpb24oZSl7Yy5yZWplY3QoZSl9KSxjLnByb21pc2U7aWYoZS5pc1N0cmluZyhkKT8ocz1hLmdldE1vZHVsZUNvbmZpZyhkKSxzfHwocz17ZmlsZXM6W2RdfSkpOmUuaXNPYmplY3QoZCkmJihzPWUuaXNEZWZpbmVkKGQucGF0aCkmJmUuaXNEZWZpbmVkKGQudHlwZSk/e2ZpbGVzOltkXX06YS5zZXRNb2R1bGVDb25maWcoZCkpLG51bGw9PT1zKXt2YXIgZj1hLl9nZXRNb2R1bGVOYW1lKGQpO3JldHVybiB0PSdNb2R1bGUgXCInKyhmfHxcInVua25vd25cIikrJ1wiIGlzIG5vdCBjb25maWd1cmVkLCBjYW5ub3QgbG9hZC4nLG4uXyRsb2cuZXJyb3IodCksYy5yZWplY3QobmV3IEVycm9yKHQpKSxjLnByb21pc2V9ZS5pc0RlZmluZWQocy50ZW1wbGF0ZSkmJihlLmlzVW5kZWZpbmVkKHMuZmlsZXMpJiYocy5maWxlcz1bXSksZS5pc1N0cmluZyhzLnRlbXBsYXRlKT9zLmZpbGVzLnB1c2gocy50ZW1wbGF0ZSk6ZS5pc0FycmF5KHMudGVtcGxhdGUpJiZzLmZpbGVzLmNvbmNhdChzLnRlbXBsYXRlKSk7dmFyIGg9ZS5leHRlbmQoe30sbCxzKTtyZXR1cm4gZS5pc1VuZGVmaW5lZChzLmZpbGVzKSYmZS5pc0RlZmluZWQocy5uYW1lKSYmbi5tb2R1bGVFeGlzdHMocy5uYW1lKT9uLmluamVjdChzLm5hbWUsaCwhMCk6KG4uZmlsZXNMb2FkZXIocyxoKS50aGVuKGZ1bmN0aW9uKCl7bi5pbmplY3QobnVsbCxoKS50aGVuKGZ1bmN0aW9uKGUpe2MucmVzb2x2ZShlKX0sZnVuY3Rpb24oZSl7Yy5yZWplY3QoZSl9KX0sZnVuY3Rpb24oZSl7Yy5yZWplY3QoZSl9KSxjLnByb21pc2UpfSxufV0pfV0pfShhbmd1bGFyKSxmdW5jdGlvbihlKXtcInVzZSBzdHJpY3RcIjtlLm1vZHVsZShcIm9jLmxhenlMb2FkXCIpLmNvbmZpZyhbXCIkcHJvdmlkZVwiLGZ1bmN0aW9uKG4pe24uZGVjb3JhdG9yKFwiJG9jTGF6eUxvYWRcIixbXCIkZGVsZWdhdGVcIixcIiRxXCIsZnVuY3Rpb24obixyKXtyZXR1cm4gbi5jc3NMb2FkZXI9ZnVuY3Rpb24obyx0LGkpe3ZhciBhPVtdO2UuZm9yRWFjaChvLGZ1bmN0aW9uKGUpe2EucHVzaChuLmJ1aWxkRWxlbWVudChcImNzc1wiLGUsaSkpfSksci5hbGwoYSkudGhlbihmdW5jdGlvbigpe3QoKX0sZnVuY3Rpb24oZSl7dChlKX0pfSxuLmNzc0xvYWRlci5vY0xhenlMb2FkTG9hZGVyPSEwLG59XSl9XSl9KGFuZ3VsYXIpLGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2UubW9kdWxlKFwib2MubGF6eUxvYWRcIikuY29uZmlnKFtcIiRwcm92aWRlXCIsZnVuY3Rpb24obil7bi5kZWNvcmF0b3IoXCIkb2NMYXp5TG9hZFwiLFtcIiRkZWxlZ2F0ZVwiLFwiJHFcIixmdW5jdGlvbihuLHIpe3JldHVybiBuLmpzTG9hZGVyPWZ1bmN0aW9uKG8sdCxpKXt2YXIgYT1bXTtlLmZvckVhY2gobyxmdW5jdGlvbihlKXthLnB1c2gobi5idWlsZEVsZW1lbnQoXCJqc1wiLGUsaSkpfSksci5hbGwoYSkudGhlbihmdW5jdGlvbigpe3QoKX0sZnVuY3Rpb24oZSl7dChlKX0pfSxuLmpzTG9hZGVyLm9jTGF6eUxvYWRMb2FkZXI9ITAsbn1dKX1dKX0oYW5ndWxhciksZnVuY3Rpb24oZSl7XCJ1c2Ugc3RyaWN0XCI7ZS5tb2R1bGUoXCJvYy5sYXp5TG9hZFwiKS5jb25maWcoW1wiJHByb3ZpZGVcIixmdW5jdGlvbihuKXtuLmRlY29yYXRvcihcIiRvY0xhenlMb2FkXCIsW1wiJGRlbGVnYXRlXCIsXCIkdGVtcGxhdGVDYWNoZVwiLFwiJHFcIixcIiRodHRwXCIsZnVuY3Rpb24obixyLG8sdCl7cmV0dXJuIG4udGVtcGxhdGVzTG9hZGVyPWZ1bmN0aW9uKGksYSxzKXt2YXIgdT1bXSxjPW4uX2dldEZpbGVzQ2FjaGUoKTtyZXR1cm4gZS5mb3JFYWNoKGksZnVuY3Rpb24obil7dmFyIGk9by5kZWZlcigpO3UucHVzaChpLnByb21pc2UpLHQuZ2V0KG4scykudGhlbihmdW5jdGlvbihvKXt2YXIgdD1vLmRhdGE7ZS5pc1N0cmluZyh0KSYmdC5sZW5ndGg+MCYmZS5mb3JFYWNoKGUuZWxlbWVudCh0KSxmdW5jdGlvbihlKXtcIlNDUklQVFwiPT09ZS5ub2RlTmFtZSYmXCJ0ZXh0L25nLXRlbXBsYXRlXCI9PT1lLnR5cGUmJnIucHV0KGUuaWQsZS5pbm5lckhUTUwpfSksZS5pc1VuZGVmaW5lZChjLmdldChuKSkmJmMucHV0KG4sITApLGkucmVzb2x2ZSgpfSlbXCJjYXRjaFwiXShmdW5jdGlvbihlKXtpLnJlamVjdChuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2FkIHRlbXBsYXRlIGZpbGUgXCInK24rJ1wiOiAnK2UuZGF0YSkpfSl9KSxvLmFsbCh1KS50aGVuKGZ1bmN0aW9uKCl7YSgpfSxmdW5jdGlvbihlKXthKGUpfSl9LG4udGVtcGxhdGVzTG9hZGVyLm9jTGF6eUxvYWRMb2FkZXI9ITAsbn1dKX1dKX0oYW5ndWxhciksQXJyYXkucHJvdG90eXBlLmluZGV4T2Z8fChBcnJheS5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlLG4pe3ZhciByO2lmKG51bGw9PXRoaXMpdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ0aGlzXCIgaXMgbnVsbCBvciBub3QgZGVmaW5lZCcpO3ZhciBvPU9iamVjdCh0aGlzKSx0PW8ubGVuZ3RoPj4+MDtpZigwPT09dClyZXR1cm4tMTt2YXIgaT0rbnx8MDtpZihNYXRoLmFicyhpKT09PTEvMCYmKGk9MCksaT49dClyZXR1cm4tMTtmb3Iocj1NYXRoLm1heChpPj0wP2k6dC1NYXRoLmFicyhpKSwwKTt0PnI7KXtpZihyIGluIG8mJm9bcl09PT1lKXJldHVybiByO3IrK31yZXR1cm4tMX0pOyJdfQ==
