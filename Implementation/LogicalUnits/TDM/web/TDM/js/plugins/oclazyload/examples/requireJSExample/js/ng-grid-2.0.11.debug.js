!function(window,$){"use strict";var CUSTOM_FILTERS=/CUSTOM_FILTERS/g,COL_FIELD=/COL_FIELD/g,DISPLAY_CELL_TEMPLATE=/DISPLAY_CELL_TEMPLATE/g,EDITABLE_CELL_TEMPLATE=/EDITABLE_CELL_TEMPLATE/g,CELL_EDITABLE_CONDITION=/CELL_EDITABLE_CONDITION/g,TEMPLATE_REGEXP=/<.+>/;window.ngGrid={},window.ngGrid.i18n={};angular.module("ngGrid.services",[]);var ngGridDirectives=angular.module("ngGrid.directives",[]),ngGridFilters=angular.module("ngGrid.filters",[]);angular.module("ngGrid",["ngGrid.services","ngGrid.directives","ngGrid.filters"]);String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(elt){var len=this.length>>>0,from=Number(arguments[1])||0;for((from=from<0?Math.ceil(from):Math.floor(from))<0&&(from+=len);from<len;from++)if(from in this&&this[from]===elt)return from;return-1}),Array.prototype.filter||(Array.prototype.filter=function(fun){var t=Object(this),len=t.length>>>0;if("function"!=typeof fun)throw new TypeError;for(var res=[],thisp=arguments[1],i=0;i<len;i++)if(i in t){var val=t[i];fun.call(thisp,val,i,t)&&res.push(val)}return res}),ngGridFilters.filter("checkmark",(function(){return function(input){return input?"✔":"✘"}})),ngGridFilters.filter("ngColumns",(function(){return function(input){return input.filter((function(col){return!col.isAggCol}))}})),angular.module("ngGrid.services").factory("$domUtilityService",["$utilityService","$window",function($utils,$window){var $testContainer,domUtilityService={},regexCache={};return domUtilityService.eventStorage={},domUtilityService.AssignGridContainers=function($scope,rootEl,grid){grid.$root=$(rootEl),grid.$topPanel=grid.$root.find(".ngTopPanel"),grid.$groupPanel=grid.$root.find(".ngGroupPanel"),grid.$headerContainer=grid.$topPanel.find(".ngHeaderContainer"),$scope.$headerContainer=grid.$headerContainer,grid.$headerScroller=grid.$topPanel.find(".ngHeaderScroller"),grid.$headers=grid.$headerScroller.children(),grid.$viewport=grid.$root.find(".ngViewport"),grid.$canvas=grid.$viewport.find(".ngCanvas"),grid.$footerPanel=grid.$root.find(".ngFooterPanel");var scopeDereg=$scope.$watch((function(){return grid.$viewport.scrollLeft()}),(function(newLeft){return grid.$headerContainer.scrollLeft(newLeft)}));$scope.$on("$destroy",(function(){$(grid.$root.parent()).off("resize.nggrid"),grid.$root=null,grid.$topPanel=null,grid.$headerContainer=null,grid.$headers=null,grid.$canvas=null,grid.$footerPanel=null,scopeDereg()})),domUtilityService.UpdateGridLayout($scope,grid)},domUtilityService.getRealWidth=function(obj){var width=0,hiddenParents=obj.parents().andSelf().not(":visible");return $.swap(hiddenParents[0],{visibility:"hidden",display:"block"},(function(){width=obj.outerWidth()})),width},domUtilityService.UpdateGridLayout=function($scope,grid){if(grid.$root){var scrollTop=grid.$viewport.scrollTop();grid.elementDims.rootMaxW=grid.$root.width(),grid.$root.is(":hidden")&&(grid.elementDims.rootMaxW=domUtilityService.getRealWidth(grid.$root)),grid.elementDims.rootMaxH=grid.$root.height(),grid.refreshDomSizes(),$scope.adjustScrollTop(scrollTop,!0)}},domUtilityService.numberOfGrids=0,domUtilityService.setStyleText=function(grid,css){var style=grid.styleSheet,gridId=grid.gridId,doc=$window.document;style||(style=doc.getElementById(gridId)),style||((style=doc.createElement("style")).type="text/css",style.id=gridId,(doc.head||doc.getElementsByTagName("head")[0]).appendChild(style)),style.styleSheet&&!style.sheet?style.styleSheet.cssText=css:style.innerHTML=css,grid.styleSheet=style,grid.styleText=css},domUtilityService.BuildStyles=function($scope,grid,digest){var css,rowHeight=grid.config.rowHeight,gridId=grid.gridId,cols=$scope.columns,sumWidth=0,trw=$scope.totalRowWidth();css="."+gridId+" .ngCanvas { width: "+trw+"px; }."+gridId+" .ngRow { width: "+trw+"px; }."+gridId+" .ngCanvas { width: "+trw+"px; }."+gridId+" .ngHeaderScroller { width: "+(trw+domUtilityService.ScrollH)+"px}";for(var i=0;i<cols.length;i++){var col=cols[i];!1!==col.visible&&(css+="."+gridId+" .col"+i+" { width: "+col.width+"px; left: "+sumWidth+"px; height: "+rowHeight+"px }."+gridId+" .colt"+i+" { width: "+col.width+"px; }",sumWidth+=col.width)}domUtilityService.setStyleText(grid,css),$scope.adjustScrollLeft(grid.$viewport.scrollLeft()),digest&&domUtilityService.digest($scope)},domUtilityService.setColLeft=function(col,colLeft,grid){if(grid.styleText){var regex=regexCache[col.index];regex||(regex=regexCache[col.index]=new RegExp(".col"+col.index+" { width: [0-9]+px; left: [0-9]+px"));var css=grid.styleText.replace(regex,".col"+col.index+" { width: "+col.width+"px; left: "+colLeft+"px");domUtilityService.setStyleText(grid,css)}},domUtilityService.setColLeft.immediate=1,domUtilityService.RebuildGrid=function($scope,grid){domUtilityService.UpdateGridLayout($scope,grid),(null==grid.config.maintainColumnRatios||grid.config.maintainColumnRatios)&&grid.configureColumnWidths(),$scope.adjustScrollLeft(grid.$viewport.scrollLeft()),domUtilityService.BuildStyles($scope,grid,!0)},domUtilityService.digest=function($scope){$scope.$root.$$phase||$scope.$digest()},domUtilityService.ScrollH=17,domUtilityService.ScrollW=17,domUtilityService.LetterW=10,($testContainer=$("<div></div>")).appendTo("body"),$testContainer.height(100).width(100).css("position","absolute").css("overflow","scroll"),$testContainer.append('<div style="height: 400px; width: 400px;"></div>'),domUtilityService.ScrollH=$testContainer.height()-$testContainer[0].clientHeight,domUtilityService.ScrollW=$testContainer.width()-$testContainer[0].clientWidth,$testContainer.empty(),$testContainer.attr("style",""),$testContainer.append('<span style="font-family: Verdana, Helvetica, Sans-Serif; font-size: 14px;"><strong>M</strong></span>'),domUtilityService.LetterW=$testContainer.children().first().width(),$testContainer.remove(),domUtilityService}]),angular.module("ngGrid.services").factory("$sortService",["$parse",function($parse){var sortService={colSortFnCache:{},isCustomSort:!1,guessSortFn:function(item){switch(typeof item){case"number":return sortService.sortNumber;case"boolean":return sortService.sortBool;case"string":return item.match(/^[-+]?[£$¤]?[\d,.]+%?$/)?sortService.sortNumberStr:sortService.sortAlpha;default:return"[object Date]"===Object.prototype.toString.call(item)?sortService.sortDate:sortService.basicSort}},basicSort:function(a,b){return a===b?0:a<b?-1:1},sortNumber:function(a,b){return a-b},sortNumberStr:function(a,b){var numA,numB,badA=!1,badB=!1;return numA=parseFloat(a.replace(/[^0-9.-]/g,"")),isNaN(numA)&&(badA=!0),numB=parseFloat(b.replace(/[^0-9.-]/g,"")),isNaN(numB)&&(badB=!0),badA&&badB?0:badA?1:badB?-1:numA-numB},sortAlpha:function(a,b){var strA=a.toLowerCase(),strB=b.toLowerCase();return strA===strB?0:strA<strB?-1:1},sortDate:function(a,b){var timeA=a.getTime(),timeB=b.getTime();return timeA===timeB?0:timeA<timeB?-1:1},sortBool:function(a,b){return a&&b?0:a||b?a?1:-1:0},sortData:function(sortInfo,data){if(data&&sortInfo){var col,direction,l=sortInfo.fields.length,order=sortInfo.fields,d=data.slice(0);data.sort((function(itemA,itemB){for(var res,sortFn,tem=0,indx=0;0===tem&&indx<l;){col=sortInfo.columns[indx],direction=sortInfo.directions[indx],sortFn=sortService.getSortFn(col,d);var propA=$parse(order[indx])(itemA),propB=$parse(order[indx])(itemB);sortService.isCustomSort?(res=sortFn(propA,propB),tem="asc"===direction?res:0-res):!propA&&0!==propA||!propB&&0!==propB?propB||propA?propA?propB||(tem=-1):tem=1:tem=0:(res=sortFn(propA,propB),tem="asc"===direction?res:0-res),indx++}return tem}))}},Sort:function(sortInfo,data){sortService.isSorting||(sortService.isSorting=!0,sortService.sortData(sortInfo,data),sortService.isSorting=!1)},getSortFn:function(col,data){var sortFn,item;if(sortService.colSortFnCache[col.field])sortFn=sortService.colSortFnCache[col.field];else if(void 0!==col.sortingAlgorithm)sortFn=col.sortingAlgorithm,sortService.colSortFnCache[col.field]=col.sortingAlgorithm,sortService.isCustomSort=!0;else{if(!(item=data[0]))return sortFn;(sortFn=sortService.guessSortFn($parse(col.field)(item)))?sortService.colSortFnCache[col.field]=sortFn:sortFn=sortService.sortAlpha}return sortFn}};return sortService}]),angular.module("ngGrid.services").factory("$utilityService",["$parse",function($parse){var seedId,funcNameRegex=/function (.{1,})\(/;return{visualLength:function(node){var elem=document.getElementById("testDataLength");elem||((elem=document.createElement("SPAN")).id="testDataLength",elem.style.visibility="hidden",document.body.appendChild(elem));var $node=$(node);$(elem).css({font:$node.css("font"),"font-size":$node.css("font-size"),"font-family":$node.css("font-family")}),elem.innerHTML=$node.text();var width=elem.offsetWidth;return document.body.removeChild(elem),width},forIn:function(obj,action){for(var prop in obj)obj.hasOwnProperty(prop)&&action(obj[prop],prop)},evalProperty:function(entity,path){return $parse("entity."+path)({entity:entity})},endsWith:function(str,suffix){return!(!str||!suffix||"string"!=typeof str)&&-1!==str.indexOf(suffix,str.length-suffix.length)},isNullOrUndefined:function(obj){return null==obj},getElementsByClassName:function(cl){if(document.getElementsByClassName)return document.getElementsByClassName(cl);for(var retnode=[],myclass=new RegExp("\\b"+cl+"\\b"),elem=document.getElementsByTagName("*"),i=0;i<elem.length;i++){var classes=elem[i].className;myclass.test(classes)&&retnode.push(elem[i])}return retnode},newId:(seedId=(new Date).getTime(),function(){return seedId+=1}),seti18n:function($scope,language){var $langPack=window.ngGrid.i18n[language];for(var label in $langPack)$scope.i18n[label]=$langPack[label]},getInstanceType:function(o){var results=funcNameRegex.exec(o.constructor.toString());return results&&results.length>1?results[1].replace(/^\s+|\s+$/g,""):""}}}]);var ngAggregate=function(aggEntity,rowFactory,rowHeight,groupInitState){this.rowIndex=0,this.offsetTop=this.rowIndex*rowHeight,this.entity=aggEntity,this.label=aggEntity.gLabel,this.field=aggEntity.gField,this.depth=aggEntity.gDepth,this.parent=aggEntity.parent,this.children=aggEntity.children,this.aggChildren=aggEntity.aggChildren,this.aggIndex=aggEntity.aggIndex,this.collapsed=groupInitState,this.groupInitState=groupInitState,this.rowFactory=rowFactory,this.rowHeight=rowHeight,this.isAggRow=!0,this.offsetLeft=25*aggEntity.gDepth,this.aggLabelFilter=aggEntity.aggLabelFilter};ngAggregate.prototype.toggleExpand=function(){this.collapsed=!this.collapsed,this.orig&&(this.orig.collapsed=this.collapsed),this.notifyChildren()},ngAggregate.prototype.setExpand=function(state){this.collapsed=state,this.notifyChildren()},ngAggregate.prototype.notifyChildren=function(){for(var longest=Math.max(this.rowFactory.aggCache.length,this.children.length),i=0;i<longest;i++)if(this.aggChildren[i]&&(this.aggChildren[i].entity._ng_hidden_=this.collapsed,this.collapsed&&this.aggChildren[i].setExpand(this.collapsed)),this.children[i]&&(this.children[i]._ng_hidden_=this.collapsed),i>this.aggIndex&&this.rowFactory.aggCache[i]){var agg=this.rowFactory.aggCache[i],offset=30*this.children.length;agg.offsetTop=this.collapsed?agg.offsetTop-offset:agg.offsetTop+offset}this.rowFactory.renderedChange()},ngAggregate.prototype.aggClass=function(){return this.collapsed?"ngAggArrowCollapsed":"ngAggArrowExpanded"},ngAggregate.prototype.totalChildren=function(){if(this.aggChildren.length>0){var i=0,recurse=function(cur){cur.aggChildren.length>0?angular.forEach(cur.aggChildren,(function(a){recurse(a)})):i+=cur.children.length};return recurse(this),i}return this.children.length},ngAggregate.prototype.copy=function(){var ret=new ngAggregate(this.entity,this.rowFactory,this.rowHeight,this.groupInitState);return ret.orig=this,ret};var ngColumn=function(config,$scope,grid,domUtilityService,$templateCache,$utils){var self=this,colDef=config.colDef,clicks=0,timer=null;self.colDef=config.colDef,self.width=colDef.width,self.groupIndex=0,self.isGroupedBy=!1,self.minWidth=colDef.minWidth?colDef.minWidth:50,self.maxWidth=colDef.maxWidth?colDef.maxWidth:9e3,self.enableCellEdit=void 0!==colDef.enableCellEdit?colDef.enableCellEdit:config.enableCellEdit||config.enableCellEditOnFocus,self.cellEditableCondition=colDef.cellEditableCondition||config.cellEditableCondition||"true",self.headerRowHeight=config.headerRowHeight,self.displayName=void 0===colDef.displayName?colDef.field:colDef.displayName,self.index=config.index,self.isAggCol=config.isAggCol,self.cellClass=colDef.cellClass,self.sortPriority=void 0,self.cellFilter=colDef.cellFilter?colDef.cellFilter:"",self.field=colDef.field,self.aggLabelFilter=colDef.aggLabelFilter||colDef.cellFilter,self.visible=$utils.isNullOrUndefined(colDef.visible)||colDef.visible,self.sortable=!1,self.resizable=!1,self.pinnable=!1,self.pinned=config.enablePinning&&colDef.pinned,self.originalIndex=null==config.originalIndex?self.index:config.originalIndex,self.groupable=$utils.isNullOrUndefined(colDef.groupable)||colDef.groupable,config.enableSort&&(self.sortable=$utils.isNullOrUndefined(colDef.sortable)||colDef.sortable),config.enableResize&&(self.resizable=$utils.isNullOrUndefined(colDef.resizable)||colDef.resizable),config.enablePinning&&(self.pinnable=$utils.isNullOrUndefined(colDef.pinnable)||colDef.pinnable),self.sortDirection=void 0,self.sortingAlgorithm=colDef.sortFn,self.headerClass=colDef.headerClass,self.cursor=self.sortable?"pointer":"default",self.headerCellTemplate=colDef.headerCellTemplate||$templateCache.get("headerCellTemplate.html"),self.cellTemplate=colDef.cellTemplate||$templateCache.get("cellTemplate.html").replace(CUSTOM_FILTERS,self.cellFilter?"|"+self.cellFilter:""),self.enableCellEdit&&(self.cellEditTemplate=colDef.cellEditTemplate||$templateCache.get("cellEditTemplate.html"),self.editableCellTemplate=colDef.editableCellTemplate||$templateCache.get("editableCellTemplate.html")),colDef.cellTemplate&&!TEMPLATE_REGEXP.test(colDef.cellTemplate)&&(self.cellTemplate=$templateCache.get(colDef.cellTemplate)||$.ajax({type:"GET",url:colDef.cellTemplate,async:!1}).responseText),self.enableCellEdit&&colDef.editableCellTemplate&&!TEMPLATE_REGEXP.test(colDef.editableCellTemplate)&&(self.editableCellTemplate=$templateCache.get(colDef.editableCellTemplate)||$.ajax({type:"GET",url:colDef.editableCellTemplate,async:!1}).responseText),colDef.headerCellTemplate&&!TEMPLATE_REGEXP.test(colDef.headerCellTemplate)&&(self.headerCellTemplate=$templateCache.get(colDef.headerCellTemplate)||$.ajax({type:"GET",url:colDef.headerCellTemplate,async:!1}).responseText),self.colIndex=function(){var classes=self.pinned?"pinned ":"";return classes+="col"+self.index+" colt"+self.index,self.cellClass&&(classes+=" "+self.cellClass),classes},self.groupedByClass=function(){return self.isGroupedBy?"ngGroupedByIcon":"ngGroupIcon"},self.toggleVisible=function(){self.visible=!self.visible},self.showSortButtonUp=function(){return self.sortable?"desc"===self.sortDirection:self.sortable},self.showSortButtonDown=function(){return self.sortable?"asc"===self.sortDirection:self.sortable},self.noSortVisible=function(){return!self.sortDirection},self.sort=function(evt){if(!self.sortable)return!0;var dir="asc"===self.sortDirection?"desc":"asc";return self.sortDirection=dir,config.sortCallback(self,evt),!1},self.gripClick=function(){1===++clicks?timer=setTimeout((function(){clicks=0}),500):(clearTimeout(timer),config.resizeOnDataCallback(self),clicks=0)},self.gripOnMouseDown=function(event){return $scope.isColumnResizing=!0,event.ctrlKey&&!self.pinned?(self.toggleVisible(),domUtilityService.BuildStyles($scope,grid),!0):(event.target.parentElement.style.cursor="col-resize",self.startMousePosition=event.clientX,self.origWidth=self.width,$(document).mousemove(self.onMouseMove),$(document).mouseup(self.gripOnMouseUp),!1)},self.onMouseMove=function(event){var newWidth=event.clientX-self.startMousePosition+self.origWidth;return self.width=newWidth<self.minWidth?self.minWidth:newWidth>self.maxWidth?self.maxWidth:newWidth,$scope.hasUserChangedGridColumnWidths=!0,domUtilityService.BuildStyles($scope,grid),!1},self.gripOnMouseUp=function(event){return $(document).off("mousemove",self.onMouseMove),$(document).off("mouseup",self.gripOnMouseUp),event.target.parentElement.style.cursor="default",domUtilityService.digest($scope),$scope.isColumnResizing=!1,!1},self.copy=function(){var ret=new ngColumn(config,$scope,grid,domUtilityService,$templateCache,$utils);return ret.isClone=!0,ret.orig=self,ret},self.setVars=function(fromCol){self.orig=fromCol,self.width=fromCol.width,self.groupIndex=fromCol.groupIndex,self.isGroupedBy=fromCol.isGroupedBy,self.displayName=fromCol.displayName,self.index=fromCol.index,self.isAggCol=fromCol.isAggCol,self.cellClass=fromCol.cellClass,self.cellFilter=fromCol.cellFilter,self.field=fromCol.field,self.aggLabelFilter=fromCol.aggLabelFilter,self.visible=fromCol.visible,self.sortable=fromCol.sortable,self.resizable=fromCol.resizable,self.pinnable=fromCol.pinnable,self.pinned=fromCol.pinned,self.originalIndex=fromCol.originalIndex,self.sortDirection=fromCol.sortDirection,self.sortingAlgorithm=fromCol.sortingAlgorithm,self.headerClass=fromCol.headerClass,self.headerCellTemplate=fromCol.headerCellTemplate,self.cellTemplate=fromCol.cellTemplate,self.cellEditTemplate=fromCol.cellEditTemplate}},ngDimension=function(options){this.outerHeight=null,this.outerWidth=null,$.extend(this,options)},ngDomAccessProvider=function(grid){this.previousColumn=null,this.grid=grid};ngDomAccessProvider.prototype.changeUserSelect=function(elm,value){elm.css({"-webkit-touch-callout":value,"-webkit-user-select":value,"-khtml-user-select":value,"-moz-user-select":"none"===value?"-moz-none":value,"-ms-user-select":value,"user-select":value})},ngDomAccessProvider.prototype.focusCellElement=function($scope,index){if($scope.selectionProvider.lastClickedRow){var columnIndex=void 0!==index?index:this.previousColumn,elm=$scope.selectionProvider.lastClickedRow.clone?$scope.selectionProvider.lastClickedRow.clone.elm:$scope.selectionProvider.lastClickedRow.elm;if(void 0!==columnIndex&&elm){var columns=angular.element(elm[0].children).filter((function(){return 8!==this.nodeType})),i=Math.max(Math.min($scope.renderedColumns.length-1,columnIndex),0);this.grid.config.showSelectionCheckbox&&angular.element(columns[i]).scope()&&0===angular.element(columns[i]).scope().col.index&&(i=1),columns[i]&&columns[i].children[1].children[0].focus(),this.previousColumn=columnIndex}}},ngDomAccessProvider.prototype.selectionHandlers=function($scope,elm){var doingKeyDown=!1,self=this;function keydown(evt){if(16===evt.keyCode)return self.changeUserSelect(elm,"none",evt),!0;if(!doingKeyDown){doingKeyDown=!0;var ret=function($scope,elm,evt,grid){if(void 0===$scope.selectionProvider.selectedItems)return!0;var newColumnIndex,items,charCode=evt.which||evt.keyCode,lastInRow=!1,firstInRow=!1,rowIndex=void 0===$scope.selectionProvider.lastClickedRow?1:$scope.selectionProvider.lastClickedRow.rowIndex,visibleCols=$scope.columns.filter((function(c){return c.visible})),pinnedCols=$scope.columns.filter((function(c){return c.pinned}));if($scope.col&&(newColumnIndex=visibleCols.indexOf($scope.col)),37!==charCode&&38!==charCode&&39!==charCode&&40!==charCode&&(grid.config.noTabInterference||9!==charCode)&&13!==charCode)return!0;if($scope.enableCellSelection){9===charCode&&evt.preventDefault();var focusedOnFirstColumn=$scope.showSelectionCheckbox?1===$scope.col.index:0===$scope.col.index,focusedOnFirstVisibleColumns=1===$scope.$index||0===$scope.$index,focusedOnLastVisibleColumns=$scope.$index===$scope.renderedColumns.length-1||$scope.$index===$scope.renderedColumns.length-2,focusedOnLastColumn=visibleCols.indexOf($scope.col)===visibleCols.length-1,focusedOnLastPinnedColumn=pinnedCols.indexOf($scope.col)===pinnedCols.length-1;if(37===charCode||9===charCode&&evt.shiftKey){var scrollTo=0;focusedOnFirstColumn||(newColumnIndex-=1),focusedOnFirstVisibleColumns?focusedOnFirstColumn&&9===charCode&&evt.shiftKey?(scrollTo=grid.$canvas.width(),newColumnIndex=visibleCols.length-1,firstInRow=!0):scrollTo=grid.$viewport.scrollLeft()-$scope.col.width:pinnedCols.length>0&&(scrollTo=grid.$viewport.scrollLeft()-visibleCols[newColumnIndex].width),grid.$viewport.scrollLeft(scrollTo)}else(39===charCode||9===charCode&&!evt.shiftKey)&&(focusedOnLastVisibleColumns?focusedOnLastColumn&&9===charCode&&!evt.shiftKey?(grid.$viewport.scrollLeft(0),newColumnIndex=$scope.showSelectionCheckbox?1:0,lastInRow=!0):grid.$viewport.scrollLeft(grid.$viewport.scrollLeft()+$scope.col.width):focusedOnLastPinnedColumn&&grid.$viewport.scrollLeft(0),focusedOnLastColumn||(newColumnIndex+=1))}items=$scope.configGroups.length>0?grid.rowFactory.parsedData.filter((function(row){return!row.isAggRow})):grid.filteredRows;var offset=0;if(0!==rowIndex&&(38===charCode||13===charCode&&evt.shiftKey||9===charCode&&evt.shiftKey&&firstInRow)?offset=-1:rowIndex!==items.length-1&&(40===charCode||13===charCode&&!evt.shiftKey||9===charCode&&lastInRow)&&(offset=1),offset){var r=items[rowIndex+offset];r.beforeSelectionChange(r,evt)&&(r.continueSelection(evt),$scope.$emit("ngGridEventDigestGridParent"),$scope.selectionProvider.lastClickedRow.renderedRowIndex>=$scope.renderedRows.length-6-2?grid.$viewport.scrollTop(grid.$viewport.scrollTop()+$scope.rowHeight):$scope.selectionProvider.lastClickedRow.renderedRowIndex<=8&&grid.$viewport.scrollTop(grid.$viewport.scrollTop()-$scope.rowHeight))}return $scope.enableCellSelection&&setTimeout((function(){$scope.domAccessProvider.focusCellElement($scope,$scope.renderedColumns.indexOf(visibleCols[newColumnIndex]))}),3),!1}($scope,0,evt,self.grid);return doingKeyDown=!1,ret}return!0}function keyup(evt){return 16===evt.keyCode&&self.changeUserSelect(elm,"text",evt),!0}elm.bind("keydown",keydown),elm.bind("keyup",keyup),elm.on("$destroy",(function(){elm.off("keydown",keydown),elm.off("keyup",keyup)}))};var ngEventProvider=function(grid,$scope,domUtilityService,$timeout){var self=this;self.colToMove=void 0,self.groupToMove=void 0,self.assignEvents=function(){grid.config.jqueryUIDraggable&&!grid.config.enablePinning?(grid.$groupPanel.droppable({addClasses:!1,drop:function(event){self.onGroupDrop(event)}}),grid.$groupPanel.on("$destroy",(function(){grid.$groupPanel=null}))):(grid.$groupPanel.on("mousedown",self.onGroupMouseDown).on("dragover",self.dragOver).on("drop",self.onGroupDrop),grid.$topPanel.on("mousedown",".ngHeaderScroller",self.onHeaderMouseDown).on("dragover",".ngHeaderScroller",self.dragOver),grid.$groupPanel.on("$destroy",(function(){grid.$groupPanel&&grid.$groupPanel.off("mousedown"),grid.$groupPanel=null})),grid.config.enableColumnReordering&&grid.$topPanel.on("drop",".ngHeaderScroller",self.onHeaderDrop),grid.$topPanel.on("$destroy",(function(){grid.$topPanel&&grid.$topPanel.off("mousedown"),grid.config.enableColumnReordering&&grid.$topPanel&&grid.$topPanel.off("drop"),grid.$topPanel=null}))),$scope.$on("$destroy",$scope.$watch("renderedColumns",(function(){$timeout(self.setDraggables)})))},self.dragStart=function(evt){evt.dataTransfer.setData("text","")},self.dragOver=function(evt){evt.preventDefault()},self.setDraggables=function(){if(grid.config.jqueryUIDraggable)grid.$root&&grid.$root.find(".ngHeaderSortColumn").draggable({helper:"clone",appendTo:"body",stack:"div",addClasses:!1,start:function(event){self.onHeaderMouseDown(event)}}).droppable({drop:function(event){self.onHeaderDrop(event)}});else{var columns=grid.$root.find(".ngHeaderSortColumn");if(angular.forEach(columns,(function(col){col.className&&-1!==col.className.indexOf("ngHeaderSortColumn")&&(col.setAttribute("draggable","true"),col.addEventListener&&(col.addEventListener("dragstart",self.dragStart),angular.element(col).on("$destroy",(function(){angular.element(col).off("dragstart",self.dragStart),col.removeEventListener("dragstart",self.dragStart)}))))})),-1!==navigator.userAgent.indexOf("MSIE")){var sortColumn=grid.$root.find(".ngHeaderSortColumn");sortColumn.bind("selectstart",(function(){return this.dragDrop(),!1})),angular.element(sortColumn).on("$destroy",(function(){sortColumn.off("selectstart")}))}}},self.onGroupMouseDown=function(event){var groupItem=$(event.target);if("ngRemoveGroup"!==groupItem[0].className){var groupItemScope=angular.element(groupItem).scope();groupItemScope&&(grid.config.jqueryUIDraggable||(groupItem.attr("draggable","true"),this.addEventListener&&(this.addEventListener("dragstart",self.dragStart),angular.element(this).on("$destroy",(function(){this.removeEventListener("dragstart",self.dragStart)}))),-1!==navigator.userAgent.indexOf("MSIE")&&(groupItem.bind("selectstart",(function(){return this.dragDrop(),!1})),groupItem.on("$destroy",(function(){groupItem.off("selectstart")})))),self.groupToMove={header:groupItem,groupName:groupItemScope.group,index:groupItemScope.$index})}else self.groupToMove=void 0},self.onGroupDrop=function(event){var groupContainer,groupScope;event.stopPropagation(),self.groupToMove?("ngGroupPanel"===(groupContainer=$(event.target).closest(".ngGroupElement")).context.className?($scope.configGroups.splice(self.groupToMove.index,1),$scope.configGroups.push(self.groupToMove.groupName)):(groupScope=angular.element(groupContainer).scope())&&self.groupToMove.index!==groupScope.$index&&($scope.configGroups.splice(self.groupToMove.index,1),$scope.configGroups.splice(groupScope.$index,0,self.groupToMove.groupName)),self.groupToMove=void 0,grid.fixGroupIndexes()):self.colToMove&&(-1===$scope.configGroups.indexOf(self.colToMove.col)&&("ngGroupPanel"===(groupContainer=$(event.target).closest(".ngGroupElement")).context.className||"ngGroupPanelDescription ng-binding"===groupContainer.context.className?$scope.groupBy(self.colToMove.col):(groupScope=angular.element(groupContainer).scope())&&$scope.removeGroup(groupScope.$index)),self.colToMove=void 0),$scope.$$phase||$scope.$apply()},self.onHeaderMouseDown=function(event){var headerContainer=$(event.target).closest(".ngHeaderSortColumn"),headerScope=angular.element(headerContainer).scope();headerScope&&(self.colToMove={header:headerContainer,col:headerScope.col})},self.onHeaderDrop=function(event){if(self.colToMove&&!self.colToMove.col.pinned){var headerContainer=$(event.target).closest(".ngHeaderSortColumn"),headerScope=angular.element(headerContainer).scope();if(headerScope){if(self.colToMove.col===headerScope.col||headerScope.col.pinned)return;$scope.columns.splice(self.colToMove.col.index,1),$scope.columns.splice(headerScope.col.index,0,self.colToMove.col),grid.fixColumnIndexes(),self.colToMove=void 0,domUtilityService.digest($scope)}}},self.assignGridEventHandlers=function(){var windowThrottle;-1===grid.config.tabIndex?(grid.$viewport.attr("tabIndex",domUtilityService.numberOfGrids),domUtilityService.numberOfGrids++):grid.$viewport.attr("tabIndex",grid.config.tabIndex);var parentThrottle,windowResize=function(){clearTimeout(windowThrottle),windowThrottle=setTimeout((function(){domUtilityService.RebuildGrid($scope,grid)}),100)};$(window).on("resize.nggrid",windowResize);$(grid.$root.parent()).on("resize.nggrid",(function(){clearTimeout(parentThrottle),parentThrottle=setTimeout((function(){domUtilityService.RebuildGrid($scope,grid)}),100)})),$scope.$on("$destroy",(function(){$(window).off("resize.nggrid",windowResize)}))},self.assignGridEventHandlers(),self.assignEvents()},ngFooter=function($scope,grid){$scope.maxRows=function(){return Math.max($scope.totalServerItems,grid.data.length)},$scope.$on("$destroy",$scope.$watch("totalServerItems",(function(n,o){$scope.currentMaxPages=$scope.maxPages()}))),$scope.multiSelect=grid.config.enableRowSelection&&grid.config.multiSelect,$scope.selectedItemCount=grid.selectedItemCount,$scope.maxPages=function(){return 0===$scope.maxRows()?1:Math.ceil($scope.maxRows()/$scope.pagingOptions.pageSize)},$scope.pageForward=function(){var page=$scope.pagingOptions.currentPage;$scope.totalServerItems>0?$scope.pagingOptions.currentPage=Math.min(page+1,$scope.maxPages()):$scope.pagingOptions.currentPage++},$scope.pageBackward=function(){var page=$scope.pagingOptions.currentPage;$scope.pagingOptions.currentPage=Math.max(page-1,1)},$scope.pageToFirst=function(){$scope.pagingOptions.currentPage=1},$scope.pageToLast=function(){var maxPages=$scope.maxPages();$scope.pagingOptions.currentPage=maxPages},$scope.cantPageForward=function(){var curPage=$scope.pagingOptions.currentPage,maxPages=$scope.maxPages();return $scope.totalServerItems>0?curPage>=maxPages:grid.data.length<1},$scope.cantPageToLast=function(){return!($scope.totalServerItems>0)||$scope.cantPageForward()},$scope.cantPageBackward=function(){return $scope.pagingOptions.currentPage<=1}},ngGrid=function($scope,options,sortService,domUtilityService,$filter,$templateCache,$utils,$timeout,$parse,$http,$q){var defaults={aggregateTemplate:void 0,afterSelectionChange:function(){},beforeSelectionChange:function(){return!0},checkboxCellTemplate:void 0,checkboxHeaderTemplate:void 0,columnDefs:void 0,data:[],dataUpdated:function(){},enableCellEdit:!1,enableCellEditOnFocus:!1,enableCellSelection:!1,enableColumnResize:!1,enableColumnReordering:!1,enableColumnHeavyVirt:!1,enablePaging:!1,enablePinning:!1,enableRowSelection:!0,enableSorting:!0,enableHighlighting:!1,excludeProperties:[],filterOptions:{filterText:"",useExternalFilter:!1},footerRowHeight:55,footerTemplate:void 0,forceSyncScrolling:!0,groups:[],groupsCollapsedByDefault:!0,headerRowHeight:30,headerRowTemplate:void 0,jqueryUIDraggable:!1,jqueryUITheme:!1,keepLastSelected:!0,maintainColumnRatios:void 0,menuTemplate:void 0,multiSelect:!0,pagingOptions:{pageSizes:[250,500,1e3],pageSize:250,currentPage:1},pinSelectionCheckbox:!1,plugins:[],primaryKey:void 0,rowHeight:30,rowTemplate:void 0,selectedItems:[],selectWithCheckboxOnly:!1,showColumnMenu:!1,showFilter:!1,showFooter:!1,showGroupPanel:!1,showSelectionCheckbox:!1,sortInfo:{fields:[],columns:[],directions:[]},tabIndex:-1,totalServerItems:0,useExternalSorting:!1,i18n:"en",virtualizationThreshold:50,noTabInterference:!1},self=this;self.maxCanvasHt=0,self.config=$.extend(defaults,window.ngGrid.config,options),self.config.showSelectionCheckbox=self.config.showSelectionCheckbox&&!1===self.config.enableColumnHeavyVirt,self.config.enablePinning=self.config.enablePinning&&!1===self.config.enableColumnHeavyVirt,self.config.selectWithCheckboxOnly=self.config.selectWithCheckboxOnly&&!1!==self.config.showSelectionCheckbox,self.config.pinSelectionCheckbox=self.config.enablePinning,"string"==typeof options.columnDefs&&(self.config.columnDefs=$scope.$eval(options.columnDefs)),self.rowCache=[],self.rowMap=[],self.gridId="ng"+$utils.newId(),self.$root=null,self.$groupPanel=null,self.$topPanel=null,self.$headerContainer=null,self.$headerScroller=null,self.$headers=null,self.$viewport=null,self.$canvas=null,self.rootDim=self.config.gridDim,self.data=[],self.lateBindColumns=!1,self.filteredRows=[],self.initTemplates=function(){var promises=[];return angular.forEach(["rowTemplate","aggregateTemplate","headerRowTemplate","checkboxCellTemplate","checkboxHeaderTemplate","menuTemplate","footerTemplate"],(function(template){promises.push(self.getTemplate(template))})),$q.all(promises)},self.getTemplate=function(key){var t=self.config[key],uKey=self.gridId+key+".html",p=$q.defer();if(t&&!TEMPLATE_REGEXP.test(t))$http.get(t,{cache:$templateCache}).success((function(data){$templateCache.put(uKey,data),p.resolve()})).error((function(err){p.reject("Could not load template: "+t)}));else if(t)$templateCache.put(uKey,t),p.resolve();else{var dKey=key+".html";$templateCache.put(uKey,$templateCache.get(dKey)),p.resolve()}return p.promise},"object"==typeof self.config.data&&(self.data=self.config.data),self.calcMaxCanvasHeight=function(){return self.config.groups.length>0?self.rowFactory.parsedData.filter((function(e){return!e._ng_hidden_})).length*self.config.rowHeight:self.filteredRows.length*self.config.rowHeight},self.elementDims={scrollW:0,scrollH:0,rowIndexCellW:25,rowSelectedCellW:25,rootMaxW:0,rootMaxH:0},self.setRenderedRows=function(newRows){$scope.renderedRows.length=newRows.length;for(var i=0;i<newRows.length;i++)!$scope.renderedRows[i]||newRows[i].isAggRow||$scope.renderedRows[i].isAggRow?($scope.renderedRows[i]=newRows[i].copy(),$scope.renderedRows[i].collapsed=newRows[i].collapsed,newRows[i].isAggRow||$scope.renderedRows[i].setVars(newRows[i])):$scope.renderedRows[i].setVars(newRows[i]),$scope.renderedRows[i].rowIndex=newRows[i].rowIndex,$scope.renderedRows[i].offsetTop=newRows[i].offsetTop,$scope.renderedRows[i].selected=newRows[i].selected,newRows[i].renderedRowIndex=i;self.refreshDomSizes(),$scope.$emit("ngGridEventRows",newRows)},self.minRowsToRender=function(){var viewportH=$scope.viewportDimHeight()||1;return Math.floor(viewportH/self.config.rowHeight)},self.refreshDomSizes=function(){var dim=new ngDimension;dim.outerWidth=self.elementDims.rootMaxW,dim.outerHeight=self.elementDims.rootMaxH,self.rootDim=dim,self.maxCanvasHt=self.calcMaxCanvasHeight()},self.buildColumnDefsFromData=function(){self.config.columnDefs=[];var item=self.data[0];item?$utils.forIn(item,(function(prop,propName){-1===self.config.excludeProperties.indexOf(propName)&&self.config.columnDefs.push({field:propName})})):self.lateBoundColumns=!0},self.buildColumns=function(){var columnDefs=self.config.columnDefs,cols=[];if(columnDefs||(self.buildColumnDefsFromData(),columnDefs=self.config.columnDefs),self.config.showSelectionCheckbox&&cols.push(new ngColumn({colDef:{field:"✔",width:self.elementDims.rowSelectedCellW,sortable:!1,resizable:!1,groupable:!1,headerCellTemplate:$templateCache.get($scope.gridId+"checkboxHeaderTemplate.html"),cellTemplate:$templateCache.get($scope.gridId+"checkboxCellTemplate.html"),pinned:self.config.pinSelectionCheckbox},index:0,headerRowHeight:self.config.headerRowHeight,sortCallback:self.sortData,resizeOnDataCallback:self.resizeOnData,enableResize:self.config.enableColumnResize,enableSort:self.config.enableSorting,enablePinning:self.config.enablePinning},$scope,self,domUtilityService,$templateCache,$utils)),columnDefs.length>0){var checkboxOffset=self.config.showSelectionCheckbox?1:0,groupOffset=$scope.configGroups.length;$scope.configGroups.length=0,angular.forEach(columnDefs,(function(colDef,i){var column=new ngColumn({colDef:colDef,index:(i+=checkboxOffset)+groupOffset,originalIndex:i,headerRowHeight:self.config.headerRowHeight,sortCallback:self.sortData,resizeOnDataCallback:self.resizeOnData,enableResize:self.config.enableColumnResize,enableSort:self.config.enableSorting,enablePinning:self.config.enablePinning,enableCellEdit:self.config.enableCellEdit||self.config.enableCellEditOnFocus,cellEditableCondition:self.config.cellEditableCondition},$scope,self,domUtilityService,$templateCache,$utils),indx=self.config.groups.indexOf(colDef.field);-1!==indx&&(column.isGroupedBy=!0,$scope.configGroups.splice(indx,0,column),column.groupIndex=$scope.configGroups.length),cols.push(column)})),$scope.columns=cols,self.config.groups.length>0&&self.rowFactory.getGrouping(self.config.groups)}},self.configureColumnWidths=function(){var asterisksArray=[],percentArray=[],asteriskNum=0,totalWidth=0,indexMap={};if(angular.forEach($scope.columns,(function(ngCol,i){if(!$utils.isNullOrUndefined(ngCol.originalIndex)){var origIndex=ngCol.originalIndex;self.config.showSelectionCheckbox&&(0===ngCol.originalIndex&&ngCol.visible&&(totalWidth+=25),origIndex--),indexMap[origIndex]=i}})),angular.forEach(self.config.columnDefs,(function(colDef,i){var ngColumn=$scope.columns[indexMap[i]];colDef.index=i;var t,isPercent=!1;if($utils.isNullOrUndefined(colDef.width)?colDef.width="*":t=(isPercent=!!isNaN(colDef.width)&&$utils.endsWith(colDef.width,"%"))?colDef.width:parseInt(colDef.width,10),isNaN(t)&&!$scope.hasUserChangedGridColumnWidths){if("auto"===(t=colDef.width)){ngColumn.width=ngColumn.minWidth,totalWidth+=ngColumn.width;var temp=ngColumn;return void $scope.$on("$destroy",$scope.$on("ngGridEventData",(function(){self.resizeOnData(temp)})))}if(-1!==t.indexOf("*"))return!1!==ngColumn.visible&&(asteriskNum+=t.length),void asterisksArray.push(colDef);if(isPercent)return void percentArray.push(colDef);throw'unable to parse column width, use percentage ("10%","20%", etc...) or "*" to use remaining width of grid'}!1!==ngColumn.visible&&(totalWidth+=ngColumn.width=parseInt(ngColumn.width,10))})),percentArray.length>0){self.config.maintainColumnRatios=!1!==self.config.maintainColumnRatios;var percentWidth=0,hiddenPercent=0;angular.forEach(percentArray,(function(colDef){var ngColumn=$scope.columns[indexMap[colDef.index]],percent=parseFloat(colDef.width)/100;percentWidth+=percent,ngColumn.visible||(hiddenPercent+=percent)}));var percentWidthUsed=percentWidth-hiddenPercent;angular.forEach(percentArray,(function(colDef){var ngColumn=$scope.columns[indexMap[colDef.index]],percent=parseFloat(colDef.width)/100;percent/=hiddenPercent>0?percentWidthUsed:percentWidth;var pixelsForPercentBasedWidth=self.rootDim.outerWidth*percentWidth;ngColumn.width=pixelsForPercentBasedWidth*percent,totalWidth+=ngColumn.width}))}if(asterisksArray.length>0){self.config.maintainColumnRatios=!1!==self.config.maintainColumnRatios;var remainingWidth=self.rootDim.outerWidth-totalWidth;self.maxCanvasHt>$scope.viewportDimHeight()&&(remainingWidth-=domUtilityService.ScrollW);var asteriskVal=Math.floor(remainingWidth/asteriskNum);angular.forEach(asterisksArray,(function(colDef,i){var ngColumn=$scope.columns[indexMap[colDef.index]];if(ngColumn.width=asteriskVal*colDef.width.length,!1!==ngColumn.visible&&(totalWidth+=ngColumn.width),i===asterisksArray.length-1&&totalWidth<self.rootDim.outerWidth){var gridWidthDifference=self.rootDim.outerWidth-totalWidth;self.maxCanvasHt>$scope.viewportDimHeight()&&(gridWidthDifference-=domUtilityService.ScrollW),ngColumn.width+=gridWidthDifference}}))}},self.init=function(){return self.initTemplates().then((function(){$scope.selectionProvider=new ngSelectionProvider(self,$scope,$parse),$scope.domAccessProvider=new ngDomAccessProvider(self),self.rowFactory=new ngRowFactory(self,$scope,domUtilityService,$templateCache,$utils),self.searchProvider=new ngSearchProvider($scope,self,$filter),self.styleProvider=new ngStyleProvider($scope,self),$scope.$on("$destroy",$scope.$watch("configGroups",(function(a){var tempArr=[];angular.forEach(a,(function(item){tempArr.push(item.field||item)})),self.config.groups=tempArr,self.rowFactory.filteredRowsChanged(),$scope.$emit("ngGridEventGroups",a)}),!0)),$scope.$on("$destroy",$scope.$watch("columns",(function(a){$scope.isColumnResizing||domUtilityService.RebuildGrid($scope,self),$scope.$emit("ngGridEventColumns",a)}),!0)),$scope.$on("$destroy",$scope.$watch((function(){return options.i18n}),(function(newLang){$utils.seti18n($scope,newLang)}))),self.maxCanvasHt=self.calcMaxCanvasHeight(),self.config.sortInfo.fields&&self.config.sortInfo.fields.length>0&&$scope.$on("$destroy",$scope.$watch((function(){return self.config.sortInfo}),(function(sortInfo){sortService.isSorting||(self.sortColumnsInit(),$scope.$emit("ngGridEventSorted",self.config.sortInfo))}),!0))}))},self.resizeOnData=function(col){var longest=col.minWidth,arr=$utils.getElementsByClassName("col"+col.index);angular.forEach(arr,(function(elem,index){var i;if(0===index){var kgHeaderText=$(elem).find(".ngHeaderText");i=$utils.visualLength(kgHeaderText)+10}else{var ngCellText=$(elem).find(".ngCellText");i=$utils.visualLength(ngCellText)+10}i>longest&&(longest=i)})),col.width=col.longest=Math.min(col.maxWidth,longest+7),domUtilityService.BuildStyles($scope,self,!0)},self.lastSortedColumns=[],self.sortData=function(col,evt){if(evt&&evt.shiftKey&&self.config.sortInfo){var indx=self.config.sortInfo.columns.indexOf(col);-1===indx?(1===self.config.sortInfo.columns.length&&(self.config.sortInfo.columns[0].sortPriority=1),self.config.sortInfo.columns.push(col),col.sortPriority=self.config.sortInfo.columns.length,self.config.sortInfo.fields.push(col.field),self.config.sortInfo.directions.push(col.sortDirection),self.lastSortedColumns.push(col)):self.config.sortInfo.directions[indx]=col.sortDirection}else if(!self.config.useExternalSorting||self.config.useExternalSorting&&self.config.sortInfo){var isArr=$.isArray(col);self.config.sortInfo.columns.length=0,self.config.sortInfo.fields.length=0,self.config.sortInfo.directions.length=0;var push=function(c){self.config.sortInfo.columns.push(c),self.config.sortInfo.fields.push(c.field),self.config.sortInfo.directions.push(c.sortDirection),self.lastSortedColumns.push(c)};isArr?angular.forEach(col,(function(c,i){c.sortPriority=i+1,push(c)})):(self.clearSortingData(col),col.sortPriority=void 0,push(col)),self.sortActual(),self.searchProvider.evalFilter(),$scope.$emit("ngGridEventSorted",self.config.sortInfo)}},self.sortColumnsInit=function(){self.config.sortInfo.columns?self.config.sortInfo.columns.length=0:self.config.sortInfo.columns=[];var cols=[];angular.forEach($scope.columns,(function(c){var i=self.config.sortInfo.fields.indexOf(c.field);-1!==i&&(c.sortDirection=self.config.sortInfo.directions[i]||"asc",cols[i]=c)})),1===cols.length?self.sortData(cols[0]):self.sortData(cols)},self.sortActual=function(){if(!self.config.useExternalSorting){var tempData=self.data.slice(0);angular.forEach(tempData,(function(item,i){var e=self.rowMap[i];if(void 0!==e){var v=self.rowCache[e];void 0!==v&&(item.preSortSelected=v.selected,item.preSortIndex=i)}})),sortService.Sort(self.config.sortInfo,tempData),angular.forEach(tempData,(function(item,i){self.rowCache[i].entity=item,self.rowCache[i].selected=item.preSortSelected,self.rowMap[item.preSortIndex]=i,delete item.preSortSelected,delete item.preSortIndex}))}},self.clearSortingData=function(col){col?(angular.forEach(self.lastSortedColumns,(function(c){col.index!==c.index&&(c.sortDirection="",c.sortPriority=null)})),self.lastSortedColumns[0]=col,self.lastSortedColumns.length=1):(angular.forEach(self.lastSortedColumns,(function(c){c.sortDirection="",c.sortPriority=null})),self.lastSortedColumns=[])},self.fixColumnIndexes=function(){for(var i=0;i<$scope.columns.length;i++)$scope.columns[i].index=i},self.fixGroupIndexes=function(){angular.forEach($scope.configGroups,(function(item,i){item.groupIndex=i+1}))},$scope.elementsNeedMeasuring=!0,$scope.columns=[],$scope.renderedRows=[],$scope.renderedColumns=[],$scope.headerRow=null,$scope.rowHeight=self.config.rowHeight,$scope.jqueryUITheme=self.config.jqueryUITheme,$scope.showSelectionCheckbox=self.config.showSelectionCheckbox,$scope.enableCellSelection=self.config.enableCellSelection,$scope.enableCellEditOnFocus=self.config.enableCellEditOnFocus,$scope.footer=null,$scope.selectedItems=self.config.selectedItems,$scope.multiSelect=self.config.multiSelect,$scope.showFooter=self.config.showFooter,$scope.footerRowHeight=$scope.showFooter?self.config.footerRowHeight:0,$scope.showColumnMenu=self.config.showColumnMenu,$scope.forceSyncScrolling=self.config.forceSyncScrolling,$scope.showMenu=!1,$scope.configGroups=[],$scope.gridId=self.gridId,$scope.enablePaging=self.config.enablePaging,$scope.pagingOptions=self.config.pagingOptions,$scope.i18n={},$utils.seti18n($scope,self.config.i18n),$scope.adjustScrollLeft=function(scrollLeft){for(var colwidths=0,totalLeft=0,x=$scope.columns.length,newCols=[],dcv=!self.config.enableColumnHeavyVirt,r=0,addCol=function(c){dcv?newCols.push(c):$scope.renderedColumns[r]?$scope.renderedColumns[r].setVars(c):$scope.renderedColumns[r]=c.copy(),r++},i=0;i<x;i++){var col=$scope.columns[i];if(!1!==col.visible){var w=col.width+colwidths;if(col.pinned){addCol(col);var newLeft=i>0?scrollLeft+totalLeft:scrollLeft;domUtilityService.setColLeft(col,newLeft,self),totalLeft+=col.width}else w>=scrollLeft&&colwidths<=scrollLeft+self.rootDim.outerWidth&&addCol(col);colwidths+=col.width}}dcv&&($scope.renderedColumns=newCols)},self.prevScrollTop=0,self.prevScrollIndex=0,$scope.adjustScrollTop=function(scrollTop,force){if(self.prevScrollTop!==scrollTop||force){scrollTop>0&&self.$viewport[0].scrollHeight-scrollTop<=self.$viewport.outerHeight()&&$scope.$emit("ngGridEventScroll");var newRange,rowIndex=Math.floor(scrollTop/self.config.rowHeight);if(self.filteredRows.length>self.config.virtualizationThreshold){if(self.prevScrollTop<scrollTop&&rowIndex<self.prevScrollIndex+4)return;if(self.prevScrollTop>scrollTop&&rowIndex>self.prevScrollIndex-4)return;newRange=new ngRange(Math.max(0,rowIndex-6),rowIndex+self.minRowsToRender()+6)}else{var maxLen=$scope.configGroups.length>0?self.rowFactory.parsedData.length:self.filteredRows.length;newRange=new ngRange(0,Math.max(maxLen,self.minRowsToRender()+6))}self.prevScrollTop=scrollTop,self.rowFactory.UpdateViewableRange(newRange),self.prevScrollIndex=rowIndex}},$scope.toggleShowMenu=function(){$scope.showMenu=!$scope.showMenu},$scope.toggleSelectAll=function(state,selectOnlyVisible){$scope.selectionProvider.toggleSelectAll(state,!1,selectOnlyVisible)},$scope.totalFilteredItemsLength=function(){return self.filteredRows.length},$scope.showGroupPanel=function(){return self.config.showGroupPanel},$scope.topPanelHeight=function(){return!0===self.config.showGroupPanel?self.config.headerRowHeight+32:self.config.headerRowHeight},$scope.viewportDimHeight=function(){return Math.max(0,self.rootDim.outerHeight-$scope.topPanelHeight()-$scope.footerRowHeight-2)},$scope.groupBy=function(col){if(!(self.data.length<1)&&col.groupable&&col.field){col.sortDirection||col.sort({shiftKey:$scope.configGroups.length>0});var indx=$scope.configGroups.indexOf(col);-1===indx?(col.isGroupedBy=!0,$scope.configGroups.push(col),col.groupIndex=$scope.configGroups.length):$scope.removeGroup(indx),self.$viewport.scrollTop(0),domUtilityService.digest($scope)}},$scope.removeGroup=function(index){var col=$scope.columns.filter((function(item){return item.groupIndex===index+1}))[0];col.isGroupedBy=!1,col.groupIndex=0,$scope.columns[index].isAggCol&&($scope.columns.splice(index,1),$scope.configGroups.splice(index,1),self.fixGroupIndexes()),0===$scope.configGroups.length&&(self.fixColumnIndexes(),domUtilityService.digest($scope)),$scope.adjustScrollLeft(0)},$scope.togglePin=function(col){for(var indexFrom=col.index,indexTo=0,i=0;i<$scope.columns.length&&$scope.columns[i].pinned;i++)indexTo++;col.pinned&&(indexTo=Math.max(col.originalIndex,indexTo-1)),col.pinned=!col.pinned,$scope.columns.splice(indexFrom,1),$scope.columns.splice(indexTo,0,col),self.fixColumnIndexes(),domUtilityService.BuildStyles($scope,self,!0),self.$viewport.scrollLeft(self.$viewport.scrollLeft()-col.width)},$scope.totalRowWidth=function(){for(var totalWidth=0,cols=$scope.columns,i=0;i<cols.length;i++)!1!==cols[i].visible&&(totalWidth+=cols[i].width);return totalWidth},$scope.headerScrollerDim=function(){var viewportH=$scope.viewportDimHeight(),maxHeight=self.maxCanvasHt,vScrollBarIsOpen=maxHeight>viewportH,newDim=new ngDimension;return newDim.autoFitHeight=!0,newDim.outerWidth=$scope.totalRowWidth(),(vScrollBarIsOpen||maxHeight-viewportH<=self.elementDims.scrollH)&&(newDim.outerWidth+=self.elementDims.scrollW),newDim}},ngRange=function(top,bottom){this.topRow=top,this.bottomRow=bottom},ngRow=function(entity,config,selectionProvider,rowIndex,$utils){this.entity=entity,this.config=config,this.selectionProvider=selectionProvider,this.rowIndex=rowIndex,this.utils=$utils,this.selected=selectionProvider.getSelection(entity),this.cursor=this.config.enableRowSelection&&!this.config.selectWithCheckboxOnly?"pointer":"default",this.beforeSelectionChange=config.beforeSelectionChangeCallback,this.afterSelectionChange=config.afterSelectionChangeCallback,this.offsetTop=this.rowIndex*config.rowHeight,this.rowDisplayIndex=0};ngRow.prototype.setSelection=function(isSelected){this.selectionProvider.setSelection(this,isSelected),this.selectionProvider.lastClickedRow=this},ngRow.prototype.continueSelection=function(event){this.selectionProvider.ChangeSelection(this,event)},ngRow.prototype.ensureEntity=function(expected){this.entity!==expected&&(this.entity=expected,this.selected=this.selectionProvider.getSelection(this.entity))},ngRow.prototype.toggleSelected=function(event){if(!this.config.enableRowSelection&&!this.config.enableCellSelection)return!0;var element=event.target||event;return"checkbox"===element.type&&"ngSelectionCell ng-scope"!==element.parentElement.className||(this.config.selectWithCheckboxOnly&&"checkbox"!==element.type?(this.selectionProvider.lastClickedRow=this,!0):(this.beforeSelectionChange(this,event)&&this.continueSelection(event),!1))},ngRow.prototype.alternatingRowClass=function(){var isEven=this.rowIndex%2==0;return{ngRow:!0,selected:this.selected,even:isEven,odd:!isEven,"ui-state-default":this.config.jqueryUITheme&&isEven,"ui-state-active":this.config.jqueryUITheme&&!isEven}},ngRow.prototype.getProperty=function(path){return this.utils.evalProperty(this.entity,path)},ngRow.prototype.copy=function(){return this.clone=new ngRow(this.entity,this.config,this.selectionProvider,this.rowIndex,this.utils),this.clone.isClone=!0,this.clone.elm=this.elm,this.clone.orig=this,this.clone},ngRow.prototype.setVars=function(fromRow){fromRow.clone=this,this.entity=fromRow.entity,this.selected=fromRow.selected,this.orig=fromRow};var ngRowFactory=function(grid,$scope,domUtilityService,$templateCache,$utils){var self=this;self.aggCache={},self.parentCache=[],self.dataChanged=!0,self.parsedData=[],self.rowConfig={},self.selectionProvider=$scope.selectionProvider,self.rowHeight=30,self.numberOfAggregates=0,self.groupedData=void 0,self.rowHeight=grid.config.rowHeight,self.rowConfig={enableRowSelection:grid.config.enableRowSelection,rowClasses:grid.config.rowClasses,selectedItems:$scope.selectedItems,selectWithCheckboxOnly:grid.config.selectWithCheckboxOnly,beforeSelectionChangeCallback:grid.config.beforeSelectionChange,afterSelectionChangeCallback:grid.config.afterSelectionChange,jqueryUITheme:grid.config.jqueryUITheme,enableCellSelection:grid.config.enableCellSelection,rowHeight:grid.config.rowHeight},self.renderedRange=new ngRange(0,grid.minRowsToRender()+6),self.buildEntityRow=function(entity,rowIndex){return new ngRow(entity,self.rowConfig,self.selectionProvider,rowIndex,$utils)},self.buildAggregateRow=function(aggEntity,rowIndex){var agg=self.aggCache[aggEntity.aggIndex];return agg||(agg=new ngAggregate(aggEntity,self,self.rowConfig.rowHeight,grid.config.groupsCollapsedByDefault),self.aggCache[aggEntity.aggIndex]=agg),agg.rowIndex=rowIndex,agg.offsetTop=rowIndex*self.rowConfig.rowHeight,agg},self.UpdateViewableRange=function(newRange){self.renderedRange=newRange,self.renderedChange()},self.filteredRowsChanged=function(){grid.lateBoundColumns&&grid.filteredRows.length>0&&(grid.config.columnDefs=void 0,grid.buildColumns(),grid.lateBoundColumns=!1,$scope.$evalAsync((function(){$scope.adjustScrollLeft(0)}))),self.dataChanged=!0,grid.config.groups.length>0&&self.getGrouping(grid.config.groups),self.UpdateViewableRange(self.renderedRange)},self.renderedChange=function(){if(!self.groupedData||grid.config.groups.length<1)return self.renderedChangeNoGroups(),void grid.refreshDomSizes();self.wasGrouped=!0,self.parentCache=[];var x=0,temp=self.parsedData.filter((function(e){return e.isAggRow?!e.parent||!e.parent.collapsed:(e._ng_hidden_||(e.rowIndex=x++),!e._ng_hidden_)}));self.totalRows=temp.length;for(var rowArr=[],i=self.renderedRange.topRow;i<self.renderedRange.bottomRow;i++)temp[i]&&(temp[i].offsetTop=i*grid.config.rowHeight,rowArr.push(temp[i]));grid.setRenderedRows(rowArr)},self.renderedChangeNoGroups=function(){for(var rowArr=[],i=self.renderedRange.topRow;i<self.renderedRange.bottomRow;i++)grid.filteredRows[i]&&(grid.filteredRows[i].rowIndex=i,grid.filteredRows[i].offsetTop=i*grid.config.rowHeight,rowArr.push(grid.filteredRows[i]));grid.setRenderedRows(rowArr)},self.fixRowCache=function(){var newLen=grid.data.length;if(newLen-grid.rowCache.length<0)grid.rowCache.length=grid.rowMap.length=newLen;else for(var i=grid.rowCache.length;i<newLen;i++)grid.rowCache[i]=grid.rowFactory.buildEntityRow(grid.data[i],i)},self.parseGroupData=function(g){if(g.values)for(var x=0;x<g.values.length;x++)self.parentCache[self.parentCache.length-1].children.push(g.values[x]),self.parsedData.push(g.values[x]);else for(var prop in g)if("_ng_field_"!==prop&&"_ng_depth_"!==prop&&"_ng_column_"!==prop&&g.hasOwnProperty(prop)){var agg=self.buildAggregateRow({gField:g._ng_field_,gLabel:prop,gDepth:g._ng_depth_,isAggRow:!0,_ng_hidden_:!1,children:[],aggChildren:[],aggIndex:self.numberOfAggregates,aggLabelFilter:g._ng_column_.aggLabelFilter},0);self.numberOfAggregates++,agg.parent=self.parentCache[agg.depth-1],agg.parent&&(agg.parent.collapsed=!1,agg.parent.aggChildren.push(agg)),self.parsedData.push(agg),self.parentCache[agg.depth]=agg,self.parseGroupData(g[prop])}},self.getGrouping=function(groups){self.aggCache=[],self.numberOfAggregates=0,self.groupedData={};var rows=grid.filteredRows,maxDepth=groups.length,cols=$scope.columns;function filterCols(cols,group){return cols.filter((function(c){return c.field===group}))}for(var x=0;x<rows.length;x++){var model=rows[x].entity;if(!model)return;rows[x]._ng_hidden_=grid.config.groupsCollapsedByDefault;for(var ptr=self.groupedData,y=0;y<groups.length;y++){var group=groups[y],col=filterCols(cols,group)[0],val=$utils.evalProperty(model,group);ptr[val=val?val.toString():"null"]||(ptr[val]={}),ptr._ng_field_||(ptr._ng_field_=group),ptr._ng_depth_||(ptr._ng_depth_=y),ptr._ng_column_||(ptr._ng_column_=col),ptr=ptr[val]}ptr.values||(ptr.values=[]),ptr.values.push(rows[x])}if(cols.length>0)for(var z=0;z<groups.length;z++)!cols[z].isAggCol&&z<=maxDepth&&cols.splice(0,0,new ngColumn({colDef:{field:"",width:25,sortable:!1,resizable:!1,headerCellTemplate:'<div class="ngAggHeader"></div>',pinned:grid.config.pinSelectionCheckbox},enablePinning:grid.config.enablePinning,isAggCol:!0,headerRowHeight:grid.config.headerRowHeight},$scope,grid,domUtilityService,$templateCache,$utils));grid.fixColumnIndexes(),$scope.adjustScrollLeft(0),self.parsedData.length=0,self.parseGroupData(self.groupedData),self.fixRowCache()},grid.config.groups.length>0&&grid.filteredRows.length>0&&self.getGrouping(grid.config.groups)},ngSearchProvider=function($scope,grid,$filter){var self=this,searchConditions=[];self.extFilter=grid.config.filterOptions.useExternalFilter,$scope.showFilter=grid.config.showFilter,$scope.filterText="",self.fieldMap={};var convertToFieldMap=function(obj){var fieldMap={};for(var prop in obj)obj.hasOwnProperty(prop)&&(fieldMap[prop.toLowerCase()]=obj[prop]);return fieldMap},searchEntireRow=function(condition,item,fieldMap){var result;for(var prop in item)if(item.hasOwnProperty(prop)){var c=fieldMap[prop.toLowerCase()];if(!c)continue;var pVal=item[prop];if("object"!=typeof pVal||pVal instanceof Date){var f=null,s=null;if(c&&c.cellFilter&&(s=c.cellFilter.split(":"),f=$filter(s[0])),null!=pVal){if("function"==typeof f){var filterRes=f(pVal,s[1].slice(1,-1)).toString();result=condition.regex.test(filterRes)}else result=condition.regex.test(pVal.toString());if(result)return!0}}else{var objectFieldMap=convertToFieldMap(c);if(result=searchEntireRow(condition,pVal,objectFieldMap))return!0}}return!1},searchColumn=function(condition,item){var result,col=self.fieldMap[condition.columnDisplay];if(!col)return!1;var sp=col.cellFilter.split(":"),filter=col.cellFilter?$filter(sp[0]):null,value=item[condition.column]||item[col.field.split(".")[0]];if(null==value)return!1;if("function"==typeof filter){var filterResults=filter("object"==typeof value?evalObject(value,col.field):value,sp[1]).toString();result=condition.regex.test(filterResults)}else result=condition.regex.test("object"==typeof value?evalObject(value,col.field).toString():value.toString());return!!result};self.evalFilter=function(){0===searchConditions.length?grid.filteredRows=grid.rowCache:grid.filteredRows=grid.rowCache.filter((function(row){return function(item){for(var x=0,len=searchConditions.length;x<len;x++){var condition=searchConditions[x];if(!(condition.column?searchColumn(condition,item):searchEntireRow(condition,item,self.fieldMap)))return!1}return!0}(row.entity)}));for(var i=0;i<grid.filteredRows.length;i++)grid.filteredRows[i].rowIndex=i;grid.rowFactory.filteredRowsChanged()};var evalObject=function(obj,columnName){if("object"!=typeof obj||"string"!=typeof columnName)return obj;var args=columnName.split("."),cObj=obj;if(args.length>1){for(var i=1,len=args.length;i<len;i++)if(!(cObj=cObj[args[i]]))return obj;return cObj}return obj},getRegExp=function(str,modifiers){try{return new RegExp(str,modifiers)}catch(err){return new RegExp(str.replace(/(\^|\$|\(|\)|<|>|\[|\]|\{|\}|\\|\||\.|\*|\+|\?)/g,"\\$1"))}};self.extFilter||$scope.$on("$destroy",$scope.$watch("columns",(function(cs){for(var i=0;i<cs.length;i++){var col=cs[i];if(col.field)if(col.field.match(/\./g)){for(var properties=col.field.split("."),currentProperty=self.fieldMap,j=0;j<properties.length-1;j++)currentProperty[properties[j]]=currentProperty[properties[j]]||{},currentProperty=currentProperty[properties[j]];currentProperty[properties[properties.length-1]]=col}else self.fieldMap[col.field.toLowerCase()]=col;col.displayName&&(self.fieldMap[col.displayName.toLowerCase().replace(/\s+/g,"")]=col)}}))),$scope.$on("$destroy",$scope.$watch((function(){return grid.config.filterOptions.filterText}),(function(a){$scope.filterText=a}))),$scope.$on("$destroy",$scope.$watch("filterText",(function(a){self.extFilter||($scope.$emit("ngGridEventFilter",a),function(a){var qStr;if(searchConditions=[],qStr=$.trim(a))for(var columnFilters=qStr.split(";"),i=0;i<columnFilters.length;i++){var args=columnFilters[i].split(":");if(args.length>1){var columnName=$.trim(args[0]),columnValue=$.trim(args[1]);columnName&&columnValue&&searchConditions.push({column:columnName,columnDisplay:columnName.replace(/\s+/g,"").toLowerCase(),regex:getRegExp(columnValue,"i")})}else{var val=$.trim(args[0]);val&&searchConditions.push({column:"",regex:getRegExp(val,"i")})}}}(a),self.evalFilter())})))},ngSelectionProvider=function(grid,$scope,$parse){var self=this;self.multi=grid.config.multiSelect,self.selectedItems=grid.config.selectedItems,self.selectedIndex=grid.config.selectedIndex,self.lastClickedRow=void 0,self.ignoreSelectedItemChanges=!1,self.pKeyParser=$parse(grid.config.primaryKey),self.ChangeSelection=function(rowItem,evt){var charCode=evt.which||evt.keyCode,isUpDownKeyPress=40===charCode||38===charCode;if(evt&&evt.shiftKey&&!evt.keyCode&&self.multi&&grid.config.enableRowSelection){if(self.lastClickedRow){var rowsArr;rowsArr=$scope.configGroups.length>0?grid.rowFactory.parsedData.filter((function(row){return!row.isAggRow})):grid.filteredRows;var thisIndx=rowItem.rowIndex,prevIndx=self.lastClickedRowIndex;if(thisIndx===prevIndx)return!1;thisIndx<prevIndx?(thisIndx^=prevIndx,thisIndx^=prevIndx^=thisIndx,thisIndx--):prevIndx++;for(var rows=[];prevIndx<=thisIndx;prevIndx++)rows.push(rowsArr[prevIndx]);if(rows[rows.length-1].beforeSelectionChange(rows,evt)){for(var i=0;i<rows.length;i++){var ri=rows[i],selectionState=ri.selected;ri.selected=!selectionState,ri.clone&&(ri.clone.selected=ri.selected);var index=self.selectedItems.indexOf(ri.entity);-1===index?self.selectedItems.push(ri.entity):self.selectedItems.splice(index,1)}rows[rows.length-1].afterSelectionChange(rows,evt)}return self.lastClickedRow=rowItem,self.lastClickedRowIndex=rowItem.rowIndex,!0}}else self.multi?(!evt.keyCode||isUpDownKeyPress&&!grid.config.selectWithCheckboxOnly)&&self.setSelection(rowItem,!rowItem.selected):self.lastClickedRow===rowItem?self.setSelection(self.lastClickedRow,!!grid.config.keepLastSelected||!rowItem.selected):(self.lastClickedRow&&self.setSelection(self.lastClickedRow,!1),self.setSelection(rowItem,!rowItem.selected));return self.lastClickedRow=rowItem,self.lastClickedRowIndex=rowItem.rowIndex,!0},self.getSelection=function(entity){return-1!==self.getSelectionIndex(entity)},self.getSelectionIndex=function(entity){var index=-1;if(grid.config.primaryKey){var val=self.pKeyParser(entity);angular.forEach(self.selectedItems,(function(c,k){val===self.pKeyParser(c)&&(index=k)}))}else index=self.selectedItems.indexOf(entity);return index},self.setSelection=function(rowItem,isSelected){if(grid.config.enableRowSelection){if(isSelected)-1===self.getSelectionIndex(rowItem.entity)&&(!self.multi&&self.selectedItems.length>0&&self.toggleSelectAll(!1,!0),self.selectedItems.push(rowItem.entity));else{var indx=self.getSelectionIndex(rowItem.entity);-1!==indx&&self.selectedItems.splice(indx,1)}rowItem.selected=isSelected,rowItem.orig&&(rowItem.orig.selected=isSelected),rowItem.clone&&(rowItem.clone.selected=isSelected),rowItem.afterSelectionChange(rowItem)}},self.toggleSelectAll=function(checkAll,bypass,selectFiltered){var rows=selectFiltered?grid.filteredRows:grid.rowCache;if(bypass||grid.config.beforeSelectionChange(rows,checkAll)){self.selectedItems.length>0&&(self.selectedItems.length=0);for(var i=0;i<rows.length;i++)rows[i].selected=checkAll,rows[i].clone&&(rows[i].clone.selected=checkAll),checkAll&&self.selectedItems.push(rows[i].entity);bypass||grid.config.afterSelectionChange(rows,checkAll)}}},ngStyleProvider=function($scope,grid){$scope.headerCellStyle=function(col){return{height:col.headerRowHeight+"px"}},$scope.rowStyle=function(row){var ret={top:row.offsetTop+"px",height:$scope.rowHeight+"px"};return row.isAggRow&&(ret.left=row.offsetLeft),ret},$scope.canvasStyle=function(){return{height:grid.maxCanvasHt+"px"}},$scope.headerScrollerStyle=function(){return{height:grid.config.headerRowHeight+"px"}},$scope.topPanelStyle=function(){return{width:grid.rootDim.outerWidth+"px",height:$scope.topPanelHeight()+"px"}},$scope.headerStyle=function(){return{width:grid.rootDim.outerWidth+"px",height:grid.config.headerRowHeight+"px"}},$scope.groupPanelStyle=function(){return{width:grid.rootDim.outerWidth+"px",height:"32px"}},$scope.viewportStyle=function(){return{width:grid.rootDim.outerWidth+"px",height:$scope.viewportDimHeight()+"px"}},$scope.footerStyle=function(){return{width:grid.rootDim.outerWidth+"px",height:$scope.footerRowHeight+"px"}}};ngGridDirectives.directive("ngCellHasFocus",["$domUtilityService",function(domUtilityService){var focusOnInputElement=function($scope,elm){$scope.isFocused=!0,domUtilityService.digest($scope),$scope.$broadcast("ngGridEventStartCellEdit"),$scope.$emit("ngGridEventStartCellEdit"),$scope.$on("$destroy",$scope.$on("ngGridEventEndCellEdit",(function(){$scope.isFocused=!1,domUtilityService.digest($scope)})))};return function($scope,elm){var isFocused=!1,isCellEditableOnMouseDown=!1;function mousedown(evt){return $scope.enableCellEditOnFocus?isCellEditableOnMouseDown=!0:elm.focus(),!0}function click(evt){$scope.enableCellEditOnFocus&&(evt.preventDefault(),isCellEditableOnMouseDown=!1,focusOnInputElement($scope))}function focus(evt){return isFocused=!0,$scope.enableCellEditOnFocus&&!isCellEditableOnMouseDown&&focusOnInputElement($scope),!0}function blur(){return isFocused=!1,!0}function keydown(evt){return $scope.enableCellEditOnFocus||(isFocused&&37!==evt.keyCode&&38!==evt.keyCode&&39!==evt.keyCode&&40!==evt.keyCode&&9!==evt.keyCode&&!evt.shiftKey&&13!==evt.keyCode&&focusOnInputElement($scope),isFocused&&evt.shiftKey&&evt.keyCode>=65&&evt.keyCode<=90&&focusOnInputElement($scope),27===evt.keyCode&&elm.focus()),!0}$scope.editCell=function(){$scope.enableCellEditOnFocus||setTimeout((function(){focusOnInputElement($scope)}),0)},elm.bind("mousedown",mousedown),elm.bind("click",click),elm.bind("focus",focus),elm.bind("blur",blur),elm.bind("keydown",keydown),elm.on("$destroy",(function(){elm.off("mousedown",mousedown),elm.off("click",click),elm.off("focus",focus),elm.off("blur",blur),elm.off("keydown",keydown)}))}}]),ngGridDirectives.directive("ngCellText",(function(){return function(scope,elm){function mouseover(evt){evt.preventDefault()}function mouseleave(evt){evt.preventDefault()}elm.bind("mouseover",mouseover),elm.bind("mouseleave",mouseleave),elm.on("$destroy",(function(){elm.off("mouseover",mouseover),elm.off("mouseleave",mouseleave)}))}})),ngGridDirectives.directive("ngCell",["$compile","$domUtilityService",function($compile,domUtilityService){return{scope:!1,compile:function(){return{pre:function($scope,iElement){var html,cellTemplate=$scope.col.cellTemplate.replace(COL_FIELD,"row.entity."+$scope.col.field);html=$scope.col.enableCellEdit?(html=(html=(html=$scope.col.cellEditTemplate).replace(CELL_EDITABLE_CONDITION,$scope.col.cellEditableCondition)).replace(DISPLAY_CELL_TEMPLATE,cellTemplate)).replace(EDITABLE_CELL_TEMPLATE,$scope.col.editableCellTemplate.replace(COL_FIELD,"row.entity."+$scope.col.field)):cellTemplate;var cellElement=$(html);iElement.append(cellElement),$compile(cellElement)($scope),$scope.enableCellSelection&&-1===cellElement[0].className.indexOf("ngSelectionCell")&&(cellElement[0].setAttribute("tabindex",0),cellElement.addClass("ngCellElement"))},post:function($scope,iElement){$scope.enableCellSelection&&$scope.domAccessProvider.selectionHandlers($scope,iElement),$scope.$on("$destroy",$scope.$on("ngGridEventDigestCell",(function(){domUtilityService.digest($scope)})))}}}}}]),ngGridDirectives.directive("ngEditCellIf",[function(){return{transclude:"element",priority:1e3,terminal:!0,restrict:"A",compile:function(e,a,transclude){return function(scope,element,attr){var childElement,childScope;scope.$on("$destroy",scope.$watch(attr.ngEditCellIf,(function(newValue){childElement&&(childElement.remove(),childElement=void 0),childScope&&(childScope.$destroy(),childScope=void 0),newValue&&(childScope=scope.$new(),transclude(childScope,(function(clone){childElement=clone,element.after(clone)})))})))}}}}]),ngGridDirectives.directive("ngGridFooter",["$compile","$templateCache",function($compile,$templateCache){return{scope:!1,compile:function(){return{pre:function($scope,iElement){0===iElement.children().length&&iElement.append($compile($templateCache.get($scope.gridId+"footerTemplate.html"))($scope))}}}}}]),ngGridDirectives.directive("ngGridMenu",["$compile","$templateCache",function($compile,$templateCache){return{scope:!1,compile:function(){return{pre:function($scope,iElement){0===iElement.children().length&&iElement.append($compile($templateCache.get($scope.gridId+"menuTemplate.html"))($scope))}}}}}]),ngGridDirectives.directive("ngGrid",["$compile","$filter","$templateCache","$sortService","$domUtilityService","$utilityService","$timeout","$parse","$http","$q",function($compile,$filter,$templateCache,sortService,domUtilityService,$utils,$timeout,$parse,$http,$q){return{scope:!0,compile:function(){return{pre:function($scope,iElement,iAttrs){var $element=$(iElement),options=$scope.$eval(iAttrs.ngGrid);options.gridDim=new ngDimension({outerHeight:$($element).height(),outerWidth:$($element).width()});var grid=new ngGrid($scope,options,sortService,domUtilityService,$filter,$templateCache,$utils,$timeout,$parse,$http,$q);return $scope.$on("$destroy",(function(){options.gridDim=null,options.selectRow=null,options.selectItem=null,options.selectAll=null,options.selectVisible=null,options.groupBy=null,options.sortBy=null,options.gridId=null,options.ngGrid=null,options.$gridScope=null,options.$gridServices=null,$scope.domAccessProvider.grid=null,angular.element(grid.styleSheet).remove(),grid.styleSheet=null})),grid.init().then((function(){if("string"==typeof options.columnDefs?$scope.$on("$destroy",$scope.$parent.$watch(options.columnDefs,(function(a){if(!a)return grid.refreshDomSizes(),void grid.buildColumns();grid.lateBoundColumns=!1,$scope.columns=[],grid.config.columnDefs=a,grid.buildColumns(),grid.eventProvider.assignEvents(),domUtilityService.RebuildGrid($scope,grid)}),!0)):grid.buildColumns(),"string"==typeof options.totalServerItems?$scope.$on("$destroy",$scope.$parent.$watch(options.totalServerItems,(function(newTotal,oldTotal){angular.isDefined(newTotal)?$scope.totalServerItems=newTotal:$scope.totalServerItems=0}))):$scope.totalServerItems=0,"string"==typeof options.data){var dataWatcher=function(a){grid.data=$.extend([],a),grid.rowFactory.fixRowCache(),angular.forEach(grid.data,(function(item,j){var indx=grid.rowMap[j]||j;grid.rowCache[indx]&&grid.rowCache[indx].ensureEntity(item),grid.rowMap[indx]=j})),grid.searchProvider.evalFilter(),grid.configureColumnWidths(),grid.refreshDomSizes(),grid.config.sortInfo.fields.length>0&&(grid.sortColumnsInit(),$scope.$emit("ngGridEventSorted",grid.config.sortInfo)),$scope.$emit("ngGridEventData",grid.gridId)};$scope.$on("$destroy",$scope.$parent.$watch(options.data,dataWatcher)),$scope.$on("$destroy",$scope.$parent.$watch(options.data+".length",(function(){dataWatcher($scope.$eval(options.data)),$scope.adjustScrollTop(grid.$viewport.scrollTop(),!0)})))}return grid.footerController=new ngFooter($scope,grid),iElement.addClass("ngGrid").addClass(grid.gridId.toString()),options.enableHighlighting||iElement.addClass("unselectable"),options.jqueryUITheme&&iElement.addClass("ui-widget"),iElement.append($compile($templateCache.get("gridTemplate.html"))($scope)),domUtilityService.AssignGridContainers($scope,iElement,grid),grid.eventProvider=new ngEventProvider(grid,$scope,domUtilityService,$timeout),options.selectRow=function(rowIndex,state){grid.rowCache[rowIndex]&&(grid.rowCache[rowIndex].clone&&grid.rowCache[rowIndex].clone.setSelection(!!state),grid.rowCache[rowIndex].setSelection(!!state))},options.selectItem=function(itemIndex,state){options.selectRow(grid.rowMap[itemIndex],state)},options.selectAll=function(state){$scope.toggleSelectAll(state)},options.selectVisible=function(state){$scope.toggleSelectAll(state,!0)},options.groupBy=function(field){if(field)$scope.groupBy($scope.columns.filter((function(c){return c.field===field}))[0]);else{var arr=$.extend(!0,[],$scope.configGroups);angular.forEach(arr,$scope.groupBy)}},options.sortBy=function(field){var col=$scope.columns.filter((function(c){return c.field===field}))[0];col&&col.sort()},options.gridId=grid.gridId,options.ngGrid=grid,options.$gridScope=$scope,options.$gridServices={SortService:sortService,DomUtilityService:domUtilityService,UtilityService:$utils},$scope.$on("$destroy",$scope.$on("ngGridEventDigestGrid",(function(){domUtilityService.digest($scope.$parent)}))),$scope.$on("$destroy",$scope.$on("ngGridEventDigestGridParent",(function(){domUtilityService.digest($scope.$parent)}))),$scope.$evalAsync((function(){$scope.adjustScrollLeft(0)})),angular.forEach(options.plugins,(function(p){"function"==typeof p&&(p=new p);var newScope=$scope.$new();p.init(newScope,grid,options.$gridServices),options.plugins[$utils.getInstanceType(p)]=p,$scope.$on("$destroy",(function(){newScope.$destroy()}))})),"function"==typeof options.init&&options.init(grid,$scope),null}))}}}}}]),ngGridDirectives.directive("ngHeaderCell",["$compile",function($compile){return{scope:!1,compile:function(){return{pre:function($scope,iElement){iElement.append($compile($scope.col.headerCellTemplate)($scope))}}}}}]),ngGridDirectives.directive("ngHeaderRow",["$compile","$templateCache",function($compile,$templateCache){return{scope:!1,compile:function(){return{pre:function($scope,iElement){0===iElement.children().length&&iElement.append($compile($templateCache.get($scope.gridId+"headerRowTemplate.html"))($scope))}}}}}]),ngGridDirectives.directive("ngInput",[function(){return{require:"ngModel",link:function(scope,elm,attrs,ngModel){var oldCellValue,dereg=scope.$watch("ngModel",(function(){oldCellValue=ngModel.$modelValue,dereg()}));function keydown(evt){switch(evt.keyCode){case 37:case 38:case 39:case 40:evt.stopPropagation();break;case 27:scope.$$phase||scope.$apply((function(){ngModel.$setViewValue(oldCellValue),elm.blur()}));break;case 13:(scope.enableCellEditOnFocus&&scope.totalFilteredItemsLength()-1>scope.row.rowIndex&&scope.row.rowIndex>0||scope.col.enableCellEdit)&&elm.blur()}return!0}function click(evt){evt.stopPropagation()}function mousedown(evt){evt.stopPropagation()}elm.bind("keydown",keydown),elm.bind("click",click),elm.bind("mousedown",mousedown),elm.on("$destroy",(function(){elm.off("keydown",keydown),elm.off("click",click),elm.off("mousedown",mousedown)})),scope.$on("$destroy",scope.$on("ngGridEventStartCellEdit",(function(){elm.focus(),elm.select()}))),angular.element(elm).bind("blur",(function(){scope.$emit("ngGridEventEndCellEdit")}))}}}]),ngGridDirectives.directive("ngRow",["$compile","$domUtilityService","$templateCache",function($compile,domUtilityService,$templateCache){return{scope:!1,compile:function(){return{pre:function($scope,iElement){if($scope.row.elm=iElement,$scope.row.clone&&($scope.row.clone.elm=iElement),$scope.row.isAggRow){var html=$templateCache.get($scope.gridId+"aggregateTemplate.html");html=$scope.row.aggLabelFilter?html.replace(CUSTOM_FILTERS,"| "+$scope.row.aggLabelFilter):html.replace(CUSTOM_FILTERS,""),iElement.append($compile(html)($scope))}else iElement.append($compile($templateCache.get($scope.gridId+"rowTemplate.html"))($scope));$scope.$on("$destroy",$scope.$on("ngGridEventDigestRow",(function(){domUtilityService.digest($scope)})))}}}}}]),ngGridDirectives.directive("ngViewport",[function(){return function($scope,elm){var scrollTimer,ensureDigest=function(){$scope.$root.$$phase||$scope.$digest()};function scroll(evt){var scrollLeft=evt.target.scrollLeft,scrollTop=evt.target.scrollTop;return $scope.$headerContainer&&$scope.$headerContainer.scrollLeft(scrollLeft),$scope.adjustScrollLeft(scrollLeft),$scope.adjustScrollTop(scrollTop),$scope.forceSyncScrolling?ensureDigest():(clearTimeout(scrollTimer),scrollTimer=setTimeout(ensureDigest,150)),scrollLeft,scrollTop,!1,!0}function mousewheel(){return!0,elm.focus&&elm.focus(),!0}elm.bind("scroll",scroll),elm.bind("mousewheel DOMMouseScroll",mousewheel),elm.on("$destroy",(function(){elm.off("scroll",scroll),elm.off("mousewheel DOMMouseScroll",mousewheel)})),$scope.enableCellSelection||$scope.domAccessProvider.selectionHandlers($scope,elm)}}]),window.ngGrid.i18n.da={ngAggregateLabel:"artikler",ngGroupPanelDescription:"Grupér rækker udfra en kolonne ved at trække dens overskift hertil.",ngSearchPlaceHolder:"Søg...",ngMenuText:"Vælg kolonner:",ngShowingItemsLabel:"Viste rækker:",ngTotalItemsLabel:"Rækker totalt:",ngSelectedItemsLabel:"Valgte rækker:",ngPageSizeLabel:"Side størrelse:",ngPagerFirstTitle:"Første side",ngPagerNextTitle:"Næste side",ngPagerPrevTitle:"Forrige side",ngPagerLastTitle:"Sidste side"},window.ngGrid.i18n.de={ngAggregateLabel:"eintrag",ngGroupPanelDescription:"Ziehen Sie eine Spaltenüberschrift hierhin um nach dieser Spalte zu gruppieren.",ngSearchPlaceHolder:"Suche...",ngMenuText:"Spalten auswählen:",ngShowingItemsLabel:"Zeige Einträge:",ngTotalItemsLabel:"Einträge gesamt:",ngSelectedItemsLabel:"Ausgewählte Einträge:",ngPageSizeLabel:"Einträge pro Seite:",ngPagerFirstTitle:"Erste Seite",ngPagerNextTitle:"Nächste Seite",ngPagerPrevTitle:"Vorherige Seite",ngPagerLastTitle:"Letzte Seite"},window.ngGrid.i18n.en={ngAggregateLabel:"items",ngGroupPanelDescription:"Drag a column header here and drop it to group by that column.",ngSearchPlaceHolder:"Search...",ngMenuText:"Choose Columns:",ngShowingItemsLabel:"Showing Items:",ngTotalItemsLabel:"Total Items:",ngSelectedItemsLabel:"Selected Items:",ngPageSizeLabel:"Page Size:",ngPagerFirstTitle:"First Page",ngPagerNextTitle:"Next Page",ngPagerPrevTitle:"Previous Page",ngPagerLastTitle:"Last Page"},window.ngGrid.i18n.es={ngAggregateLabel:"Artículos",ngGroupPanelDescription:"Arrastre un encabezado de columna aquí y soltarlo para agrupar por esa columna.",ngSearchPlaceHolder:"Buscar...",ngMenuText:"Elegir columnas:",ngShowingItemsLabel:"Artículos Mostrando:",ngTotalItemsLabel:"Artículos Totales:",ngSelectedItemsLabel:"Artículos Seleccionados:",ngPageSizeLabel:"Tamaño de Página:",ngPagerFirstTitle:"Primera Página",ngPagerNextTitle:"Página Siguiente",ngPagerPrevTitle:"Página Anterior",ngPagerLastTitle:"Última Página"},window.ngGrid.i18n.fa={ngAggregateLabel:"موردها",ngGroupPanelDescription:"یک عنوان ستون اینجا را بردار و به گروهی از آن ستون بیانداز.",ngSearchPlaceHolder:"جستجو...",ngMenuText:"انتخاب ستون‌ها:",ngShowingItemsLabel:"نمایش موردها:",ngTotalItemsLabel:"همهٔ موردها:",ngSelectedItemsLabel:"موردهای انتخاب‌شده:",ngPageSizeLabel:"اندازهٔ صفحه:",ngPagerFirstTitle:"صفحهٔ اول",ngPagerNextTitle:"صفحهٔ بعد",ngPagerPrevTitle:"صفحهٔ قبل",ngPagerLastTitle:"آخرین صفحه"},window.ngGrid.i18n.fr={ngAggregateLabel:"articles",ngGroupPanelDescription:"Faites glisser un en-tête de colonne ici et déposez-le vers un groupe par cette colonne.",ngSearchPlaceHolder:"Recherche...",ngMenuText:"Choisir des colonnes:",ngShowingItemsLabel:"Articles Affichage des:",ngTotalItemsLabel:"Nombre total d'articles:",ngSelectedItemsLabel:"Éléments Articles:",ngPageSizeLabel:"Taille de page:",ngPagerFirstTitle:"Première page",ngPagerNextTitle:"Page Suivante",ngPagerPrevTitle:"Page précédente",ngPagerLastTitle:"Dernière page"},window.ngGrid.i18n.nl={ngAggregateLabel:"items",ngGroupPanelDescription:"Sleep hier een kolomkop om op te groeperen.",ngSearchPlaceHolder:"Zoeken...",ngMenuText:"Kies kolommen:",ngShowingItemsLabel:"Toon items:",ngTotalItemsLabel:"Totaal items:",ngSelectedItemsLabel:"Geselecteerde items:",ngPageSizeLabel:"Pagina grootte:, ",ngPagerFirstTitle:"Eerste pagina",ngPagerNextTitle:"Volgende pagina",ngPagerPrevTitle:"Vorige pagina",ngPagerLastTitle:"Laatste pagina"},window.ngGrid.i18n["pt-br"]={ngAggregateLabel:"itens",ngGroupPanelDescription:"Arraste e solte uma coluna aqui para agrupar por essa coluna",ngSearchPlaceHolder:"Procurar...",ngMenuText:"Selecione as colunas:",ngShowingItemsLabel:"Mostrando os Itens:",ngTotalItemsLabel:"Total de Itens:",ngSelectedItemsLabel:"Items Selecionados:",ngPageSizeLabel:"Tamanho da Página:",ngPagerFirstTitle:"Primeira Página",ngPagerNextTitle:"Próxima Página",ngPagerPrevTitle:"Página Anterior",ngPagerLastTitle:"Última Página"},window.ngGrid.i18n["zh-cn"]={ngAggregateLabel:"条目",ngGroupPanelDescription:"拖曳表头到此处以进行分组",ngSearchPlaceHolder:"搜索...",ngMenuText:"数据分组与选择列：",ngShowingItemsLabel:"当前显示条目：",ngTotalItemsLabel:"条目总数：",ngSelectedItemsLabel:"选中条目：",ngPageSizeLabel:"每页显示数：",ngPagerFirstTitle:"回到首页",ngPagerNextTitle:"下一页",ngPagerPrevTitle:"上一页",ngPagerLastTitle:"前往尾页"},window.ngGrid.i18n["zh-tw"]={ngAggregateLabel:"筆",ngGroupPanelDescription:"拖拉表頭到此處以進行分組",ngSearchPlaceHolder:"搜尋...",ngMenuText:"選擇欄位：",ngShowingItemsLabel:"目前顯示筆數：",ngTotalItemsLabel:"總筆數：",ngSelectedItemsLabel:"選取筆數：",ngPageSizeLabel:"每頁顯示：",ngPagerFirstTitle:"第一頁",ngPagerNextTitle:"下一頁",ngPagerPrevTitle:"上一頁",ngPagerLastTitle:"最後頁"},angular.module("ngGrid").run(["$templateCache",function($templateCache){$templateCache.put("aggregateTemplate.html",'<div ng-click="row.toggleExpand()" ng-style="rowStyle(row)" class="ngAggregate">\r\n    <span class="ngAggregateText">{{row.label CUSTOM_FILTERS}} ({{row.totalChildren()}} {{AggItemsLabel}})</span>\r\n    <div class="{{row.aggClass()}}"></div>\r\n</div>\r\n'),$templateCache.put("cellEditTemplate.html",'<div ng-cell-has-focus ng-dblclick="CELL_EDITABLE_CONDITION && editCell()">\r\n\t<div ng-edit-cell-if="!(isFocused && CELL_EDITABLE_CONDITION)">\t\r\n\t\tDISPLAY_CELL_TEMPLATE\r\n\t</div>\r\n\t<div ng-edit-cell-if="isFocused && CELL_EDITABLE_CONDITION">\r\n\t\tEDITABLE_CELL_TEMPLATE\r\n\t</div>\r\n</div>\r\n'),$templateCache.put("cellTemplate.html",'<div class="ngCellText" ng-class="col.colIndex()"><span ng-cell-text>{{COL_FIELD CUSTOM_FILTERS}}</span></div>'),$templateCache.put("checkboxCellTemplate.html",'<div class="ngSelectionCell"><input tabindex="-1" class="ngSelectionCheckbox" type="checkbox" ng-checked="row.selected" /></div>'),$templateCache.put("checkboxHeaderTemplate.html",'<input class="ngSelectionHeader" type="checkbox" ng-show="multiSelect" ng-model="allSelected" ng-change="toggleSelectAll(allSelected, true)"/>'),$templateCache.put("editableCellTemplate.html",'<input ng-class="\'colt\' + col.index" ng-input="COL_FIELD" ng-model="COL_FIELD" />'),$templateCache.put("footerTemplate.html",'<div ng-show="showFooter" class="ngFooterPanel" ng-class="{\'ui-widget-content\': jqueryUITheme, \'ui-corner-bottom\': jqueryUITheme}" ng-style="footerStyle()">\r\n    <div class="ngTotalSelectContainer" >\r\n        <div class="ngFooterTotalItems" ng-class="{\'ngNoMultiSelect\': !multiSelect}" >\r\n            <span class="ngLabel">{{i18n.ngTotalItemsLabel}} {{maxRows()}}</span><span ng-show="filterText.length > 0" class="ngLabel">({{i18n.ngShowingItemsLabel}} {{totalFilteredItemsLength()}})</span>\r\n        </div>\r\n        <div class="ngFooterSelectedItems" ng-show="multiSelect">\r\n            <span class="ngLabel">{{i18n.ngSelectedItemsLabel}} {{selectedItems.length}}</span>\r\n        </div>\r\n    </div>\r\n    <div class="ngPagerContainer" style="float: right; margin-top: 10px;" ng-show="enablePaging" ng-class="{\'ngNoMultiSelect\': !multiSelect}">\r\n        <div style="float:left; margin-right: 10px;" class="ngRowCountPicker">\r\n            <span style="float: left; margin-top: 3px;" class="ngLabel">{{i18n.ngPageSizeLabel}}</span>\r\n            <select style="float: left;height: 27px; width: 100px" ng-model="pagingOptions.pageSize" >\r\n                <option ng-repeat="size in pagingOptions.pageSizes">{{size}}</option>\r\n            </select>\r\n        </div>\r\n        <div style="float:left; margin-right: 10px; line-height:25px;" class="ngPagerControl" style="float: left; min-width: 135px;">\r\n            <button type="button" class="ngPagerButton" ng-click="pageToFirst()" ng-disabled="cantPageBackward()" title="{{i18n.ngPagerFirstTitle}}"><div class="ngPagerFirstTriangle"><div class="ngPagerFirstBar"></div></div></button>\r\n            <button type="button" class="ngPagerButton" ng-click="pageBackward()" ng-disabled="cantPageBackward()" title="{{i18n.ngPagerPrevTitle}}"><div class="ngPagerFirstTriangle ngPagerPrevTriangle"></div></button>\r\n            <input class="ngPagerCurrent" min="1" max="{{currentMaxPages}}" type="number" style="width:50px; height: 24px; margin-top: 1px; padding: 0 4px;" ng-model="pagingOptions.currentPage"/>\r\n            <span class="ngGridMaxPagesNumber" ng-show="maxPages() > 0">/ {{maxPages()}}</span>\r\n            <button type="button" class="ngPagerButton" ng-click="pageForward()" ng-disabled="cantPageForward()" title="{{i18n.ngPagerNextTitle}}"><div class="ngPagerLastTriangle ngPagerNextTriangle"></div></button>\r\n            <button type="button" class="ngPagerButton" ng-click="pageToLast()" ng-disabled="cantPageToLast()" title="{{i18n.ngPagerLastTitle}}"><div class="ngPagerLastTriangle"><div class="ngPagerLastBar"></div></div></button>\r\n        </div>\r\n    </div>\r\n</div>\r\n'),$templateCache.put("gridTemplate.html",'<div class="ngTopPanel" ng-class="{\'ui-widget-header\':jqueryUITheme, \'ui-corner-top\': jqueryUITheme}" ng-style="topPanelStyle()">\r\n    <div class="ngGroupPanel" ng-show="showGroupPanel()" ng-style="groupPanelStyle()">\r\n        <div class="ngGroupPanelDescription" ng-show="configGroups.length == 0">{{i18n.ngGroupPanelDescription}}</div>\r\n        <ul ng-show="configGroups.length > 0" class="ngGroupList">\r\n            <li class="ngGroupItem" ng-repeat="group in configGroups">\r\n                <span class="ngGroupElement">\r\n                    <span class="ngGroupName">{{group.displayName}}\r\n                        <span ng-click="removeGroup($index)" class="ngRemoveGroup">x</span>\r\n                    </span>\r\n                    <span ng-hide="$last" class="ngGroupArrow"></span>\r\n                </span>\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class="ngHeaderContainer" ng-style="headerStyle()">\r\n        <div ng-header-row class="ngHeaderScroller" ng-style="headerScrollerStyle()"></div>\r\n    </div>\r\n    <div ng-grid-menu></div>\r\n</div>\r\n<div class="ngViewport" unselectable="on" ng-viewport ng-class="{\'ui-widget-content\': jqueryUITheme}" ng-style="viewportStyle()">\r\n    <div class="ngCanvas" ng-style="canvasStyle()">\r\n        <div ng-style="rowStyle(row)" ng-repeat="row in renderedRows" ng-click="row.toggleSelected($event)" ng-class="row.alternatingRowClass()" ng-row></div>\r\n    </div>\r\n</div>\r\n<div ng-grid-footer></div>\r\n'),$templateCache.put("headerCellTemplate.html",'<div class="ngHeaderSortColumn {{col.headerClass}}" ng-style="{\'cursor\': col.cursor}" ng-class="{ \'ngSorted\': !col.noSortVisible() }">\r\n    <div ng-click="col.sort($event)" ng-class="\'colt\' + col.index" class="ngHeaderText">{{col.displayName}}</div>\r\n    <div class="ngSortButtonDown" ng-click="col.sort($event)" ng-show="col.showSortButtonDown()"></div>\r\n    <div class="ngSortButtonUp" ng-click="col.sort($event)" ng-show="col.showSortButtonUp()"></div>\r\n    <div class="ngSortPriority">{{col.sortPriority}}</div>\r\n    <div ng-class="{ ngPinnedIcon: col.pinned, ngUnPinnedIcon: !col.pinned }" ng-click="togglePin(col)" ng-show="col.pinnable"></div>\r\n</div>\r\n<div ng-show="col.resizable" class="ngHeaderGrip" ng-click="col.gripClick($event)" ng-mousedown="col.gripOnMouseDown($event)"></div>\r\n'),$templateCache.put("headerRowTemplate.html",'<div ng-style="{ height: col.headerRowHeight }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngHeaderCell">\r\n\t<div class="ngVerticalBar" ng-style="{height: col.headerRowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div>\r\n\t<div ng-header-cell></div>\r\n</div>'),$templateCache.put("menuTemplate.html",'<div ng-show="showColumnMenu || showFilter"  class="ngHeaderButton" ng-click="toggleShowMenu()">\r\n    <div class="ngHeaderButtonArrow"></div>\r\n</div>\r\n<div ng-show="showMenu" class="ngColMenu">\r\n    <div ng-show="showFilter">\r\n        <input placeholder="{{i18n.ngSearchPlaceHolder}}" type="text" ng-model="filterText"/>\r\n    </div>\r\n    <div ng-show="showColumnMenu">\r\n        <span class="ngMenuText">{{i18n.ngMenuText}}</span>\r\n        <ul class="ngColList">\r\n            <li class="ngColListItem" ng-repeat="col in columns | ngColumns">\r\n                <label><input ng-disabled="col.pinned" type="checkbox" class="ngColListCheckbox" ng-model="col.visible"/>{{col.displayName}}</label>\r\n\t\t\t\t<a title="Group By" ng-class="col.groupedByClass()" ng-show="col.groupable && col.visible" ng-click="groupBy(col)"></a>\r\n\t\t\t\t<span class="ngGroupingNumber" ng-show="col.groupIndex > 0">{{col.groupIndex}}</span>          \r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>'),$templateCache.put("rowTemplate.html",'<div ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngCell {{col.cellClass}}">\r\n\t<div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div>\r\n\t<div ng-cell></div>\r\n</div>')}])}(window,jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
