"use strict";angular.module("ui.checkbox",[]).directive("checkbox",(function(){return{scope:{},require:"ngModel",restrict:"E",replace:"true",template:"<button type=\"button\" ng-style=\"stylebtn\" class=\"btn btn-white\" ng-class=\"{'btn-xs': size==='default', 'btn-sm': size==='large', 'btn-lg': size==='largest'}\"><span ng-style=\"styleicon\" class=\"glyphicon\" ng-class=\"{'fa fa-check': checked===true}\"></span></button>",link:function(scope,elem,attrs,modelCtrl){var label=elem.next("span");scope.size="default",scope.stylebtn={},scope.styleicon={width:"10px",left:"-1px"},void 0!==attrs.large&&(scope.size="large",scope.stylebtn={"padding-top":"2px","padding-bottom":"2px",height:"30px"},scope.styleicon={width:"8px",left:"-5px","font-size":"17px"}),void 0!==attrs.larger&&(scope.size="larger",scope.stylebtn={"padding-top":"2px","padding-bottom":"2px",height:"34px"},scope.styleicon={width:"8px",left:"-8px","font-size":"22px"}),void 0!==attrs.largest&&(scope.size="largest",scope.stylebtn={"padding-top":"2px","padding-bottom":"2px",height:"45px"},scope.styleicon={width:"11px",left:"-11px","font-size":"30px"});var trueValue=!0,falseValue=!1;void 0!==attrs.ngTrueValue&&(trueValue=attrs.ngTrueValue),void 0!==attrs.ngFalseValue&&(falseValue=attrs.ngFalseValue),void 0!==scope.name&&(elem.name=scope.name),scope.$watch((function(){return modelCtrl.$modelValue===trueValue||!0===modelCtrl.$modelValue?(modelCtrl.$setViewValue(trueValue),label.addClass("todo-completed")):modelCtrl.$setViewValue(falseValue),modelCtrl.$modelValue}),(function(newVal,oldVal){scope.checked=modelCtrl.$modelValue===trueValue}),!0),elem.bind("click",(function(){scope.$apply((function(){modelCtrl.$modelValue===falseValue?(modelCtrl.$setViewValue(trueValue),label.toggleClass("todo-completed")):(modelCtrl.$setViewValue(falseValue),label.toggleClass("todo-completed"))}))}))}}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3RzdHJhcC9hbmd1bGFyLWJvb3RzdHJhcC1jaGVja2JveC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwic2NvcGUiLCJyZXF1aXJlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGUiLCJsaW5rIiwiZWxlbSIsImF0dHJzIiwibW9kZWxDdHJsIiwibGFiZWwiLCJuZXh0Iiwic2l6ZSIsInN0eWxlYnRuIiwic3R5bGVpY29uIiwid2lkdGgiLCJsZWZ0IiwidW5kZWZpbmVkIiwibGFyZ2UiLCJwYWRkaW5nLXRvcCIsInBhZGRpbmctYm90dG9tIiwiaGVpZ2h0IiwiZm9udC1zaXplIiwibGFyZ2VyIiwibGFyZ2VzdCIsInRydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJuZ1RydWVWYWx1ZSIsIm5nRmFsc2VWYWx1ZSIsIm5hbWUiLCIkd2F0Y2giLCIkbW9kZWxWYWx1ZSIsIiRzZXRWaWV3VmFsdWUiLCJhZGRDbGFzcyIsIm5ld1ZhbCIsIm9sZFZhbCIsImNoZWNrZWQiLCJiaW5kIiwiJGFwcGx5IiwidG9nZ2xlQ2xhc3MiXSwibWFwcGluZ3MiOiJBQUFBLGFBRUFBLFFBQVFDLE9BQU8sY0FBZSxJQUFJQyxVQUFVLFlBQVksV0FDcEQsTUFBTyxDQUNIQyxNQUFPLEdBQ1BDLFFBQVMsVUFDVEMsU0FBVSxJQUNWQyxRQUFTLE9BQ1RDLFNBQVUsdVJBR1ZDLEtBQU0sU0FBU0wsTUFBT00sS0FBTUMsTUFBT0MsV0FFL0IsSUFBSUMsTUFBUUgsS0FBS0ksS0FBSyxRQUV0QlYsTUFBTVcsS0FBTyxVQUViWCxNQUFNWSxTQUFXLEdBRWpCWixNQUFNYSxVQUFZLENBQUNDLE1BQVMsT0FBUUMsS0FBUSxhQUV6QkMsSUFBaEJULE1BQU1VLFFBQ0xqQixNQUFNVyxLQUFPLFFBQ2JYLE1BQU1ZLFNBQVcsQ0FBQ00sY0FBZSxNQUFPQyxpQkFBa0IsTUFBT0MsT0FBVSxRQUMzRXBCLE1BQU1hLFVBQVksQ0FBQ0MsTUFBUyxNQUFPQyxLQUFRLE9BQVFNLFlBQWEsY0FFaERMLElBQWpCVCxNQUFNZSxTQUNMdEIsTUFBTVcsS0FBTyxTQUNiWCxNQUFNWSxTQUFXLENBQUNNLGNBQWUsTUFBT0MsaUJBQWtCLE1BQU9DLE9BQVUsUUFDM0VwQixNQUFNYSxVQUFZLENBQUNDLE1BQVMsTUFBT0MsS0FBUSxPQUFRTSxZQUFhLGNBRS9DTCxJQUFsQlQsTUFBTWdCLFVBQ0x2QixNQUFNVyxLQUFPLFVBQ2JYLE1BQU1ZLFNBQVcsQ0FBQ00sY0FBZSxNQUFPQyxpQkFBa0IsTUFBT0MsT0FBVSxRQUMzRXBCLE1BQU1hLFVBQVksQ0FBQ0MsTUFBUyxPQUFRQyxLQUFRLFFBQVNNLFlBQWEsU0FHdEUsSUFBSUcsV0FBWSxFQUNaQyxZQUFhLE9BR1FULElBQXRCVCxNQUFNbUIsY0FDTEYsVUFBWWpCLE1BQU1tQixrQkFJSVYsSUFBdkJULE1BQU1vQixlQUNMRixXQUFhbEIsTUFBTW9CLG1CQUlMWCxJQUFmaEIsTUFBTTRCLE9BQ0x0QixLQUFLc0IsS0FBTzVCLE1BQU00QixNQUl0QjVCLE1BQU02QixRQUFPLFdBT1QsT0FOR3JCLFVBQVVzQixjQUFnQk4sWUFBdUMsSUFBMUJoQixVQUFVc0IsYUFDaER0QixVQUFVdUIsY0FBY1AsV0FDeEJmLE1BQU11QixTQUFTLG1CQUVmeEIsVUFBVXVCLGNBQWNOLFlBRXJCakIsVUFBVXNCLGVBQ2xCLFNBQVNHLE9BQVFDLFFBQ2hCbEMsTUFBTW1DLFFBQVUzQixVQUFVc0IsY0FBZ0JOLGFBQzNDLEdBR0hsQixLQUFLOEIsS0FBSyxTQUFTLFdBRWZwQyxNQUFNcUMsUUFBTyxXQUNON0IsVUFBVXNCLGNBQWdCTCxZQUN6QmpCLFVBQVV1QixjQUFjUCxXQUN4QmYsTUFBTTZCLFlBQVksb0JBRWxCOUIsVUFBVXVCLGNBQWNOLFlBQ3hCaEIsTUFBTTZCLFlBQVkiLCJmaWxlIjoiYm9vdHN0cmFwL2FuZ3VsYXItYm9vdHN0cmFwLWNoZWNrYm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmFuZ3VsYXIubW9kdWxlKFwidWkuY2hlY2tib3hcIiwgW10pLmRpcmVjdGl2ZShcImNoZWNrYm94XCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgcmVxdWlyZTogXCJuZ01vZGVsXCIsXG4gICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgcmVwbGFjZTogXCJ0cnVlXCIsXG4gICAgICAgIHRlbXBsYXRlOiBcIjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBuZy1zdHlsZT1cXFwic3R5bGVidG5cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXdoaXRlXFxcIiBuZy1jbGFzcz1cXFwieydidG4teHMnOiBzaXplPT09J2RlZmF1bHQnLCAnYnRuLXNtJzogc2l6ZT09PSdsYXJnZScsICdidG4tbGcnOiBzaXplPT09J2xhcmdlc3QnfVxcXCI+XCIgK1xuICAgICAgICAgICAgXCI8c3BhbiBuZy1zdHlsZT1cXFwic3R5bGVpY29uXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uXFxcIiBuZy1jbGFzcz1cXFwieydmYSBmYS1jaGVjayc6IGNoZWNrZWQ9PT10cnVlfVxcXCI+PC9zcGFuPlwiICtcbiAgICAgICAgICAgIFwiPC9idXR0b24+XCIsXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycywgbW9kZWxDdHJsKSB7XG5cbiAgICAgICAgICAgIHZhciBsYWJlbCA9IGVsZW0ubmV4dCgnc3BhbicpO1xuXG4gICAgICAgICAgICBzY29wZS5zaXplID0gXCJkZWZhdWx0XCI7XG4gICAgICAgICAgICAvLyBEZWZhdWx0IEJ1dHRvbiBTdHlsaW5nXG4gICAgICAgICAgICBzY29wZS5zdHlsZWJ0biA9IHt9O1xuICAgICAgICAgICAgLy8gRGVmYXVsdCBDaGVja21hcmsgU3R5bGluZ1xuICAgICAgICAgICAgc2NvcGUuc3R5bGVpY29uID0ge1wid2lkdGhcIjogXCIxMHB4XCIsIFwibGVmdFwiOiBcIi0xcHhcIn07XG4gICAgICAgICAgICAvLyBJZiBzaXplIGlzIHVuZGVmaW5lZCwgQ2hlY2tib3ggaGFzIG5vcm1hbCBzaXplIChCb290c3RyYXAgJ3hzJylcbiAgICAgICAgICAgIGlmKGF0dHJzLmxhcmdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zaXplID0gXCJsYXJnZVwiO1xuICAgICAgICAgICAgICAgIHNjb3BlLnN0eWxlYnRuID0ge1wicGFkZGluZy10b3BcIjogXCIycHhcIiwgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjJweFwiLCBcImhlaWdodFwiOiBcIjMwcHhcIn07XG4gICAgICAgICAgICAgICAgc2NvcGUuc3R5bGVpY29uID0ge1wid2lkdGhcIjogXCI4cHhcIiwgXCJsZWZ0XCI6IFwiLTVweFwiLCBcImZvbnQtc2l6ZVwiOiBcIjE3cHhcIn07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihhdHRycy5sYXJnZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnNpemUgPSBcImxhcmdlclwiO1xuICAgICAgICAgICAgICAgIHNjb3BlLnN0eWxlYnRuID0ge1wicGFkZGluZy10b3BcIjogXCIycHhcIiwgXCJwYWRkaW5nLWJvdHRvbVwiOiBcIjJweFwiLCBcImhlaWdodFwiOiBcIjM0cHhcIn07XG4gICAgICAgICAgICAgICAgc2NvcGUuc3R5bGVpY29uID0ge1wid2lkdGhcIjogXCI4cHhcIiwgXCJsZWZ0XCI6IFwiLThweFwiLCBcImZvbnQtc2l6ZVwiOiBcIjIycHhcIn07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZihhdHRycy5sYXJnZXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzY29wZS5zaXplID0gXCJsYXJnZXN0XCI7XG4gICAgICAgICAgICAgICAgc2NvcGUuc3R5bGVidG4gPSB7XCJwYWRkaW5nLXRvcFwiOiBcIjJweFwiLCBcInBhZGRpbmctYm90dG9tXCI6IFwiMnB4XCIsIFwiaGVpZ2h0XCI6IFwiNDVweFwifTtcbiAgICAgICAgICAgICAgICBzY29wZS5zdHlsZWljb24gPSB7XCJ3aWR0aFwiOiBcIjExcHhcIiwgXCJsZWZ0XCI6IFwiLTExcHhcIiwgXCJmb250LXNpemVcIjogXCIzMHB4XCJ9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdHJ1ZVZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBmYWxzZVZhbHVlID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIElmIGRlZmluZWQgc2V0IHRydWUgdmFsdWVcbiAgICAgICAgICAgIGlmKGF0dHJzLm5nVHJ1ZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0cnVlVmFsdWUgPSBhdHRycy5uZ1RydWVWYWx1ZTtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gSWYgZGVmaW5lZCBzZXQgZmFsc2UgdmFsdWVcbiAgICAgICAgICAgIGlmKGF0dHJzLm5nRmFsc2VWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZmFsc2VWYWx1ZSA9IGF0dHJzLm5nRmFsc2VWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbmFtZSBhdHRyaWJ1dGUgaXMgc2V0IGFuZCBpZiBzbyBhZGQgaXQgdG8gdGhlIERPTSBlbGVtZW50XG4gICAgICAgICAgICBpZihzY29wZS5uYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBlbGVtLm5hbWUgPSBzY29wZS5uYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgZWxlbWVudCB3aGVuIG1vZGVsIGNoYW5nZXNcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZihtb2RlbEN0cmwuJG1vZGVsVmFsdWUgPT09IHRydWVWYWx1ZSB8fCBtb2RlbEN0cmwuJG1vZGVsVmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUodHJ1ZVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwuYWRkQ2xhc3MoJ3RvZG8tY29tcGxldGVkJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoZmFsc2VWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtb2RlbEN0cmwuJG1vZGVsVmFsdWU7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmNoZWNrZWQgPSBtb2RlbEN0cmwuJG1vZGVsVmFsdWUgPT09IHRydWVWYWx1ZTtcbiAgICAgICAgICAgIH0sIHRydWUpO1xuXG4gICAgICAgICAgICAvLyBPbiBjbGljayBzd2FwIHZhbHVlIGFuZCB0cmlnZ2VyIG9uQ2hhbmdlIGZ1bmN0aW9uXG4gICAgICAgICAgICBlbGVtLmJpbmQoXCJjbGlja1wiLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYobW9kZWxDdHJsLiRtb2RlbFZhbHVlID09PSBmYWxzZVZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSh0cnVlVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwudG9nZ2xlQ2xhc3MoJ3RvZG8tY29tcGxldGVkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShmYWxzZVZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLnRvZ2dsZUNsYXNzKCd0b2RvLWNvbXBsZXRlZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59KTsiXX0=
