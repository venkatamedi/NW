angular.module("TDM-FE").service("Session",(function(){this.create=function(userAuthenticated){this.userAuthenticated=userAuthenticated},this.destroy=function(){this.userAuthenticated=null}})),angular.module("TDM-FE").factory("TDMService",(function(Restangular,$sessionStorage,$rootScope){var invokeFabricWebServiceWrapper=(path,body,method)=>new Promise((resolve,reject)=>{window.k2api.invokeFabricWebService(path,body,method).then(resp=>{resolve(resp)}).catch(err=>{reject(err)}).finally(()=>{$rootScope.$apply()})});return{deleteGenericAPI:function(url,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(url,data,"DELETE"):Restangular.all(url).customDELETE(data)},putGenericAPI:function(url,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(url,data,"PUT"):Restangular.all(url).customPUT(data)},postGenericAPI:function(url,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(url,data,"POST"):Restangular.all(url).post(data)},getGenericAPI:function(url){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(url,null,"GET"):Restangular.all(url).get("")},getCustomLogicFlows:function(luList){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("getcustomlogicflows",{luList:luList},"GET"):Restangular.all(environmentsbyuserandbe).get(be_name)},getCustomLogicParams:function(luName,flowName){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("getCustomLogicParams",{luName:luName,flowName:flowName},"GET"):Restangular.all(environmentsbyuserandbe).get(be_name)},getDateTimeFormat:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("getDateTimeFormat",{},"GET"):Restangular.all(environmentsbyuserandbe).get(be_name)},decryptInterfacePassword:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("decryptInterfacePassword",data,"POST"):Restangular.all("decryptInterfacePassword").post(data)},getSummaryReport:function(executionId,luName){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`taskSummaryReport/${executionId}/luName/${luName}`,null,"GET"):Restangular.one("taskSummaryReport",executionId).one("luName",luName).get("")},testInterfaceDbConnection:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("testDbConnection",data,"POST"):Restangular.all("testDbConnection").post(data)},getDbInterfacesByProductLUs:function(productId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/product/${productId}/dbInterfaces`,null,"GET"):Restangular.all("environment").one("product",productId).all("dbInterfaces").get("")},getSupportedDbTypes:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("supportedDbTypes",null,"GET"):Restangular.all("supportedDbTypes").get("")},saveDBTypes:function(DBTypes){$sessionStorage.supportedDbTypes=DBTypes},getDBTypes:function(){return $sessionStorage.supportedDbTypes},getEnvironments:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("environments",null,"get"):Restangular.all("environments").get("")},getEnvironment:function(id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("environment/"+id,null,"GET"):Restangular.one("environment",id).get("")},getProducts:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("products",null,"get"):Restangular.all("products").get("")},getProductsWithLUs:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("productsWithLUs",null,"GET"):Restangular.all("productsWithLUs").get("")},getProduct:function(productId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("product/"+productId,null,"get"):Restangular.one("product",productId).get("")},updateEnvironment:function(environmentId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("environment/"+environmentId,data,"PUT"):Restangular.one("environment",environmentId).customPUT(data)},addEnvironment:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("environment",data,"POST"):Restangular.all("environment").post(data)},deleteEnvironment:function(environmentID,environmentName){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/envname/${environmentName}`,null,"DELETE"):Restangular.one("environment",environmentID).one("envname",environmentName).customDELETE("")},updateProduct:function(productId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("product/"+productId,data,"PUT"):Restangular.one("product",productId).customPUT(data)},createProduct:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("product",data,"POST"):Restangular.all("product").post(data)},deleteProduct:function(productId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("product/"+productId,null,"DELETE"):Restangular.one("product",productId).customDELETE("")},createDataCenter:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("datacenter",data,"POST"):Restangular.all("datacenter").post(data)},getDataCenters:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("dataCenters",null,"get"):Restangular.all("datacenters").get("")},updateDataCenter:function(data_center_id,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("dataCenters/"+data_center_id,data,"PUT"):Restangular.one("datacenter",data_center_id).customPUT(data)},deleteDataCenter:function(data_center_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("dataCenters/"+data_center_id,null,"DELETE"):Restangular.one("datacenter",data_center_id).customDELETE("")},getProductInterfaces:function(productId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`product/${productId}/interfaces`,null,"GET"):Restangular.one("product",productId).all("interfaces").get("")},postProductInterface:function(productId,productName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`product/${productId}/productname/${productName}/interface`,data,"POST"):Restangular.one("product",productId).one("productname",productName).all("interface").post(data)},putProductInterface:function(productId,productName,interface_id,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`product/${productId}/productname/${productName}/interface/${interface_id}`,data,"PUT"):Restangular.one("product",productId).one("productname",productName).one("interface",interface_id).customPUT(data)},deleteProductInterface:function(productId,productName,interface_id,interface_name,interfacesCount,envCount){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`product/${productId}/productname/${productName}/interface/${interface_id}/interfacename/${interface_name}/envcount/${envCount}`,null,"DELETE"):Restangular.one("product",productId).one("productname",productName).one("interface",interface_id).one("interfacename",interface_name).one("interfacecount",interfacesCount).one("envcount",envCount).customDELETE("")},getLogicalUnits:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("logicalunits",null,"GET"):Restangular.all("logicalunits").get("")},getProductLogicalUnits:function(productId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`product/${productId}/logicalunits`,null,"GET"):Restangular.one("product",productId).all("logicalunits").get("")},getBELogicalUnits:function(beId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beId}/logicalunits`,null,"GET"):Restangular.one("businessentity",beId).all("logicalunits").get("")},getLogicalUnitsWithoutProduct:function(beId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("logicalunitswithoutproduct",null,"GET"):Restangular.all("logicalunitswithoutproduct").get("")},postLogicalUnits:function(beId,beName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beId}/bename/${beName}/logicalunits`,data,"POST"):Restangular.one("businessentity",beId).one("bename",beName).all("logicalunits").post(data)},putLogicalUnit:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${data.be_id}/logicalunit/${data.lu_id}`,{logicalUnit:data},"PUT"):Restangular.one("businessentity",data.be_id).one("logicalunit",data.lu_id).customPUT(data)},putLogicalUnits:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${data.be_id}/logicalunits`,data,"PUT"):Restangular.one("businessentity",data.be_id).all("logicalunits").customPUT(data)},deleteLogicalUnit:function(beId,beName,luId,luName){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beId}/bename/${beName}/logicalunit/${luId}/luname/${luName}`,null,"DELETE"):Restangular.one("businessentity",beId).one("bename",beName).one("logicalunit",luId).one("luname",luName).customDELETE("")},getBusinessEntities:function(productId,lu_name){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("businessentities",null,"get"):Restangular.all("businessentities").get("")},createBusinessEntity:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("businessentity",data,"POST"):Restangular.all("businessentity").post(data)},updateBusinessEntity:function(beId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("businessentity/"+beId,data,"PUT"):Restangular.one("businessentity",beId).customPUT(data)},deleteBusinessEntity:function(beId,beName){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("businessentity/"+beId,null,"DELETE"):Restangular.one("businessentity",beId).customDELETE("")},getTasks:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("tasks",null,"GET"):Restangular.all("tasks").get("")},createTask:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("task",data,"POST"):Restangular.all("task").post(data)},updateTask:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("task/"+data.task_id,data,"PUT"):Restangular.one("task",data.task_id).customPUT(data)},deleteTask:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${data.task_id}/taskname/${data.task_title}`,null,"DELETE"):Restangular.one("task",data.task_id).one("taskname",data.task_title).customDELETE("")},getEnvironmentRoles:function(environmentID){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/roles`,null,"GET"):Restangular.one("environment",environmentID).all("roles").get("")},postEnvironmentRole:function(environmentID,environmentName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/envname/${environmentName}/role`,data,"POST"):Restangular.one("environment",environmentID).one("envname",environmentName).all("role").post(data)},updateEnvironmentRole:function(environmentID,environmentName,roleID,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/envname/${environmentName}/role/${roleID}`,data,"PUT"):Restangular.one("environment",environmentID).one("envname",environmentName).one("role",roleID).customPUT(data)},deleteEnvironmentRole:function(environmentID,environmentName,roleID,roleName){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/envname/${environmentName}/role/${roleID}/rolename/${roleName}`,null,"DELETE"):Restangular.one("environment",environmentID).one("envname",environmentName).one("role",roleID).one("rolename",roleName).customDELETE("")},getTesters:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/testers`,null,"GET"):Restangular.one("environment",envId).all("testers").get("")},getOwners:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("owners",null,"GET"):Restangular.all("owners").get("")},getEnvironmentRoleTesters:function(environmentID,roleID){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/role/${roleID}/users`,null,"GET"):Restangular.one("environment",environmentID).one("role",roleID).all("users").get("")},postEnvironmentRoleTesters:function(environmentID,environmentName,roleID,roleName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/envname/${environmentName}/role/${roleID}/rolename/${roleName}/users`,{users:data},"POST"):Restangular.one("environment",environmentID).one("envname",environmentName).one("role",roleID).one("rolename",roleName).all("users").post(data)},getProductsForBusinessEntityAndEnv:function(be_id,environment_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${be_id}/environment/${environment_id}/products`,null,"GET"):Restangular.one("businessentity",be_id).one("environment",environment_id).all("products").get("")},getLogicalUnitsForBusinessEntityAndEnv:function(be_id,environment_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${be_id}/environment/${environment_id}/logicalunits`,null,"GET"):Restangular.one("businessentity",be_id).one("environment",environment_id).all("logicalunits").get("")},getTaskProducts:function(task_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${task_id}/products`,null,"GET"):Restangular.one("task",task_id).all("products").get("")},getTaskLogicalUnits:function(task_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${task_id}/logicalunits`,null,"GET"):Restangular.one("task",task_id).all("logicalunits").get("")},getTaskPostExecutionProcesses:function(task_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${task_id}/postexecutionprocess`,null,"GET"):Restangular.one("task",task_id).all("postexecutionprocess").get("")},postTaskProducts:function(taskId,taskName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${task_id}/taskname/${taskName}/products`,data,"POST"):Restangular.one("task",taskId).one("taskname",taskName).all("products").post(data)},postTaskLogicalUnits:function(taskId,taskName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${taskId}/taskname/${taskName}/logicalUnits`,data,"POST"):Restangular.one("task",taskId).one("taskname",taskName).all("logicalUnits").post(data)},postTaskPostExecutionProcess:function(taskId,taskName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${taskId}/taskname/${taskName}/postexecutionprocesses`,data,"POST"):Restangular.one("task",taskId).one("taskname",taskName).all("postexecutionprocesses").post(data)},getRoleForUserInEnv:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/userRole`,null,"GET"):Restangular.one("environment",envId).all("userRole").get("")},getEnvProducts:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/products`,null,"GET"):Restangular.one("environment",envId).all("products").get("")},getEnvGlobals:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/globals`,null,"GET"):Restangular.one("environment",envId).all("globals").get("")},postEnvProduct:function(envId,envName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/envname/${envName}/product`,data,"POST"):Restangular.one("environment",envId).one("envname",envName).all("product").post(data)},postEnvGlobal:function(envId,envName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/envname/${envName}/global`,data,"POST"):Restangular.one("environment",envId).one("envname",envName).all("global").post(data)},getAllGlobals:function(lus){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("environment/getAllGlobals",lus,"GET"):Restangular.one("environment",envId).all("getAllGlobals").get("")},putEnvProduct:function(envId,envName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/envname/${envName}/product`,data,"PUT"):Restangular.one("environment",envId).one("envname",envName).all("product").customPUT(data)},putEnvGlobal:function(envId,envName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/envname/${envName}/global`,data,"PUT"):Restangular.one("environment",envId).one("envname",envName).all("global").customPUT(data)},deleteEnvGlobal:function(envId,envName,global_name,lu_name){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/envname/${envName}/luname/${lu_name}/global/${global_name}`,null,"DELETE"):Restangular.one("environment",envId).one("envname",envName).one("global",global_name).customDELETE("")},deleteEnvProduct:function(envId,envName,productId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/envname/${envName}/product/${productId}`,null,"DELETE"):Restangular.one("environment",envId).one("envname",envName).one("product",productId).customDELETE("")},getEnvironmentOwners:function(environmentID){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${environmentID}/owners`,null,"GET"):Restangular.one("environment",environmentID).all("owners").get("")},getEnvironmentsForUser:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("environmentsbyuser",null,"GET"):Restangular.all("environmentsbyuser").get("")},getBusinessEntityParameters:function(beID){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beID}/parameters`,null,"GET"):Restangular.one("businessentity",beID).all("parameters").get("")},getAnalysisCount:function(beID,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beID}/analysiscount`,data,"POST"):Restangular.one("businessentity",beID).all("analysiscount").post(data)},getTaskHistory:function(taskExecId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${taskExecId}/history`,null,"GET"):Restangular.one("task",taskId).all("history").get("")},getSummaryTaskHistory:function(taskId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${taskId}/summary`,null,"GET"):Restangular.one("task",taskId).all("summary").get("")},getActivities:function(interval){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("activities/"+interval,null,"GET"):Restangular.one("activities",interval).get("")},getNumOfTasksPerMonth:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("numoftaskspermonth",null,"GET"):Restangular.all("numoftaskspermonth").get("")},getNumOfCopiedEntitiesPerMonth:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("numofcopiedentitiespermonth",null,"GET"):Restangular.all("numofcopiedentitiespermonth").get("")},getNumOfTaskExecutionsPerMonth:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("numoftaskexecutionspermonth",null,"GET"):Restangular.all("numoftaskexecutionspermonth").get("")},getNumOfProcessedEntitiesPerEnv:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("numofprocessedentitiesperenv",null,"GET"):Restangular.all("numofprocessedentitiesperenv").get("")},getNumOfTasksPerEnv:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("numoftasksperenv",null,"GET"):Restangular.all("numoftasksperenv").get("")},getBusinessEntitiesForEnvProducts:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/businessEntitiesForEnvProducts`,null,"GET"):Restangular.one("environment",envId).all("businessEntitiesForEnvProducts").get("")},executeTask:function(taskID,forced){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${taskID}/forced/${forced||!1}/startTask`,null,"POST"):Restangular.one("task",taskID).one("forced",forced||!1).all("startTask").get("")},getProductEnvCount:function(productId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`product/${productId}/envcount`,null,"GET"):Restangular.one("product",productId).all("envcount").get("")},getEnvTaskCount:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/taskCount`,null,"GET"):Restangular.one("environment",envId).all("taskCount").get("")},getTasksExecutionsStatus:function(interval){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("tasksExecutionsStatus/"+interval,null,"GET"):Restangular.one("tasksExecutionsStatus",interval).get("")},getTasksPerBE:function(interval){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("tasksPerBE/"+interval,null,"GET"):Restangular.one("tasksPerBE",interval).get("")},getDataCenterEnvironmentCount:function(data_center_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`datacenter/${data_center_id}/envcount`,null,"GET"):Restangular.one("datacenter",data_center_id).all("envcount").get("")},holdTask:function(task_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${task_id}/holdTask`,null,"PUT"):Restangular.one("task",task_id).all("holdTask").customPUT("")},activateTask:function(task_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`task/${task_id}/activateTask`,null,"PUT"):Restangular.one("task",task_id).all("activateTask").customPUT("")},getBEProductCount:function(be_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${be_id}/productCount`,null,"GET"):Restangular.one("businessentity",be_id).all("productCount").get("")},getEnvironmentSummary:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/summary/Month`,null,"GET"):Restangular.one("environment",envId).all("summary").all("Month").get("")},getTaskMonitor:function(data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("task/summary/Month",data,"POST"):Restangular.all("task").all("monitor").post(data)},stopExecution:function(execution){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("taskexecution/stopexecution",execution,"POST"):Restangular.all("taskexecution").all("stopexecution").post(execution)},getTimeZone:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("dbtimezone",null,"GET"):Restangular.all("dbtimezone").get("")},getNumProcessedCopiedFailedEntities:function(interval){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("numofprocessedcopiedfailedentities/"+interval,null,"GET"):Restangular.one("numofprocessedcopiedfailedentities",interval).get("")},getNumCopiedFailedEntitiesPerLU:function(interval){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("numofcopiedfailedentitiesperlu/"+interval,null,"GET"):Restangular.one("numofcopiedfailedentitiesperlu",interval).get("")},deleteTaskForBE:function(be_id){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${be_id}/task`,null,"DELETE"):Restangular.one("businessentity",be_id).all("task").customDELETE("")},getEnvExclusionLists:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/exclusionLists`,null,"GET"):Restangular.one("environment",envId).all("exclusionLists").get("")},getEnvExclusionList:function(envId,elId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/exclusionLists/${elId}`,null,"GET"):Restangular.one("environment",envId).one("exclusionLists",elId).get("")},postEnvExclusionList:function(envId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/exclusionLists/`,data,"POST"):Restangular.one("environment",envId).all("exclusionLists").post(data)},putEnvExclusionList:function(envId,elId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/exclusionLists/${elId}`,data,"PUT"):Restangular.one("environment",envId).one("exclusionLists",elId).customPUT(data)},deleteEnvExclusionList:function(envId,elId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/exclusionLists/${elId}`,null,"DELETE"):Restangular.one("environment",envId).one("exclusionLists",elId).customDELETE("")},postEnvExclusionListValidateRequestedBy:function(envId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/validateRequestedBy`,data,"POST"):Restangular.one("environment",envId).all("validateRequestedBy").post(data)},postEnvExclusionListValidateList:function(envId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/validateList`,data,"POST"):Restangular.one("environment",envId).all("validateList").post(data)},postEnvExclusionListValidateListBeforeUpdate:function(envId,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/validateListBeforeUpdate`,data,"POST"):Restangular.one("environment",envId).all("validateListBeforeUpdate").post(data)},getEnvTesters:function(envId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`environment/${envId}/envTesters`,null,"GET"):Restangular.one("environment",envId).all("envTesters").get("")},getAdmins:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("getAdmins",null,"GET"):Restangular.all("getAdmins").get("")},getTDMStats:function(body){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("taskStats",body,"POST"):Restangular.all("taskStats").post(body)},getLuTree:function(body){return window.k2api&&window.k2api.invokeFabricWebService?new Promise((resolve,reject)=>{invokeFabricWebServiceWrapper("wsGetTaskExeStatsForEntity",body,"GET").then(resp=>{if(resp&&"FAILED"===resp.errorCode)return reject({errorCode:"FAILED",message:resp.message});var data=resp&&void 0!==resp.result?resp.result:[],treeIterateWithMap=function(current,rootLU){if(current.lu_name=current.luName,current.lu_status=current.luStatus||"completed",delete current.entityStatus,delete current.luStatus,delete current.luName,current.collapsed=!0,current.isRoot||(current.parentRootLuName=rootLU),current.count=current.children&&current.children.length||0,current.hasChildren=current.children&&current.children.length>0||!1,!current.children||0==current.children.length)return current.isRoot&&(current.lu_status=current.luStatus||"completed"),void(current.children=[]);for(var i=0,len=current.children.length;i<len;i++)treeIterateWithMap(current.children[i],rootLU)},tree=[];for(var key in data)data[key].isRoot=!0,data[key].errorInPath="failed"===data[key].luStatus,tree.push(data[key]),treeIterateWithMap(data[key],data[key].luName);resolve({errorCode:"SUCCESS",message:null,result:tree})}).catch(err=>{reject({errorCode:"FAILED",message:err})})}):Restangular.all("luTree").post(body)},getLUChildren:function(body){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("luChildren",body,"POST"):Restangular.all("luChildren").post(body)},getRunningTasks:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("runningTasks",null,"GET"):Restangular.all("runningTasks").get("")},postExecutionProcess:function(beId,beName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beId}/bename/${beName}/postexecutionprocess`,data,"POST"):Restangular.one("businessentity",beId).one("bename",beName).all("postexecutionprocess").post(data)},putExecutionProcess:function(beId,beName,data){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beId}/bename/${beName}/postexecutionprocess/${data.process_id}`,data,"PUT"):Restangular.one("businessentity",beId).one("bename",beName).one("postexecutionprocess",data.process_id).customPUT(data)},deleteExecutionProcess:function(beId,beName,process_id,process_name){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beId}/bename/${beName}/postexecutionprocess/${process_id}/${process_name}`,null,"DELETE"):Restangular.one("businessentity",beId).one("bename",beName).one("postexecutionprocess",process_id).all(process_name).customDELETE("")},getBEPostExecutionProcess:function(beId){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper(`businessentity/${beId}/postexecutionprocess`,null,"GET"):Restangular.one("businessentity",beId).all("postexecutionprocess").get("")},getUserRole:()=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("wsGetUserPermissionGroup",null,"GET")},deleteRoleFromPermissionGroup:role=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("wsDeletePermissionGroupMapping",{role:role},"DELETE")},getTDMVersion:()=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("/tdmVersion",null,"GET")},getFabricRolesforUser:user=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("wsGetFabricRolesByUser",{user:user},"GET")},getUsersByPermssionGroups:permissionGroup=>{if(window.k2api&&window.k2api.invokeFabricWebService)return new Promise((resolve,reject)=>{invokeFabricWebServiceWrapper("/wsGetUsersByPermissionGroup",{permissionGroup:permissionGroup},"GET").then(response=>{response.result=_.map(response.result||[],user=>({uid:user,user_id:user,displayName:user,username:user})),resolve(response)}).catch(err=>{reject(err)})})},getFabricRoles:role=>{if(window.k2api&&window.k2api.invokeFabricWebService){let permissionGroupList={};return role&&(permissionGroupList.permissionGroupList=role),invokeFabricWebServiceWrapper("wsGetFabricRoles",permissionGroupList,"GET")}},attachRoleToPermissionGroup:(permission_group,role,description)=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("wsAddPermissionGroupMapping",{permission_group:permission_group,role:role,description:description},"POST")},updateRoleToPermissionGroup:(permission_group,old_role,new_role,description)=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("wsUpdatePermissionGroupMapping",{permission_group:permission_group,old_role:old_role,new_role:new_role,description:description},"PUT")},getPermissionGroups:()=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("wsGetPermissionGroupMappings",null,"GET")},getReservedEntities:entityId=>{if(window.k2api&&window.k2api.invokeFabricWebService){const requestBody={};return entityId&&(requestBody.entityId=entityId),invokeFabricWebServiceWrapper("getReservedEntities",requestBody,"GET")}},addNote:data=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("addNote",data,"POST")},releaseEntities:data=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("release/listOfEntities",data,"POST")},extendReservedEntities:data=>{if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("extend",data,"POST")},getParamsData:function(){if(window.k2api&&window.k2api.invokeFabricWebService)return invokeFabricWebServiceWrapper("getTdmGuiParams",null,"GET")},getActiveBusinessentitiesAPI:function(){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("getActiveBusinessentities",{},"GET"):Restangular.all(getActiveBusinessentities).get()},getEnvironmentsByUserandBe:function(be_name){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("environmentsbyuserandbe",{be_name:be_name},"GET"):Restangular.all(environmentsbyuserandbe).get(be_name)},getRetentionPeriod:function(be_name){return window.k2api&&window.k2api.invokeFabricWebService?invokeFabricWebServiceWrapper("retentionperiodinfo",{},"GET"):Restangular.all(environmentsbyuserandbe).get(be_name)}}})).factory("AuthService",(function(Restangular,$sessionStorage,USER_ROLES,Session,TDMService,$rootScope,toastr){var userAuth=null;TDMService.getUserRole().then(resp=>{if("SUCCESS"!==resp.errorCode||!resp.result||["admin","owner","tester"].indexOf(resp.result)<0)return void toastr.error(resp.message||"User Not Allowed to to use TDM APP");const roleObj={type:resp.result,id:{admin:0,owner:1,tester:2}[resp.result]};TDMService.getParamsData().then(resp=>{"SUCCESS"===resp.errorCode?(userAuth={accessToken:"tdm-WS",userName:"",displayName:"",userRole:roleObj,userID:"",tdmReprotsUrl:"http://[etlIpAddress]:3510/tdm_reports/",fluxMode:!0,permissionGroups:resp.result&&resp.result.permissionGroups||[],timezone:0},k2api.invokeFabricCommands("set username;").then(data=>{userAuth.userID=data.results[0].resultSet.rows[0][0],userAuth.displayName=data.results[0].resultSet.rows[0][0],userAuth.userName=data.results[0].resultSet.rows[0][0]}),$sessionStorage.userAuthenticated=userAuth,Session.create(userAuth),$rootScope.allowed=!0):toastr.error(resp.message||"User Not Allowed to to use TDM APP")})}).catch(err=>{toastr.error(err&&err.message||"User Not Allowed to to use TDM APP")});var isAuthenticated=function(){return!(!Session||!Session.userAuthenticated)&&!!Session.userAuthenticated};return{isFluxMode:function(){return userAuth&&1==userAuth.fluxMode},isAuthenticated:isAuthenticated,isAuthorized:function(authorizedRoles){return angular.isArray(authorizedRoles)||(authorizedRoles=[authorizedRoles]),isAuthenticated()&&-1!==authorizedRoles.indexOf(USER_ROLES[Session.userAuthenticated.userRole.type])},getUsername:function(){return userAuth&&userAuth.userName?userAuth.userName:"Unknown User"},getRole:function(){return userAuth.userRole},authorizedToEdit:function(role){if(USER_ROLES[userAuth.userRole.type]<=role)return!0},getUserId:function(){return userAuth.userID},getDisplayName:function(){return userAuth&&userAuth.displayName?userAuth.displayName:"Unknown User"},getTDMReports:function(){return userAuth&&userAuth.tdmReprotsUrl||"http://[etlIpAddress]:3210/tdm_reports/"},getRetentionPeriod:function(){return userAuth.retentionPeriod},getTimeZone:function(){return userAuth.timezone},getPermissionGroups:function(){return userAuth.permissionGroups}}})).factory("BreadCrumbsService",(function(){var data=[],currentID=0;return{push:function(translationData,name,callback){data.push({click:currentID,translationData:translationData,name:name,callback:callback}),currentID++},getAll:function(){return data},init:function(){data=[],currentID=0},breadCrumbChange:function(click){_.remove(data,(function(n){return n.click>click&&(currentID--,!0)}))}}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
