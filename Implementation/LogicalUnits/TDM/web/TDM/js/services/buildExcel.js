angular.module("TDM-FE").factory("ExcelService",(function(){var generalInfoStructure=[{name:"Task Name",field:"task_name",task_type:"all"},{name:"Task ID",field:"task_id",task_type:"all"},{name:"Task Execution ID",field:"task_execution_id",task_type:"all"},{name:"Created by",field:"created_by",task_type:"all"},{name:"Executed By",field:"executed_by",task_type:"all"},{name:"Execution Time (UTC)",field:"start_execution",task_type:"all"},{name:"Execution Status",field:"execution_status",task_type:"all"},{name:"Source Environment",field:"source_env",task_type:"all"},{name:"Source Environment Systems",field:"source_env_products",task_type:"all"},{name:"Target Environment",field:"target_env",task_type:"load"},{name:"Target Environment Systems",field:"target_env_products",task_type:"load"},{name:"Business Entity Name",field:"be_name",task_type:"all"},{name:"",field:"",task_type:"all"},{name:"Task Properties:",field:"",task_type:"all"},{name:"Task Type:",field:"task_type",task_type:"all"},{name:"Fabric Execution Id:",field:"fabric_execution_id",task_type:"all"},{name:"Selection Method:",field:"selection_method",task_type:"load"},{name:"Task Sync Mode:",field:"task_sync_mode",task_type:"load"},{name:"Env Sync Mode:",field:"env_sync_mode",task_type:"load"},{name:"Operation Mode:",field:"operation_mode",task_type:"load"},{name:"Replace Sequences:",field:"replace_sequences",task_type:"load"},{name:"Task Versioning:",field:"version_ind",task_type:"all"},{name:"Selected Version Name for Entities:",field:"selected_version_task_name",task_type:"load"},{name:"Selected Version Datetime for Entities:",field:"selected_version_datetime",task_type:"load"},{name:"Selected Version Name for Reference Tables:",field:"selected_ref_version_task_name",task_type:"load"},{name:"Selected Version Datetime for Reference Tables:",field:"selected_ref_version_datetime",task_type:"load"},{name:"Scheduling Parameters:",field:"version_ind",task_type:"load"},{name:"Schedule Expiration Date:",field:"schedule_expiration_date",task_type:"load"},{name:"Version Expiration Date:",field:"version_expiration_date",task_type:"extract"},{name:"Retention Period Type:",field:"retention_period_type",task_type:"extract"},{name:"Retention Period Value:",field:"retention_period_value",task_type:"extract"},{name:"Reservation Indicator:",field:"reserve_ind",task_type:"all"},{name:"Reservation Period Type:",field:"reserve_retention_period_type",task_type:"all"},{name:"Reservation Period Value:",field:"reserve_retention_period_value",task_type:"all"}],generalInfo={},srcProducts=[],targetProducts=[],buildGeneralInfoTab=function(worksheet){var task_type=generalInfo.task_type;if(generalInfoStructure.forEach((function(field){var value=generalInfo[field.field]||"";("fabric_execution_id"!==field.field||generalInfo[field.field])&&("all"!==field.task_type&&field.task_type!==task_type.toLowerCase()||("source_env_products"===field.field?(worksheet.addRow([field.name,""]),srcProducts.forEach(srcProd=>{worksheet.addRow(["",`${srcProd.product_name}, ${srcProd.source_product_version}`])})):"target_env_products"===field.field?(worksheet.addRow([field.name,""]),targetProducts.forEach(targetProd=>{worksheet.addRow(["",`${targetProd.product_name}, ${targetProd.target_product_version}`])})):worksheet.addRow([field.name,""+value])))})),generalInfo.override_parameters)try{const override_parameters=JSON.parse(generalInfo.override_parameters),overrideParametersKeys=Object.keys(override_parameters);if(overrideParametersKeys.length>0){addEmptyLine(worksheet),worksheet.addRow(["Override Parameters"]);let taskGlobals=null,reserveRetentionPeriod=null,retentionPeriod=null;overrideParametersKeys.forEach(key=>{"TASK_GLOBALS"===key?taskGlobals=override_parameters[key]:"RESERVE_RETENTION_PARAMS"===key?reserveRetentionPeriod=override_parameters[key]:"DATAFLUX_RETENTION_PARAMS"===key?retentionPeriod=override_parameters[key]:worksheet.addRow([key,""+override_parameters[key]])}),taskGlobals&&(addEmptyLine(worksheet),worksheet.addRow(["Task Globals"]),Object.keys(taskGlobals).forEach(key=>{worksheet.addRow([key,""+taskGlobals[key]])})),reserveRetentionPeriod&&(addEmptyLine(worksheet),worksheet.addRow(["RESERVE RETENTION PARAMS"]),Object.keys(reserveRetentionPeriod).forEach(key=>{worksheet.addRow([key,""+reserveRetentionPeriod[key]])})),retentionPeriod&&(addEmptyLine(worksheet),worksheet.addRow(["RETENTION PERIOD PARAMS"]),Object.keys(retentionPeriod).forEach(key=>{worksheet.addRow([key,""+retentionPeriod[key]])}))}}catch(err){console.log("unable to parse override parameters"),console.error(err)}},addEmptyLine=function(worksheet){worksheet.addRow([""])},getTableModel=function(data,worksheet,tableName){if(!data||!data.length)return{};var tableCols=[],tableRows=[],currentRow=worksheet.addRow([""]);Object.keys(data[0]).forEach((function(key){tableCols.push({name:key,key:key,width:"77"})}));for(var i=0;i<data.length;i++){var tableRow=[],row=data[i];Object.keys(row).forEach((function(key){tableRow.push(row[key])})),tableRows.push(tableRow)}return{name:tableName,ref:currentRow._cells[0]._address,columns:tableCols,rows:tableRows,style:{}}},addCustomizedRow=function(text,worksheet,customStyle){var row=worksheet.addRow([text]);Object.keys(customStyle).forEach((function(styleAttr){row[styleAttr]=customStyle[styleAttr]}))},addWorksheetTitle=function(titleName,worksheet){addCustomizedRow(titleName,worksheet,{font:{bold:!0,size:14}})},addWorksheetWarning=function(message,worksheet){addCustomizedRow(message,worksheet,{font:{bold:!0,color:{argb:"FF0000"}}})},buildListOfRootEntitiesTab=function(worksheet,tabData){var numOfCopiedEntities=tabData["Number of Copied Entities"][0].number_of_copied_root_entities,listOfCopiedEntities=tabData["List of Copied Entities"],numOfFailedEntities=tabData["Number of Failed Entities"][0].number_of_failed_root_entities,listOfFailedEntities=tabData["List of Failed Entities"];!function(numOfCopiedEntities,listOfCopiedEntities){addWorksheetTitle("Number of "+generalInfo.be_name+" Copied entities:"+numOfCopiedEntities,worksheet),addEmptyLine(worksheet),numOfCopiedEntities>0&&(worksheet.addTable(getTableModel(listOfCopiedEntities,worksheet,"copiedEntitiesTable")),addEmptyLine(worksheet))}(numOfCopiedEntities,listOfCopiedEntities),function(numOfFailedEntities,listOfFailedEntities){addWorksheetTitle("Number of "+generalInfo.be_name+" Failed entities:"+numOfFailedEntities,worksheet),addEmptyLine(worksheet),numOfFailedEntities>0&&(worksheet.addTable(getTableModel(listOfFailedEntities,worksheet,"failedEntitiesTable")),addEmptyLine(worksheet))}(numOfFailedEntities,listOfFailedEntities),addEmptyLine(worksheet)},buildListOfReferenceTables=function(worksheet,tabData){var numOfCopiedEntities=tabData["Number of Copied Reference Tables"][0].count,listOfCopiedEntities=tabData["List of Copied Reference Tables"],numOfFailedEntities=tabData["Number of Failed Reference Tables"][0].count,listOfFailedEntities=tabData["List of Failed Reference Tables"];!function(numOfCopiedEntities,listOfCopiedEntities){addWorksheetTitle("Number of "+generalInfo.be_name+" Copied Reference Tables: "+numOfCopiedEntities,worksheet),addEmptyLine(worksheet),numOfCopiedEntities>0&&(worksheet.addTable(getTableModel(listOfCopiedEntities,worksheet,"copiedRefTable")),addEmptyLine(worksheet))}(numOfCopiedEntities,listOfCopiedEntities),function(numOfFailedEntities,listOfFailedEntities){addWorksheetTitle("Number of "+generalInfo.be_name+" Failed Reference Tables: "+numOfFailedEntities,worksheet),addEmptyLine(worksheet),numOfFailedEntities>0&&(worksheet.addTable(getTableModel(listOfFailedEntities,worksheet,"failedRefTable")),addEmptyLine(worksheet))}(numOfFailedEntities,listOfFailedEntities)},buildErrorSummaryTab=function(worksheet,tabData){tabData&&tabData.length?(worksheet.addTable(getTableModel(tabData,worksheet,"errorSummaryTable")),addEmptyLine(worksheet)):addWorksheetWarning("No Error Summary Report Data",worksheet)},buildExtractTab=function(tabName,tabData,worksheet){switch(tabName){case"General Info":buildGeneralInfoTab(worksheet);break;case"Task Execution Summary":!function(worksheet,tabData){var migrateTableData=[],referenceTableData=[];let lusData=[],pepsData=[];tabData.forEach(item=>{item&&item.LUs?lusData=lusData.concat(item.LUs):item&&item["Post Execution Processes"]&&(pepsData=pepsData.concat(item["Post Execution Processes"]))});for(var i=0;i<lusData.length;i++){var luData=lusData[i],luName=luData["LU Name"];luData["LU Migration Summary"]&&(migrateTableData=migrateTableData.concat(luData["LU Migration Summary"].map((function(data){return(data=Object.assign({"LU Name":luName},data)).added=data.added||0,data.updated=data.updated||0,data.unchanged=data.unchanged||0,data})))),referenceTableData=referenceTableData.concat(luData["LU Reference Summary"])}let pepsTableData=[];for(i=0;i<pepsData.length;i++){var pepData=pepsData[i],pepName=pepData["Process Name"];pepData["Process Summary"]&&(pepsTableData=pepsTableData.concat(pepData["Process Summary"].map((function(data){return data=Object.assign({"Process Summary":pepName},data)}))))}!function(migrateData,worksheet){if(addWorksheetTitle("Migrating summary report for Task Execution ID: "+generalInfo.task_execution_id,worksheet),addEmptyLine(worksheet),migrateData&&migrateData.length){var table=getTableModel(migrateData,worksheet,"migrateTable");if(table.columns&&table.columns.length){for(var i=0;i<table.rows[0];i++)table.rows[0][i].unshift(luName);table.columns.forEach(column=>{"start time"===column.name?column.name="start time (UTC)":"end time"===column.name&&(column.name="end time (UTC)")})}worksheet.addTable(table),addEmptyLine(worksheet)}else addWorksheetWarning("No entities were migrated",worksheet)}(migrateTableData,worksheet),addEmptyLine(worksheet),function(refData,worksheet){if(addWorksheetTitle("Execution Summary Report for Reference Tables",worksheet),addEmptyLine(worksheet),!refData||!refData.length)return void addWorksheetWarning("No Reference Tables",worksheet);const tableData=getTableModel(refData,worksheet,"referenceTableSummary");tableData&&tableData.columns&&tableData.columns.forEach(column=>{"end_time"===column.name?column.name="end_time (UTC)":"start_time"===column.name&&(column.name="start_time (UTC)")}),worksheet.addTable(tableData),addEmptyLine(worksheet)}(referenceTableData,worksheet),addEmptyLine(worksheet),function(pepData,worksheet){if(addWorksheetTitle("Post Execution Processes Summary",worksheet),addEmptyLine(worksheet),!pepData||!pepData.length)return void addWorksheetWarning("No Post Execution Processes Tables",worksheet);const tableData=getTableModel(pepData,worksheet,"pepTableSummary");tableData&&tableData.columns&&tableData.columns.forEach(column=>{"end_time"===column.name?column.name="end_time (UTC)":"start_time"===column.name&&(column.name="start_time (UTC)")}),worksheet.addTable(tableData),addEmptyLine(worksheet)}(pepsTableData,worksheet)}(worksheet,tabData);break;case"List of Root Entities":buildListOfRootEntitiesTab(worksheet,tabData);break;case"List of Reference Tables":buildListOfReferenceTables(worksheet,tabData);break;case"Error Summary":buildErrorSummaryTab(worksheet,tabData)}},buildLoadTab=function(tabName,tabData,worksheet){switch(tabName){case"General Info":buildGeneralInfoTab(worksheet);break;case"Task Execution Summary":!function(worksheet,tabData){if(!tabData||!tabData.length)return void addEmptyLine(worksheet);let luTableData=[],postExecutionProcessData=[];tabData.forEach(item=>{item&&item.LUs&&item.LUs["LU Load Summary"]?luTableData=luTableData.concat(item.LUs["LU Load Summary"]):item&&item["Post Execution Processes"]&&item["Post Execution Processes"]["Post Execution Processes Summary"]&&(postExecutionProcessData=postExecutionProcessData.concat(item["Post Execution Processes"]["Post Execution Processes Summary"]))}),addWorksheetTitle("LU Summary",worksheet),addEmptyLine(worksheet);let tableData=getTableModel(luTableData,worksheet,"loadExecutionSummary");tableData&&tableData.columns&&tableData.columns.forEach(column=>{"start_execution_time"===column.name?column.name="start_execution_time (UTC)":"end_execution_time"===column.name&&(column.name="end_execution_time (UTC)")}),worksheet.addTable(tableData),addEmptyLine(worksheet),postExecutionProcessData&&postExecutionProcessData.length>0&&(addWorksheetTitle("Post Execution Processes Summary",worksheet),addEmptyLine(worksheet),tableData=getTableModel(postExecutionProcessData,worksheet,"postExecutionSummary"),tableData&&tableData.columns&&tableData.columns.forEach(column=>{"start_execution_time"===column.name?column.name="start_execution_time (UTC)":"end_execution_time"===column.name&&(column.name="end_execution_time (UTC)")}),worksheet.addTable(tableData),addEmptyLine(worksheet))}(worksheet,tabData);break;case"List of Root Entities":buildListOfRootEntitiesTab(worksheet,tabData);break;case"List of Reference Tables":buildListOfReferenceTables(worksheet,tabData);break;case"Error Summary":buildErrorSummaryTab(worksheet,tabData);break;case"Statistics Report":!function(worksheet,tabData){tabData&&tabData.length?(worksheet.addTable(getTableModel(tabData,worksheet,"statisticsReportTable")),addEmptyLine(worksheet)):addWorksheetWarning("No Statistics Report Data",worksheet)}(worksheet,tabData);break;case"Replace Sequence Summary Report":!function(worksheet,tabData){tabData&&tabData.length?(worksheet.addTable(getTableModel(tabData,worksheet,"sequenceSummaryTable")),addEmptyLine(worksheet)):addWorksheetWarning("No Sequence Summary Report Data",worksheet)}(worksheet,tabData);break;case"Error Details":!function(worksheet,tabData){tabData&&tabData.length?(worksheet.addTable(getTableModel(tabData,worksheet,"errorDetailsTable")),addEmptyLine(worksheet)):addWorksheetWarning("No Error Details Report Data",worksheet)}(worksheet,tabData)}};return{buildSummaryExcel:function(data){var workbook=new ExcelJS.Workbook;const srcEnv=data["Source Environment"]&&data["Source Environment"]["Source Environment Products"]||[],tarEnv=data["Target Environment"]&&data["Target Environment"]["Target Environment Products"]||[];var info;return delete data["Source Environment"],delete data["Target Environment"],info=data["General Info"][0],generalInfo=info,srcProducts=srcEnv,targetProducts=tarEnv,function(workbook,data){var taskType=generalInfo.task_type.toLowerCase();Object.keys(data).forEach((function(tabName){var worksheet=workbook.addWorksheet(tabName),tabData=data[tabName];"extract"===taskType?buildExtractTab(tabName,tabData||{},worksheet):buildLoadTab(tabName,tabData||{},worksheet),(worksheet=>{if(worksheet.columns)for(let i=0;i<worksheet.columns.length;i+=1){let dataMax=0;const column=worksheet.columns[i];for(let j=1;column.values[j]&&j<column.values.length;j+=1){const columnLength=column.values[j].length;columnLength>dataMax&&(dataMax=columnLength)}column.width=dataMax<10?20:dataMax+20}})(worksheet)}))}(workbook,data),workbook}}}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
