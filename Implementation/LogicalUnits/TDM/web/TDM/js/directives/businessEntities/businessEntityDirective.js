function businessEntityDirective(){return{restrict:"E",templateUrl:"views/businessEntities/businessEntity.html",scope:{content:"="},controller:function($scope,TDMService,BreadCrumbsService,SweetAlert,$uibModal,toastr,$timeout,AuthService,DTColumnBuilder,DTOptionsBuilder,$q,$compile){var businessEntityCtrl=this;businessEntityCtrl.businessEntityData=$scope.content.businessEntity,businessEntityCtrl.disableChange="Inactive"==businessEntityCtrl.businessEntityData.be_status||!AuthService.authorizedToEdit(0),TDMService.getBEProductCount(businessEntityCtrl.businessEntityData.be_id).then((function(response){"SUCCESS"==response.errorCode?businessEntityCtrl.productCount=response.result:businessEntityCtrl.productCount=0})),businessEntityCtrl.saveChanges=function(){TDMService.updateBusinessEntity(businessEntityCtrl.businessEntityData.be_id,businessEntityCtrl.businessEntityData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Business Entity # "+businessEntityCtrl.businessEntityData.be_name,"Updated Successfully"),$timeout((function(){$scope.content.openBusinessEntities()}),400)):toastr.error("Business Entity # "+businessEntityCtrl.businessEntityData.be_name,"failed to Update : "+response.message)}))},businessEntityCtrl.deleteBusinessEntity=function(){businessEntityCtrl.productCount>0?SweetAlert.swal({title:"Business Entity "+businessEntityCtrl.businessEntityData.be_name+" will be removed from related products. Active tasks which associated to  "+businessEntityCtrl.businessEntityData.be_name+" will be set to Inactive. Are you sure to want to delete the BE?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"No",cancelButtonText:"Yes",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){isConfirm||TDMService.deleteBusinessEntity(businessEntityCtrl.businessEntityData.be_id).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Business Entity # "+businessEntityCtrl.businessEntityData.be_name,"deleted Successfully"),$timeout((function(){$scope.content.openBusinessEntities()}),400)):toastr.error("Business Entity # "+businessEntityCtrl.businessEntityData.be_name,"failed to delete")}))})):TDMService.deleteBusinessEntity(businessEntityCtrl.businessEntityData.be_id).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Business Entity # "+businessEntityCtrl.businessEntityData.be_name,"deleted Successfully"),$timeout((function(){$scope.content.openBusinessEntities()}),400)):toastr.error("Business Entity # "+businessEntityCtrl.businessEntityData.be_name,"failed to delete")}))},businessEntityCtrl.addLogicalUnit=function(){$uibModal.open({template:'<new-logical-units-directive data="logicalUnitCtrl.data" logical-units="logicalUnitCtrl.logicalUnits"></new-logical-units-directive>',size:"modal-lg",windowClass:"LogicalUnitWindow",resolve:{beId:businessEntityCtrl.businessEntityData.be_id,beName:function(){return businessEntityCtrl.businessEntityData.be_name}},controller:function($scope,$uibModalInstance,TDMService,beId,beName){this.logicalUnits=businessEntityCtrl.logicalUnitsData,this.beId=beId,this.beName=beName,this.close=function(){$uibModalInstance.close()},this.data={close:this.close,beId:beId,beName:beName,reloadData:function(){businessEntityCtrl.dtInstance.reloadData((function(data){}),!0)}}},controllerAs:"logicalUnitCtrl"})},businessEntityCtrl.PostExecutionProcessActions=function(add,index){$uibModal.open({template:'<post-execution-process data="data" post-execution-process="postExecutionData"></post-execution-process>',size:"modal-lg",windowClass:"LogicalUnitWindow",resolve:{beId:businessEntityCtrl.businessEntityData.be_id,beName:function(){return businessEntityCtrl.businessEntityData.be_name},postExecutionData:function(){return add?null:businessEntityCtrl.postExecutionData[index]}},controller:function($scope,$uibModalInstance,beId,beName,postExecutionData){$scope.beId=beId,$scope.beName=beName,$scope.postExecutionData=postExecutionData,$scope.close=function(){$uibModalInstance.close()},$scope.data={close:$scope.close,beId:beId,beName:beName,postExecutionData:businessEntityCtrl.postExecutionData,reloadData:function(){businessEntityCtrl.dtInstancePE.reloadData((function(data){}),!0)}}}})},businessEntityCtrl.updateLogicalUnit=function(index){$uibModal.open({template:'<update-logical-units-directive data="logicalUnitCtrl.data" logical-units="logicalUnitCtrl.logicalUnits" logical-unit-index="logicalUnitCtrl.logicalUnitIndex"></update-logical-units-directive>',size:"modal-lg",resolve:{beId:businessEntityCtrl.businessEntityData.be_id,beName:function(){return businessEntityCtrl.businessEntityData.be_name}},controller:function($scope,$uibModalInstance,TDMService,beId,beName){this.logicalUnits=businessEntityCtrl.logicalUnitsData,this.logicalUnitIndex=index,this.close=function(){$uibModalInstance.close()},this.data={close:this.close,reloadData:function(){businessEntityCtrl.dtInstance.reloadData((function(data){}),!0)}}},controllerAs:"logicalUnitCtrl"})},businessEntityCtrl.removeLogicalUnitErrorMessage=function(index){toastr.error("LU appears as Parent LU – can’t be removed")},businessEntityCtrl.removeLogicalUnit=function(index){TDMService.getLogicalUnits().then((function(response){var luToRemove=businessEntityCtrl.logicalUnitsData[index];if("SUCCESS"==response.errorCode){var childLU=_.find(response.result,{lu_parent_id:luToRemove.lu_id});childLU||(childLU=_.find(businessEntityCtrl.logicalUnitsData,{lu_parent_id:luToRemove.lu_id})),childLU?toastr.error("Logical Unit "+businessEntityCtrl.logicalUnitsData[index].lu_name+" is a parent for lu "+childLU.lu_name):TDMService.deleteLogicalUnit(businessEntityCtrl.businessEntityData.be_id,businessEntityCtrl.businessEntityData.be_name,luToRemove.lu_id,luToRemove.lu_name).then((function(response){"SUCCESS"==response.errorCode?(businessEntityCtrl.logicalUnitsData.splice(index,1),businessEntityCtrl.dtInstance.reloadData((function(data){}),!0),0==businessEntityCtrl.logicalUnitsData.length&&TDMService.deleteTaskForBE(businessEntityCtrl.businessEntityData.be_id).then((function(response){}))):toastr.error("Logical Unit "+businessEntityCtrl.logicalUnitsData[index].lu_name,"Failed to delete : "+response.message)}))}else toastr.error("Failed to delete logical Unit  "+luToRemove.lu_name)}))},businessEntityCtrl.loadingTable=!0,TDMService.getBELogicalUnits(businessEntityCtrl.businessEntityData.be_id).then((function(response){if("SUCCESS"==response.errorCode){if(businessEntityCtrl.logicalUnitsData=response.result,"SUCCESS"!=response.errorCode)return;businessEntityCtrl.dtInstance={},businessEntityCtrl.dtColumns=[],businessEntityCtrl.dtColumnDefs=[],businessEntityCtrl.headers=[{column:"lu_name",name:"Name"},{column:"lu_description",name:"Description"},{column:"lu_parent_name",name:"Parent LU"},{column:"product_name",name:"System Name",clickAble:!1}],businessEntityCtrl.disableChange||businessEntityCtrl.headers.unshift({column:"actions",name:""});for(var actionsColumn=function(data,type,full,meta){return'<div style="display: flex;justify-content: space-around;max-width: 100px;"><div ><img src="icons/edit.svg" uib-tooltip="Edit Logical Unit" tooltip-placement="right" tooltip-append-to-body="true"role-handler="" role="0" ng-if="!businessEntityCtrl.disableChange" ng-click="businessEntityCtrl.updateLogicalUnit('+meta.row+')"></div><div><img src="icons/delete-icon.svg" ng-show="!(businessEntityCtrl.logicalUnitsData | checkIfLogicalUnitIsParent:'+meta.row+')" uib-tooltip="Delete Logical Unit" tooltip-placement="right" tooltip-append-to-body="true"ng-click="businessEntityCtrl.removeLogicalUnitErrorMessage('+meta.row+')"role-handler="" role="0" ng-if="!businessEntityCtrl.disableChange" ></img><img  src="icons/delete-icon.svg" ng-show="businessEntityCtrl.logicalUnitsData | checkIfLogicalUnitIsParent:'+meta.row+'" uib-tooltip="Delete Logical Unit" tooltip-placement="right" tooltip-append-to-body="true"mwl-confirm message="{{businessEntityCtrl.logicalUnitsData['+meta.row+"].product_id == '-1' ? ' LU must be linked to a BE to enable its execution using the TDM GUI. Are you sure you want to delete this LU?' : 'Logical unit "+businessEntityCtrl.logicalUnitsData[meta.row].lu_name+" will be removed from related products. Active tasks which associated to "+businessEntityCtrl.logicalUnitsData[meta.row].lu_name+' may be set to Inactive. Are you sure you want to delete the this LU?\'}}" confirm-text="Yes <i class=\'glyphicon glyphicon-ok\'</i>" cancel-text="No <i class=\'glyphicon glyphicon-remove\'></i>"  placement="right"  tooltip-append-to-body="true" on-confirm="businessEntityCtrl.removeLogicalUnit('+meta.row+')" on-cancel="cancelClicked = true" confirm-button-type="danger" cancel-button-type="default"role-handler="" role="0" ng-if="!businessEntityCtrl.disableChange" ></img></div></div>'},i=0;i<businessEntityCtrl.headers.length;i++)"actions"==businessEntityCtrl.headers[i].column?businessEntityCtrl.dtColumns.push(DTColumnBuilder.newColumn(businessEntityCtrl.headers[i].column).withTitle(businessEntityCtrl.headers[i].name).renderWith(actionsColumn)):businessEntityCtrl.dtColumns.push(DTColumnBuilder.newColumn(businessEntityCtrl.headers[i].column).withTitle(businessEntityCtrl.headers[i].name));businessEntityCtrl.getTableData=function(){var deferred=$q.defer();return deferred.resolve(businessEntityCtrl.logicalUnitsData),deferred.promise},businessEntityCtrl.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return businessEntityCtrl.getTableData()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),businessEntityCtrl.logicalUnitsData&&businessEntityCtrl.logicalUnitsData.length>0&&businessEntityCtrl.dtOptions.withLightColumnFilter({1:{type:"text"},2:{type:"text"},3:{type:"select",values:_.map(_.filter(_.unique(_.map(businessEntityCtrl.logicalUnitsData,"lu_parent_name")),(function(el2){return!(!el2||null==el2||""==el2)})),(function(el){return{value:el,label:el}}))},4:{type:"select",values:_.map(_.filter(_.unique(_.map(businessEntityCtrl.logicalUnitsData,"product_name")),(function(el2){return!(!el2||null==el2||""==el2)})),(function(el){return{value:el,label:el}}))},5:{type:"select",values:_.map(_.filter(_.unique(_.map(businessEntityCtrl.logicalUnitsData,"lu_dc_name")),(function(el2){return!(!el2||null==el2||""==el2)})),(function(el){return{value:el,label:el}}))}}),businessEntityCtrl.dtInstanceCallback=function(dtInstance){angular.isFunction(businessEntityCtrl.dtInstance)?businessEntityCtrl.dtInstance(dtInstance):angular.isDefined(businessEntityCtrl.dtInstance)&&(businessEntityCtrl.dtInstance=dtInstance)},null!=businessEntityCtrl.dtInstance.changeData&&businessEntityCtrl.dtInstance.changeData(businessEntityCtrl.getTableData()),$timeout(()=>{businessEntityCtrl.loadingTable=!1})}else toastr.error("Business entity # "+businessEntityCtrl.businessEntityData.be_name,"Failed to get Logical Units")})),businessEntityCtrl.removePostExecutionProcess=function(index){var postExecutionProcessToRemove=businessEntityCtrl.postExecutionData[index];TDMService.deleteExecutionProcess(businessEntityCtrl.businessEntityData.be_id,businessEntityCtrl.businessEntityData.be_name,postExecutionProcessToRemove.process_id,postExecutionProcessToRemove.process_name).then((function(response){"SUCCESS"==response.errorCode?(businessEntityCtrl.postExecutionData.splice(index,1),businessEntityCtrl.dtInstancePE.reloadData((function(data){}),!0)):toastr.error("Post Execution Process "+businessEntityCtrl.postExecutionData[index].process_name,"Failed to delete : "+response.message)}))},businessEntityCtrl.loadingTablePE=!0,TDMService.getBEPostExecutionProcess(businessEntityCtrl.businessEntityData.be_id).then((function(response){if("SUCCESS"==response.errorCode){if(businessEntityCtrl.postExecutionData=response.result,"SUCCESS"!=response.errorCode)return;businessEntityCtrl.dtInstancePE={},businessEntityCtrl.dtColumnsPE=[],businessEntityCtrl.dtColumnDefsPE=[],businessEntityCtrl.headersPE=[{column:"process_name",name:"Process Name"},{column:"execution_order",name:"Execution Order"},{column:"process_description",name:"Description"}],businessEntityCtrl.disableChange||businessEntityCtrl.headersPE.unshift({column:"actions",name:""});for(var actionsColumnPE=function(data,type,full,meta){return'<div style="display: flex;justify-content: space-around;max-width: 100px;"><div><img src="icons/edit.svg" alt="edit" uib-tooltip="Edit Post Execution Process" tooltip-placement="top" tooltip-append-to-body="true" role-handler="" role="0" ng-if="!businessEntityCtrl.disableChange" ng-click="businessEntityCtrl.PostExecutionProcessActions(false, '+meta.row+')"></div><div><img src="icons/delete-icon.svg" uib-tooltip="Delete Entity Group Query" tooltip-placement="top" tooltip-append-to-body="true"mwl-confirm message="Process name '+businessEntityCtrl.postExecutionData[meta.row].process_name+" will be removed from the Business Entity. Active tasks which associated to "+businessEntityCtrl.postExecutionData[meta.row].process_name+' will be set to Inactive. Are you sure that you want to delete this process?" confirm-text="Yes <i class=\'glyphicon glyphicon-ok\'</i>" cancel-text="No <i class=\'glyphicon glyphicon-remove\'></i>"  placement="right" on-confirm="businessEntityCtrl.removePostExecutionProcess('+meta.row+')" on-cancel="cancelClicked = true" confirm-button-type="danger" cancel-button-type="default"role-handler="" role="0" ng-if="!businessEntityCtrl.disableChange"></img><div></div>'},i=0;i<businessEntityCtrl.headersPE.length;i++)"actions"==businessEntityCtrl.headersPE[i].column?businessEntityCtrl.dtColumnsPE.push(DTColumnBuilder.newColumn(businessEntityCtrl.headersPE[i].column).withTitle(businessEntityCtrl.headersPE[i].name).renderWith(actionsColumnPE)):businessEntityCtrl.dtColumnsPE.push(DTColumnBuilder.newColumn(businessEntityCtrl.headersPE[i].column).withTitle(businessEntityCtrl.headersPE[i].name));businessEntityCtrl.getTableDataPE=function(){var deferred=$q.defer();return deferred.resolve(businessEntityCtrl.postExecutionData),deferred.promise},businessEntityCtrl.dtOptionsPE=DTOptionsBuilder.fromFnPromise((function(){return businessEntityCtrl.getTableDataPE()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),businessEntityCtrl.postExecutionData&&businessEntityCtrl.postExecutionData.length>0&&businessEntityCtrl.dtOptionsPE.withLightColumnFilter({1:{type:"text"},2:{type:"text"},3:{type:"text"}}),businessEntityCtrl.dtInstanceCallbackPE=function(dtInstance){angular.isFunction(businessEntityCtrl.dtInstancePE)?businessEntityCtrl.dtInstancePE(dtInstance):angular.isDefined(businessEntityCtrl.dtInstancePE)&&(businessEntityCtrl.dtInstancePE=dtInstance)},null!=businessEntityCtrl.dtInstancePE.changeData&&businessEntityCtrl.dtInstancePE.changeData(businessEntityCtrl.getTableDataPE()),$timeout(()=>{businessEntityCtrl.loadingTablePE=!1})}else toastr.error("Business entity # "+businessEntityCtrl.businessEntityData.be_name,"Failed to get Entities Group Query")})),BreadCrumbsService.push({be_name:businessEntityCtrl.businessEntityData.be_name},"BUSINESS_ENTITY_BREADCRUMB",(function(){}))},controllerAs:"businessEntityCtrl"}}angular.module("TDM-FE").directive("businessEntityDirective",businessEntityDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
