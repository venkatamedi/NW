function reservedEntitiesTableDirective(){return{restrict:"E",templateUrl:"views/reservedEntities/reservedEntitiesTable.html",scope:{},controller:function($scope,$compile,TDMService,DTColumnBuilder,DTOptionsBuilder,$q,$element,$timeout,toastr,$uibModal,SweetAlert){var reservedEntitiesTableCtrl=this;reservedEntitiesTableCtrl.loadingTable=!0,reservedEntitiesTableCtrl.initTable=()=>{reservedEntitiesTableCtrl.dtInstance={},reservedEntitiesTableCtrl.dtColumns=[],reservedEntitiesTableCtrl.dtColumnDefs=[],reservedEntitiesTableCtrl.headers=[{column:"select_row",name:"",selectable:!0},{column:"target_entity_id",name:"Target Entity ID",clickAble:!1},{column:"environment_name",name:"Environment Name",clickAble:!1},{column:"task_title",name:"Task Name",clickAble:!1},{column:"task_execution_id",name:"Task Execution ID",clickAble:!1},{column:"be_name",name:"Business Entity",clickAble:!1},{column:"reserve_owner",name:"Reservation Owner",clickAble:!1},{column:"reserve_date",name:"Reservation Date",clickAble:!1,type:"date"},{column:"expiration_date",name:"Expiration Date",clickAble:!1,type:"date"},{column:"reserve_notes",name:"Notes",clickAble:!1}];for(var changeToLocalDate=function(data,type,full,meta){return data?moment(data,"YYYY-MM-DD HH:mm:ss.SSS").format("DD MMM YYYY, HH:mm"):""},reservedEntitiesSelection=function(data,type,full,meta){return full.allow_edit?`\n                    <div style="display: flex;justify-content: space-around;max-width: 100px;">\n                        <input ng-disabled="false" type="checkbox" ng-click="reservedEntitiesTableCtrl.checkAllSelection()"\n                          ng-model="reservedEntitiesTableCtrl.entitiesSelection[${full.target_entity_id}]"/>\n                    </div>\n                    `:""},i=0;i<reservedEntitiesTableCtrl.headers.length;i++)reservedEntitiesTableCtrl.headers[i].selectable?reservedEntitiesTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(reservedEntitiesTableCtrl.headers[i].column).withTitle(reservedEntitiesTableCtrl.headers[i].name).renderWith(reservedEntitiesSelection)):"date"==reservedEntitiesTableCtrl.headers[i].type?reservedEntitiesTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(reservedEntitiesTableCtrl.headers[i].column).withTitle(reservedEntitiesTableCtrl.headers[i].name).renderWith(changeToLocalDate)):reservedEntitiesTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(reservedEntitiesTableCtrl.headers[i].column).withTitle(reservedEntitiesTableCtrl.headers[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(reservedEntitiesTableCtrl.reservedEntitiesData),deferred.promise};reservedEntitiesTableCtrl.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("aaSorting",[[2,"asc"],[4,"desc"],[8,"desc"]]).withButtons([]).withOption("search",{caseInsensitive:!1}),reservedEntitiesTableCtrl.reservedEntitiesData&&reservedEntitiesTableCtrl.reservedEntitiesData.length>0&&reservedEntitiesTableCtrl.dtOptions.withLightColumnFilter({1:{type:"text"},2:{type:"select",values:_.map(_.unique(_.map(reservedEntitiesTableCtrl.reservedEntitiesData,"environment_name")),(function(el){return{value:el,label:el}}))},3:{type:"select",values:_.map(_.unique(_.map(reservedEntitiesTableCtrl.reservedEntitiesData,"task_name")),(function(el){return{value:el,label:el}}))},4:{type:"text"},5:{type:"select",values:_.map(_.unique(_.map(reservedEntitiesTableCtrl.reservedEntitiesData,"business_entity")),(function(el){return{value:el,label:el}}))},6:{type:"text"},7:{type:"text"},8:{type:"text"},9:{type:"text"}}),reservedEntitiesTableCtrl.dtInstanceCallback=function(dtInstance){angular.isFunction(reservedEntitiesTableCtrl.dtInstance)?reservedEntitiesTableCtrl.dtInstance(dtInstance):angular.isDefined(reservedEntitiesTableCtrl.dtInstance)&&(reservedEntitiesTableCtrl.dtInstance=dtInstance)},null!=reservedEntitiesTableCtrl.dtInstance.changeData&&reservedEntitiesTableCtrl.dtInstance.changeData(getTableData()),$timeout(()=>{reservedEntitiesTableCtrl.loadingTable=!1})},reservedEntitiesTableCtrl.all_selected=!1,reservedEntitiesTableCtrl.toggleAll=()=>{reservedEntitiesTableCtrl.reservedEntitiesData&&reservedEntitiesTableCtrl.reservedEntitiesData.forEach(reservedEntity=>{reservedEntity.allow_edit&&(reservedEntitiesTableCtrl.entitiesSelection[reservedEntity.target_entity_id]=reservedEntitiesTableCtrl.all_selected)})},reservedEntitiesTableCtrl.getData=entityId=>{TDMService.getReservedEntities(entityId).then(response=>{"SUCCESS"!=response.errorCode&&toastr.error(response.message),reservedEntitiesTableCtrl.all_selected=!1,reservedEntitiesTableCtrl.entitiesSelection={},reservedEntitiesTableCtrl.reservedEntitiesData=(response.result||[]).map(row=>(row.allow_edit&&(reservedEntitiesTableCtrl.entitiesSelection[row.target_entity_id]=!1),row.notes=row.notes||"",row)),reservedEntitiesTableCtrl.dtInstance?reservedEntitiesTableCtrl.dtInstance.reloadData((function(data){}),!0):reservedEntitiesTableCtrl.initTable()})},reservedEntitiesTableCtrl.getData(),reservedEntitiesTableCtrl.deletePermisionGroup=fabric_role=>{console.log("delete permission group,"+fabric_role),TDMService.deleteRoleFromPermissionGroup(fabric_role).then(response=>{if("SUCCESS"==response.errorCode){const index=_.findIndex(reservedEntitiesTableCtrl.reservedEntitiesData,{fabric_role:fabric_role});index>=0&&(reservedEntitiesTableCtrl.reservedEntitiesData.splice(index,1),reservedEntitiesTableCtrl.dtInstance.reloadData((function(data){}),!0))}else toastr.error(`Unable to remove Role ${fabric_role}, err=[${response.message}]`)})},reservedEntitiesTableCtrl.getDataForSave=()=>{const result=[],visibleRows=reservedEntitiesTableCtrl.dtInstance.DataTable.rows({filter:"applied"}).data();for(let i=0;i<visibleRows.length;i++)reservedEntitiesTableCtrl.entitiesSelection[visibleRows[i].target_entity_id]&&result.push({environment_name:visibleRows[i].environment_name,be_name:visibleRows[i].be_name,target_entity_id:visibleRows[i].target_entity_id});return result},reservedEntitiesTableCtrl.releaseEntities=()=>{const result=reservedEntitiesTableCtrl.getDataForSave();0!==result.length&&SweetAlert.swal({title:"Are you sure you want to release these entities?",text:"the entites will be deleted from the reserved entity list",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Cancel",cancelButtonText:"Release",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){isConfirm||TDMService.releaseEntities({listOfEntities:result}).then(response=>{"SUCCESS"==response.errorCode?(reservedEntitiesTableCtrl.getData(),response.message&&toastr.warning(response.message)):toastr.error(response.message)})}))},reservedEntitiesTableCtrl.extendReservationPeriod=()=>{const result=reservedEntitiesTableCtrl.getDataForSave();0!==result.length&&$uibModal.open({templateUrl:"views/reservedEntities/extendReservationPeriod.html",resolve:{selectedData:()=>result},controller:function($scope,$uibModalInstance,selectedData){var extendReservationPeriodCtrl=this;extendReservationPeriodCtrl.minDate=moment(new Date),extendReservationPeriodCtrl.close=function(){$uibModalInstance.close()},extendReservationPeriodCtrl.extend=()=>{let newEndDate=null;extendReservationPeriodCtrl.endBy&&(newEndDate=extendReservationPeriodCtrl.endBy.format("YYYYMMDD")+"235900"),TDMService.extendReservedEntities({newEndDate:newEndDate,listOfEntities:selectedData}).then(response=>{"SUCCESS"==response.errorCode?(response.message&&toastr.warning(response.message),$uibModalInstance.close(!0)):toastr.error(response.message)})}},controllerAs:"extendReservationPeriodCtrl"}).result.then((function(result){result&&reservedEntitiesTableCtrl.getData()}))},reservedEntitiesTableCtrl.addNote=()=>{const result=reservedEntitiesTableCtrl.getDataForSave();0!==result.length&&$uibModal.open({templateUrl:"views/reservedEntities/addNote.html",resolve:{selectedData:()=>result},controller:function($scope,$uibModalInstance,selectedData){var addNoteCtrl=this;addNoteCtrl.close=function(){$uibModalInstance.close()},addNoteCtrl.addNote=()=>{TDMService.addNote({newNote:addNoteCtrl.note,listOfEntities:selectedData}).then(response=>{"SUCCESS"==response.errorCode?(response.message&&toastr.warning(response.message),$uibModalInstance.close(!0)):toastr.error(response.message)})}},controllerAs:"addNoteCtrl"}).result.then((function(result){result&&reservedEntitiesTableCtrl.getData()}))},reservedEntitiesTableCtrl.isAllSelected=()=>{const data=reservedEntitiesTableCtrl.entitiesSelection;if(!data)return!1;const keys=Object.keys(data);for(let i=0;i<keys.length;i++)if(!data[keys[i]])return!1;return!0},reservedEntitiesTableCtrl.checkAllSelection=()=>{$timeout(()=>{reservedEntitiesTableCtrl.isAllSelected()?reservedEntitiesTableCtrl.all_selected=!0:reservedEntitiesTableCtrl.all_selected=!1},100)},reservedEntitiesTableCtrl.isSelected=()=>{const data=reservedEntitiesTableCtrl.entitiesSelection;if(!data)return!1;const keys=Object.keys(data);for(let i=0;i<keys.length;i++)if(data[keys[i]])return!0;return!1},reservedEntitiesTableCtrl.toggleActivitiesMenu=()=>{reservedEntitiesTableCtrl.isSelected()&&(reservedEntitiesTableCtrl.activtiesView=!reservedEntitiesTableCtrl.activtiesView)},reservedEntitiesTableCtrl.searchText="",$element.on("search.dt",(function(e,api){reservedEntitiesTableCtrl.searchText!=api.oPreviousSearch.sSearch&&(reservedEntitiesTableCtrl.searchText=api.oPreviousSearch.sSearch,reservedEntitiesTableCtrl.searchTimeout&&$timeout.cancel(reservedEntitiesTableCtrl.searchTimeout),reservedEntitiesTableCtrl.searchTimeout=$timeout((function(){reservedEntitiesTableCtrl.getData(reservedEntitiesTableCtrl.searchText)}),1e3))}))},controllerAs:"reservedEntitiesTableCtrl"}}angular.module("TDM-FE").directive("reservedEntitiesTableDirective",reservedEntitiesTableDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
