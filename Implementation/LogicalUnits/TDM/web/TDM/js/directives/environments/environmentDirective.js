function environmentDirective(){return{restrict:"E",templateUrl:"views/environments/environment.html",scope:{content:"="},controller:function($scope,TDMService,BreadCrumbsService,toastr,SweetAlert,$timeout,AuthService,DTColumnBuilder,DTOptionsBuilder,$q,$compile,$uibModal,$http){this._scope=$scope;var environmentCtrl=this;environmentCtrl.environmentData=$scope.content.environmentData,environmentCtrl.environmentDataOrig=angular.copy(environmentCtrl.environmentData),environmentCtrl.pageDisplay="environment",environmentCtrl.envTypes=["Both","Source","Target"],TDMService.getFabricRoles("owner").then(response=>{environmentCtrl.ownerFabricRoles=response.result||[]}),environmentCtrl.syncModes=[{text:"Do not Sync",value:"OFF"},{text:"Always Sync",value:"FORCE"}],environmentCtrl.addOwner=function(newOwner){newOwner&&(environmentCtrl.environmentData.owners||(environmentCtrl.environmentData.owners=[]),_.findIndex(environmentCtrl.environmentData.owners,{user_id:newOwner})>=0?environmentCtrl.addOwnerError=!0:(environmentCtrl.environmentData.owners.push({displayName:newOwner,uid:newOwner,user_id:newOwner,username:newOwner}),environmentCtrl.allOwners.push({displayName:newOwner,uid:newOwner,user_id:newOwner,username:newOwner}),environmentCtrl.isOpen=!1))},environmentCtrl.addTester=function(newTester,allTesters){newTester&&(environmentCtrl.testers||(environmentCtrl.testers=[]),_.findIndex(environmentCtrl.testers,{user_id:newTester})>=0?environmentCtrl.addNewTesterError=!0:(allTesters.push({displayName:newTester,uid:newTester,user_id:newTester,username:newTester}),environmentCtrl.testers.push({displayName:newTester,uid:newTester,user_id:newTester,username:newTester}),environmentCtrl.isOpen1=!1))},environmentCtrl.initAddNewOwnerPopup=function(){environmentCtrl.isOpen=!environmentCtrl.isOpen},environmentCtrl.initAddNewTesterPopup=function(){environmentCtrl.isOpen1=!environmentCtrl.isOpen1},environmentCtrl.closeAddTesterModal=()=>{environmentCtrl.isOpen1=!1},environmentCtrl.closeAddOwnerModal=()=>{environmentCtrl.isOpen=!1},environmentCtrl.saveUsersAndGroupsTester=(user,userCustom,userGroup,allUsers)=>{if(allUsers&&_.findIndex(environmentCtrl.testers,{user_id:"-1"})<0){const allUsersObj=_.find(environmentCtrl.allTesters,{user_id:"-1"});allUsersObj&&environmentCtrl.testers.push(allUsersObj)}else if(!allUsers&&_.findIndex(environmentCtrl.testers,{user_id:"-1"})>=0){const allUsersIndex=_.findIndex(environmentCtrl.testers,{user_id:"-1"});environmentCtrl.testers.splice(allUsersIndex,1)}if(user){const newUser=angular.copy(user);newUser.user_type="ID",environmentCtrl.testers.push(newUser)}userCustom&&(environmentCtrl.testers.push({user_id:userCustom,user_name:userCustom,username:userCustom,user_type:"ID"}),"newRole"===environmentCtrl.activityPanel?environmentCtrl.allTesters.push({user_id:userCustom,user_name:userCustom,username:userCustom,user_type:"ID"}):environmentCtrl.allTestersRole.push({user_id:userCustom,user_name:userCustom,username:userCustom,user_type:"ID"})),userGroup&&(environmentCtrl.testers.push({user_id:userGroup,user_name:userGroup,username:userGroup,user_type:"GROUP",group:!0}),"newRole"===environmentCtrl.activityPanel?environmentCtrl.allTesters.push({user_id:userGroup,user_name:userGroup,username:userGroup,user_type:"GROUP",group:!0}):environmentCtrl.allTestersRole.push({user_id:userGroup,user_name:userGroup,username:userGroup,user_type:"GROUP",group:!0})),environmentCtrl.allTesters=_.unique(environmentCtrl.allTesters,tester=>`${tester.user_id}_${tester.user_type}`),environmentCtrl.allTestersRole=_.unique(environmentCtrl.allTestersRole,tester=>`${tester.user_id}_${tester.user_type}`),environmentCtrl.isOpen1=!1},environmentCtrl.saveUsersAndGroups=(user,userCustom,userGroup)=>{if(user){const newUser=angular.copy(user);newUser.user_type="ID",environmentCtrl.environmentData.owners.push(newUser)}userCustom&&(environmentCtrl.environmentData.owners.push({user_id:userCustom,user_name:userCustom,username:userCustom,user_type:"ID"}),environmentCtrl.allOwners.push({user_id:userCustom,user_name:userCustom,username:userCustom,user_type:"ID"})),userGroup&&(environmentCtrl.environmentData.owners.push({user_id:userGroup,user_name:userGroup,username:userGroup,user_type:"GROUP",group:!0}),environmentCtrl.allOwners.push({user_id:userGroup,user_name:userGroup,username:userGroup,user_type:"GROUP",group:!0})),environmentCtrl.allOwners=_.unique(environmentCtrl.allOwners,owner=>`${owner.user_id}_${owner.user_type}`),environmentCtrl.isOpen=!1},!environmentCtrl.environmentData.allow_write&&environmentCtrl.environmentData.allow_read?environmentCtrl.envType="Source":environmentCtrl.environmentData.allow_write&&!environmentCtrl.environmentData.allow_read?environmentCtrl.envType="Target":environmentCtrl.environmentData.allow_write&&environmentCtrl.environmentData.allow_read&&(environmentCtrl.envType="Both"),"ON"===environmentCtrl.environmentData.sync_mode&&(environmentCtrl.environmentData.sync_mode=null),environmentCtrl.isFluxMode=AuthService.isFluxMode();var userRole=AuthService.getRole();environmentCtrl.showEnvironment=!0,environmentCtrl.disableOwnersChange="Inactive"==environmentCtrl.environmentData.environment_status||!AuthService.authorizedToEdit(0),environmentCtrl.envTypeChanged=function(){environmentCtrl.envType&&("target"==environmentCtrl.envType.toLowerCase()?(environmentCtrl.environmentData.allow_write=!0,environmentCtrl.environmentData.allow_read=!1):"source"==environmentCtrl.envType.toLowerCase()?(environmentCtrl.environmentData.allow_write=!1,environmentCtrl.environmentData.allow_read=!0):"both"==environmentCtrl.envType.toLowerCase()&&(environmentCtrl.environmentData.allow_write=!0,environmentCtrl.environmentData.allow_read=!0))},TDMService.getGenericAPI("wsGetAllEnvs").then((function(response){environmentCtrl.availableSourceEnvironments=_.filter(response.result,(function(env){return env==environmentCtrl.environmentData.environment_name||!(_.findIndex($scope.content.environments,{environment_name:env,environment_status:"Active"})>=0)})),environmentCtrl.environmentData.environment_name&&""!=environmentCtrl.environmentData.environment_name&&environmentCtrl.availableSourceEnvironments.indexOf(environmentCtrl.environmentData.environment_name)<0&&toastr.error("TDM environment "+environmentCtrl.environmentData.environment_name+" is no longer valid","Please update your Environment")})).catch((function(err){toastr.error("Environment","Unable to get available Source Environment")})),environmentCtrl.tabClicked=function(newTab){return environmentCtrl.roleForm?environmentCtrl.roleForm.$dirty&&environmentCtrl.askToSaveChanges("Role",newTab):environmentCtrl.productForm?environmentCtrl.productForm.$dirty&&environmentCtrl.askToSaveChanges("Product",newTab):environmentCtrl.globalForm&&environmentCtrl.globalForm.$dirty&&environmentCtrl.askToSaveChanges("Global",newTab),environmentCtrl.activityPanel="Summary",newTab},environmentCtrl.askToSaveChanges=function(form,newTab){swal({title:"You have unsaved changes.",text:"Do you want to save changes before close?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"No",cancelButtonText:"Yes",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){if(isConfirm)swal("Discard!","Your changes have not been saved!","error");else{switch(form){case"Role":environmentCtrl.saveRoleChanges();break;case"Product":environmentCtrl.saveProductChanges();break;case"Global":environmentCtrl.saveGlobalChanges()}swal("Saved!","Your changes have been saved.","success")}environmentCtrl.activityPanel="Summary",environmentCtrl.newTab=newTab}))},environmentCtrl.barOptions={scaleBeginAtZero:!0,scaleShowGridLines:!0,scaleGridLineColor:"rgba(0,0,0,.05)",scaleGridLineWidth:1,barShowStroke:!1,barStrokeWidth:0},environmentCtrl.getSummaryData=function($scope){environmentCtrl.loadingSummary=!0,TDMService.getEnvironmentSummary(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.summaryData=response.result,environmentCtrl.summaryData.numberOfALLTesters.value=parseInt(environmentCtrl.summaryData.numberOfALLTesters.value),environmentCtrl.summaryData.tasks.active=parseInt(environmentCtrl.summaryData.tasks.active),environmentCtrl.summaryData.tasks.onHold=parseInt(environmentCtrl.summaryData.tasks.onhold),null!=environmentCtrl.summaryData.processedEntities.processedentities?environmentCtrl.summaryData.processedEntities.processedentities=parseInt(environmentCtrl.summaryData.processedEntities.processedentities):environmentCtrl.summaryData.processedEntities.processedentities=0,environmentCtrl.taskExecutionsBarData={labels:["Failed","Pending","Paused","Stopped","Running","Completed"],datasets:[{label:"Exection status",fillColor:"rgba(26,179,148,0.5)",strokeColor:"rgba(26,179,148,0.8)",highlightFill:"rgba(26,179,148,0.75)",highlightStroke:"rgba(26,179,148,1)",data:[environmentCtrl.summaryData.taskExecutionStatus.failed,environmentCtrl.summaryData.taskExecutionStatus.pending,environmentCtrl.summaryData.taskExecutionStatus.paused,environmentCtrl.summaryData.taskExecutionStatus.stopped,environmentCtrl.summaryData.taskExecutionStatus.running,environmentCtrl.summaryData.taskExecutionStatus.completed]}]},environmentCtrl.loadingSummary=!1,environmentCtrl.activityPanel="Summary"):(environmentCtrl.loadingSummary=!1,environmentCtrl.activityPanel="Summary")}))},environmentCtrl.getSummaryData(),TDMService.getEnvTaskCount(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?environmentCtrl.tasksCount=response.result:environmentCtrl.tasksCount=!0})),TDMService.getDataCenters().then((function(response){"SUCCESS"==response.errorCode?environmentCtrl.dataCenters=_.unique(response.result,"dc"):toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"failed to get data centers")})),TDMService.getEnvironmentOwners(environmentCtrl.environmentData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){if(environmentCtrl.environmentData.owners=response.result,TDMService.getFabricRoles("tester").then(response=>{environmentCtrl.testerFabricRoles=(response.result||[]).concat(environmentCtrl.ownerFabricRoles.filter(owner=>_.findIndex(environmentCtrl.environmentData.owners,{user_id:owner,user_type:"GROUP"})<0))}),"admin"==userRole.type)environmentCtrl.environmentData.isOwner=!0;else{var ownerFound=_.find(response.result,{user_id:AuthService.getUserId()});if(!ownerFound)for(let i=0;i<environmentCtrl.ownerFabricRoles.length;i++){const fabricRole=environmentCtrl.ownerFabricRoles[i];if(ownerFound=_.find(response.result,{user_id:fabricRole,user_type:"GROUP"}))break}environmentCtrl.environmentData.isOwner=!!ownerFound}environmentCtrl.disableChange="Inactive"===environmentCtrl.environmentData.environment_status||!environmentCtrl.environmentData.isOwner}else toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to get owners : "+response.message),environmentCtrl.environmentData.owners=[];TDMService.getUsersByPermssionGroups("owner").then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.allOwners=_.map(response.result,item=>(item.user_type||(item.user_type="ID"),item)),environmentCtrl.environmentData.owners.forEach(owner=>{_.findIndex(environmentCtrl.allOwners,{user_id:owner.user_id})<0&&environmentCtrl.allOwners.push({user_type:owner.user_type,displayName:owner.user_id,uid:owner.user_id,user_id:owner.user_id,username:owner.user_id})})):(toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to get owners: "+response.message),environmentCtrl.allOwners=[])}))})),environmentCtrl.saveChanges=function(){TDMService.updateEnvironment(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Environment # "+environmentCtrl.environmentData.environment_name,"Updated Successfully"),$scope.content.openEnvironments()):toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to Update : "+response.message)}))},environmentCtrl.deleteEnvironment=function(){1==environmentCtrl.tasksCount?SweetAlert.swal({title:"Environment will be deleted from all releated tasks. Are you sure?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"No",cancelButtonText:"Yes",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){isConfirm||TDMService.deleteEnvironment(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Environment # "+environmentCtrl.environmentData.environment_name,"deleted Successfully"),$timeout((function(){$scope.content.openEnvironments()}),400)):toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to delete")}))})):TDMService.deleteEnvironment(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Environment # "+environmentCtrl.environmentData.environment_name,"deleted Successfully"),$timeout((function(){$scope.content.openEnvironments()}),400)):toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to delete")}))},BreadCrumbsService.breadCrumbChange(1),BreadCrumbsService.push({environmentID:environmentCtrl.environmentData.environment_name},"ENVIRONMENT_BREADCRUMB",(function(){$scope.content.openEnvironment(environmentCtrl.environmentData)})),environmentCtrl.openRolesManagement=function(){$scope.content.openRoles(environmentCtrl.environmentData)},environmentCtrl.openProducts=function(){$scope.content.openProducts(environmentCtrl.environmentData)},environmentCtrl.loadingTableRoles=!0,TDMService.getEnvironmentRoles(environmentCtrl.environmentData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){environmentCtrl.roles=_.sortBy(response.result,(function(value){return new Date(value.role_creation_date)})),environmentCtrl.roles.reverse(),environmentCtrl.dtInstanceRoles={},environmentCtrl.dtColumnsRoles=[],environmentCtrl.dtColumnDefsRoles=[],environmentCtrl.headersRoles=[{column:"role_name",name:"Name",clickAble:!0},{column:"role_description",name:"Description",clickAble:!1},{column:"role_creation_date",name:"Creation Date",clickAble:!1,type:"date"},{column:"role_created_by",name:"Created By",clickAble:!1},{column:"role_last_updated_date",name:"Last Update Date",clickAble:!1,type:"date"},{column:"role_last_updated_by",name:"Updated By",clickAble:!1},{column:"role_status",name:"Status",clickAble:!1}];for(var clickAbleColumn=function(data,type,full,meta){return'<a ng-click="environmentCtrl.openRole('+meta.row+')">'+data+"</a>"},changeToLocalDate=function(data,type,full,meta){return moment(data).format("D MMM YYYY, HH:mm")},i=0;i<environmentCtrl.headersRoles.length;i++)1==environmentCtrl.headersRoles[i].clickAble?environmentCtrl.dtColumnsRoles.push(DTColumnBuilder.newColumn(environmentCtrl.headersRoles[i].column).withTitle(environmentCtrl.headersRoles[i].name).renderWith(clickAbleColumn)):"date"==environmentCtrl.headersRoles[i].type?environmentCtrl.dtColumnsRoles.push(DTColumnBuilder.newColumn(environmentCtrl.headersRoles[i].column).withTitle(environmentCtrl.headersRoles[i].name).renderWith(changeToLocalDate)):environmentCtrl.dtColumnsRoles.push(DTColumnBuilder.newColumn(environmentCtrl.headersRoles[i].column).withTitle(environmentCtrl.headersRoles[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(environmentCtrl.roles),deferred.promise};environmentCtrl.dtOptionsRoles=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("aaSorting",[6,"asc"]).withOption("lengthChange",!1).withOption("paging",!1).withOption("searching",!0).withOption("info",!1).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),environmentCtrl.dtOptionsRoles.withLightColumnFilter({0:{type:"text"},1:{type:"text"},2:{type:"text"},3:{type:"select",values:_.map(_.unique(_.map(environmentCtrl.roles,"role_created_by")),(function(el){return{value:el,label:el}}))},4:{type:"text"},5:{type:"select",values:_.map(_.unique(_.map(environmentCtrl.roles,"role_last_updated_by")),(function(el){return{value:el,label:el}}))},6:{type:"select",defaultValue:"Active",values:[{value:"Inactive",label:"Inactive"},{value:"Active",label:"Active"}]}}),environmentCtrl.dtInstanceCallbackRoles=function(dtInstance){angular.isFunction(environmentCtrl.dtInstanceRoles)?environmentCtrl.dtInstanceRoles(dtInstance):angular.isDefined(environmentCtrl.dtInstanceRoles)&&(environmentCtrl.dtInstanceRoles=dtInstance)},null!=environmentCtrl.dtInstanceRoles.changeData&&environmentCtrl.dtInstanceRoles.changeData(getTableData()),environmentCtrl.loadingTableRoles=!1}})),TDMService.getEnvGlobals(environmentCtrl.environmentData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){environmentCtrl.globals=_.sortBy(response.result,(function(value){return new Date(value.update_date)})),environmentCtrl.globals.reverse(),environmentCtrl.dtInstanceGlobals={},environmentCtrl.dtColumnsGlobals=[],environmentCtrl.dtColumnDefsGlobals=[],environmentCtrl.headersGlobals=[{column:"global_name",name:"Name",clickAble:!1,clickAble:!0},{column:"global_value",name:"Value",clickAble:!1},{column:"update_date",name:"Last Update date",type:"date",clickAble:!1},{column:"updated_by",name:"Updated By",clickAble:!1}];for(var clickAbleColumn=function(data,type,full,meta){return'<a ng-click="environmentCtrl.openGlobal('+meta.row+')">'+data+"</a>"},changeToLocalDate=function(data,type,full,meta){return data?moment(data).format("D MMM YYYY, HH:mm"):""},i=0;i<environmentCtrl.headersGlobals.length;i++)1==environmentCtrl.headersGlobals[i].clickAble?environmentCtrl.dtColumnsGlobals.push(DTColumnBuilder.newColumn(environmentCtrl.headersGlobals[i].column).withTitle(environmentCtrl.headersGlobals[i].name).renderWith(clickAbleColumn)):"date"==environmentCtrl.headersGlobals[i].type?environmentCtrl.dtColumnsGlobals.push(DTColumnBuilder.newColumn(environmentCtrl.headersGlobals[i].column).withTitle(environmentCtrl.headersGlobals[i].name).renderWith(changeToLocalDate)):environmentCtrl.dtColumnsGlobals.push(DTColumnBuilder.newColumn(environmentCtrl.headersGlobals[i].column).withTitle(environmentCtrl.headersGlobals[i].name));var getTableDataGlobals=function(){var deferred=$q.defer();return deferred.resolve(environmentCtrl.globals),deferred.promise};environmentCtrl.dtOptionsGlobals=DTOptionsBuilder.fromFnPromise((function(){return getTableDataGlobals()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("aaSorting",[environmentCtrl.headersGlobals.length-2,"desc"]).withOption("lengthChange",!1).withOption("paging",!1).withOption("searching",!1).withOption("info",!1),environmentCtrl.dtInstanceCallbackGlobals=function(dtInstance){angular.isFunction(environmentCtrl.dtInstanceGlobals)?environmentCtrl.dtInstanceGlobals(dtInstance):angular.isDefined(environmentCtrl.dtInstanceGlobals)&&(environmentCtrl.dtInstanceGlobals=dtInstance)},null!=environmentCtrl.dtInstanceGlobals.changeData&&environmentCtrl.dtInstanceGlobals.changeData(getTableDataGlobals()),environmentCtrl.loadingTableGlobals=!1}else toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Faild to get Globals")})),TDMService.getEnvProducts(environmentCtrl.environmentData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){environmentCtrl.products=_.sortBy(response.result,(function(value){return new Date(value.creation_date)})),environmentCtrl.products.reverse(),environmentCtrl.dtInstanceProducts={},environmentCtrl.dtColumnsProducts=[],environmentCtrl.dtColumnDefsProducts=[],environmentCtrl.headersProducts=[{column:"product_name",name:"Name",clickAble:!0},{column:"data_center_name",name:"Data Center",clickAble:!1},{column:"product_version",name:"Version",clickAble:!1},{column:"created_by",name:"Created By",clickAble:!1},{column:"creation_date",name:"Creation Date",clickAble:!1,type:"date"},{column:"last_updated_by",name:"Updated By",clickAble:!1},{column:"last_updated_date",name:"Update Date",clickAble:!1,type:"date"},{column:"status",name:"Status",clickAble:!1}];for(var clickAbleColumn=function(data,type,full,meta){return'<a ng-click="environmentCtrl.openProduct('+meta.row+')">'+data+"</a>"},changeToLocalDate=function(data,type,full,meta){return data?moment(data).format("D MMM YYYY, HH:mm"):""},i=0;i<environmentCtrl.headersProducts.length;i++)1==environmentCtrl.headersProducts[i].clickAble?environmentCtrl.dtColumnsProducts.push(DTColumnBuilder.newColumn(environmentCtrl.headersProducts[i].column).withTitle(environmentCtrl.headersProducts[i].name).renderWith(clickAbleColumn)):"date"==environmentCtrl.headersProducts[i].type?environmentCtrl.dtColumnsProducts.push(DTColumnBuilder.newColumn(environmentCtrl.headersProducts[i].column).withTitle(environmentCtrl.headersProducts[i].name).renderWith(changeToLocalDate)):environmentCtrl.dtColumnsProducts.push(DTColumnBuilder.newColumn(environmentCtrl.headersProducts[i].column).withTitle(environmentCtrl.headersProducts[i].name));var getTableDataProducts=function(){var deferred=$q.defer();return deferred.resolve(environmentCtrl.products),deferred.promise};environmentCtrl.dtOptionsProducts=DTOptionsBuilder.fromFnPromise((function(){return getTableDataProducts()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("aaSorting",[7,"asc"]).withOption("scrollX",!1).withOption("searching",!0).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),environmentCtrl.dtOptionsProducts.withLightColumnFilter({0:{type:"text"},1:{type:"select",values:_.map(_.unique(_.map(environmentCtrl.products,"data_center_name")),(function(el){return{value:el,label:el}}))},2:{type:"text"},3:{type:"select",values:_.map(_.unique(_.map(environmentCtrl.products,"created_by")),(function(el){return{value:el,label:el}}))},4:{type:"text"},5:{type:"select",values:_.map(_.unique(_.map(environmentCtrl.products,"last_updated_by")),(function(el){return{value:el,label:el}}))},6:{type:"text"},7:{type:"select",defaultValue:"Active",values:[{value:"Inactive",label:"Inactive"},{value:"Active",label:"Active"}]}}),environmentCtrl.dtInstanceCallbackProducts=function(dtInstance){angular.isFunction(environmentCtrl.dtInstanceProducts)?environmentCtrl.dtInstanceProducts(dtInstance):angular.isDefined(environmentCtrl.dtInstanceProducts)&&(environmentCtrl.dtInstanceProducts=dtInstance)},null!=environmentCtrl.dtInstanceProducts.changeData&&environmentCtrl.dtInstanceProducts.changeData(getTableDataProducts()),environmentCtrl.loadingTableProducts=!1}else toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Failed to get products")})),environmentCtrl.refreshBusnisEntities=function(){TDMService.getBusinessEntitiesForEnvProducts(environmentCtrl.environmentData.environment_id).then((function(response){var allBusinessEntities=response.result;"SUCCESS"==response.errorCode?(environmentCtrl.allBusinessEntities=allBusinessEntities,TDMService.getUsersByPermssionGroups("admin").then((function(response){var admins=response.result;"SUCCESS"==response.errorCode?(environmentCtrl.allusers=admins,TDMService.getEnvTesters(environmentCtrl.environmentData.environment_id).then((function(response){var testers=response.result;"SUCCESS"==response.errorCode?(environmentCtrl.allusers=testers.concat(environmentCtrl.allusers),TDMService.getEnvironmentOwners(environmentCtrl.environmentData.environment_id).then((function(response){var owners=response.result;if(TDMService.getFabricRoles("tester").then(response=>{environmentCtrl.testerFabricRoles=(response.result||[]).concat(environmentCtrl.ownerFabricRoles.filter(owner=>_.findIndex(owners,{user_id:owner,user_type:"GROUP"})<0))}),"SUCCESS"==response.errorCode){var ownersNewStructArray=[];owners.forEach((function(owner){var anOwner={};anOwner.uid=owner.user_id,ownersNewStructArray.push(anOwner)})),environmentCtrl.allusers=ownersNewStructArray.concat(environmentCtrl.allusers)}else toastr.error("Failed to get Environment Owners")}))):toastr.error("Failed to get Environment Testers")}))):toastr.error("Failed to get all Admins")}))):toastr.error("Failed to get Business Entities")}))},environmentCtrl.refreshBusnisEntities(),TDMService.getTesters(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.allTesters=_.map(response.result,tester=>(tester.user_type||(tester.user_type="ID"),tester)),environmentCtrl.allTesters=_.uniq(environmentCtrl.allTesters,"user_id"),_.remove(environmentCtrl.allTesters,(function(tester){return!!_.find(environmentCtrl.environmentData.owners,{user_id:tester.user_id})}))):(environmentCtrl.hideUsersInput=!0,toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to get All Testers : "+response.message))})),environmentCtrl.openRole=function(index){environmentCtrl.roleData=angular.copy(environmentCtrl.roles[index]),environmentCtrl.environmentDataOrig.allow_read&&(environmentCtrl.roleData.allow_read=!0),environmentCtrl.environmentDataOrig.allow_write&&(environmentCtrl.roleData.allow_write=!0),environmentCtrl.disableChangeRole=environmentCtrl.disableChange||"Inactive"==environmentCtrl.roleData.role_status||!AuthService.authorizedToEdit(1)||!environmentCtrl.environmentData.isOwner,environmentCtrl.isOpen1=!1,TDMService.getEnvironmentRoleTesters(environmentCtrl.environmentData.environment_id,environmentCtrl.roleData.role_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.testers=_.map(response.result,tester=>(tester.user_type||(tester.user_type="ID"),tester)),environmentCtrl.testersIds=environmentCtrl.testers.map(it=>it.user_id),environmentCtrl.allTesters||(environmentCtrl.allTesters=[]),environmentCtrl.allTestersRole=environmentCtrl.allTesters.concat(environmentCtrl.testers)):(environmentCtrl.hideUsersInput=!0,toastr.error("Role # "+environmentCtrl.roleData.role_name,"failed to get Role Users : "+response.message))})),environmentCtrl.activityPanel="empty",$timeout((function(){environmentCtrl.activityPanel="Role"}),200)},environmentCtrl.deleteRole=function(){TDMService.deleteEnvironmentRole(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.roleData.role_id,environmentCtrl.roleData.role_name).then((function(response){if("SUCCESS"==response.errorCode){toastr.success("Role # "+environmentCtrl.roleData.role_name,"deleted Successfully"),toastr.warning("The entities of the removed users need to be released from the environment."),environmentCtrl.roleData.role_status="Inactive";var currentRole=_.find(environmentCtrl.roles,{role_id:environmentCtrl.roleData.role_id});currentRole&&(currentRole.role_status="Inactive"),environmentCtrl.dtInstanceRoles.reloadData((function(data){}),!0),TDMService.getTesters(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.allTesters=_.map(response.result,tester=>(tester.user_type||(tester.user_type="ID"),tester)),_.remove(environmentCtrl.allTesters,(function(tester){return!!_.find(environmentCtrl.environmentData.owners,{user_id:tester.user_id})}))):(environmentCtrl.hideUsersInput=!0,toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to get All Testers : "+response.message))})),environmentCtrl.getSummaryData()}else toastr.error("Role # "+environmentCtrl.roleData.role_name,"failed to delete")}))},environmentCtrl.saveRoleChanges=function(){const testerIds=environmentCtrl.testers.map(it=>it.user_id);let showWarningMessage=!1;for(let i=0;i<environmentCtrl.testersIds.length;i++)if(testerIds.indexOf(environmentCtrl.testersIds[i])<0){showWarningMessage=!0;break}environmentCtrl.testersIds=[],TDMService.postEnvironmentRoleTesters(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.roleData.role_id,environmentCtrl.roleData.role_name,environmentCtrl.testers).then((function(response){"SUCCESS"==response.errorCode?(showWarningMessage&&toastr.warning("The entities of the removed users need to be released from the environment."),toastr.success("Role Users # "+environmentCtrl.roleData.role_name,"Updated Successfully"),TDMService.getTesters(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.allTesters=_.map(response.result,tester=>(tester.user_type||(tester.user_type="ID"),tester)),_.remove(environmentCtrl.allTesters,(function(tester){return!!_.find(environmentCtrl.environmentData.owners,{user_id:tester.user_id})}))):(environmentCtrl.hideUsersInput=!0,toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to get All Testers : "+response.message))})),environmentCtrl.getSummaryData()):toastr.error("Role Users # "+environmentCtrl.roleData.role_name,"failed to Update : "+response.message)})),TDMService.updateEnvironmentRole(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.roleData.role_id,environmentCtrl.roleData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Role # "+environmentCtrl.roleData.role_name,"Updated Successfully"),TDMService.getEnvironmentRoles(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode&&(environmentCtrl.roles=response.result,environmentCtrl.dtInstanceRoles.reloadData((function(data){}),!0))}))):toastr.error("Role # "+environmentCtrl.roleData.role_name,"failed to Update : "+response.message)}))},environmentCtrl.openNewRole=function(){environmentCtrl.roleData={allowed_test_conn_failure:!1,allowed_creation_of_synthetic_data:!1,allowed_delete_before_load:!1,allowed_random_entity_selection:!1,allowed_request_of_fresh_data:!1,allowed_task_scheduling:!1,allowed_replace_sequences:!1,allowed_refresh_reference_data:!1,allowed_entity_versioning:!1,allowed_number_of_reserved_entities:0,allowed_number_of_entities_to_copy:0,allowed_number_of_entities_to_read:0,role_description:"",role_name:"",allow_read:!!environmentCtrl.environmentDataOrig.allow_read,allow_write:!!environmentCtrl.environmentDataOrig.allow_write},environmentCtrl.isOpen1=!1,environmentCtrl.activityPanel="newRole",environmentCtrl.testers=[],environmentCtrl.allTesters||(environmentCtrl.allTesters=[])},environmentCtrl.addNewRole=function(){if(_.find(environmentCtrl.roles,{role_name:environmentCtrl.roleData.role_name,role_status:"Active"}))return toastr.error("Role # "+environmentCtrl.roleData.role_name+" Already Exists");TDMService.postEnvironmentRole(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.roleData).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.getSummaryData(),TDMService.getEnvironmentRoles(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode&&(environmentCtrl.roles=response.result,environmentCtrl.dtInstanceRoles.reloadData((function(data){}),!0))})),toastr.success("Role # "+environmentCtrl.roleData.role_name,"Created Successfully"),environmentCtrl.getSummaryData(),TDMService.postEnvironmentRoleTesters(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,response.result.id,environmentCtrl.roleData.role_name,environmentCtrl.testers).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Role Users # "+environmentCtrl.roleData.role_name,"Updated Successfully"),TDMService.getTesters(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.allTesters=_.map(response.result,tester=>(tester.user_type||(tester.user_type="ID"),tester)),_.remove(environmentCtrl.allTesters,(function(tester){return!!_.find(environmentCtrl.environmentData.owners,{user_id:tester.user_id})}))):(environmentCtrl.hideUsersInput=!0,toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"failed to get All Testers : "+response.message))}))):toastr.error("Role Users # "+environmentCtrl.roleData.role_name,"failed to Update : "+response.message)}))):toastr.error("Role # "+environmentCtrl.roleData.role_name,"Unable to Create : "+response.message)}))},environmentCtrl.addNewGlobal=function(){if(environmentCtrl.globalData.update_date=(new Date).toUTCString(),environmentCtrl.globalData.updated_by=environmentCtrl.environmentData.environment_last_updated_by,console.log(environmentCtrl.globalData),_.find(environmentCtrl.globals,{global_name:environmentCtrl.globalData.global_name}))return toastr.error("Global # "+environmentCtrl.globalData.global_name+" Already Exists");TDMService.postEnvGlobal(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.globalData).then((function(response){"SUCCESS"==response.errorCode?(TDMService.getEnvGlobals(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode&&(environmentCtrl.globals=response.result,environmentCtrl.dtInstanceGlobals.reloadData((function(data){}),!0))})),toastr.success("Global # "+environmentCtrl.globalData.global_name,"Created Successfully"),environmentCtrl.getSummaryData()):toastr.error("Global # "+environmentCtrl.roleData.role_name,"Unable to Create : "+response.message)}))};environmentCtrl.exclusionPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,})?$"),environmentCtrl.beIsSelected=!1,environmentCtrl.onBeSelect=function(){environmentCtrl.beIsSelected=!0},environmentCtrl.validateExclusionListRequestedBy=function(){console.log("validating Exclusion List requested by: nev_id="+environmentCtrl.environmentData.environment_id+"\n"),console.log(environmentCtrl.exclusionListData),environmentCtrl.exclusionListRequestedByIsNotValid=!1,TDMService.postEnvExclusionListValidateRequestedBy(environmentCtrl.environmentData.environment_id,environmentCtrl.exclusionListData).then((function(response){"SUCCESS"==response.errorCode?response.result.length>0&&(environmentCtrl.exclusionListRequestedByIsNotValid=!0):toastr.error("Unable to execute Exclusion List Validation 1: "+response.message)}))},environmentCtrl.validateAndAddExclusionList=function(){console.log("validating Exclusion List "),environmentCtrl.patternFailed=!1,environmentCtrl.exclusionListIsNotValid=!1,environmentCtrl.exclusionListData.exclusion_list=environmentCtrl.exclusionListData.exclusion_list.replace(/\s/g,""),environmentCtrl.exclusionListData.exclusion_list=environmentCtrl.exclusionListData.exclusion_list.replace(/\r?\n|\r/g,""),environmentCtrl.exclusionPattern.test(environmentCtrl.exclusionListData.exclusion_list)?TDMService.postEnvExclusionListValidateList(environmentCtrl.environmentData.environment_id,environmentCtrl.exclusionListData).then((function(response){if("SUCCESS"==response.errorCode)if(response.result.length>0){environmentCtrl.exclusionListIsNotValid=!0,environmentCtrl.existingExclusionListMembers=[];for(var i=0;i<response.result.length;i++)environmentCtrl.existingExclusionListMembers.push(response.result[i].unnest)}else console.log("add new exclusion list"),TDMService.postEnvExclusionList(environmentCtrl.environmentData.environment_id,environmentCtrl.exclusionListData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("An Exclusion List was added successfully"),TDMService.getEnvExclusionLists(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.exclusionLists=_.sortBy(response.result,(function(value){return new Date(value.creation_date)})),environmentCtrl.dtInstanceExclusionLists.reloadData((function(data){}),!0),environmentCtrl.getSummaryData()):toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Failed to get Exclusion Lists")}))):toastr.error("Failed to add an Exclusion List"+response.message)}));else toastr.error("Unable to execute Exclusion List Validation 2: "+response.message)})):environmentCtrl.patternFailed=!0},environmentCtrl.validateAndSaveExclusionList=function(){console.log("validating Exclusion List "),environmentCtrl.patternFailed=!1,environmentCtrl.exclusionListIsNotValid=!1,environmentCtrl.exclusionListData.exclusion_list=environmentCtrl.exclusionListData.exclusion_list.replace(/\s/g,""),environmentCtrl.exclusionListData.exclusion_list=environmentCtrl.exclusionListData.exclusion_list.replace(/\r?\n|\r/g,""),environmentCtrl.exclusionPattern.test(environmentCtrl.exclusionListData.exclusion_list)?TDMService.postEnvExclusionListValidateListBeforeUpdate(environmentCtrl.environmentData.environment_id,environmentCtrl.exclusionListData).then((function(response){if("SUCCESS"==response.errorCode)if(response.result.length>0){environmentCtrl.exclusionListIsNotValid=!0,environmentCtrl.existingExclusionListMembers=[];for(var i=0;i<response.result.length;i++)environmentCtrl.existingExclusionListMembers.push(response.result[i].unnest)}else console.log("save exclusion list. id: "+environmentCtrl.exclusionListData.be_env_exclusion_list_id),TDMService.putEnvExclusionList(environmentCtrl.environmentData.environment_id,environmentCtrl.exclusionListData.be_env_exclusion_list_id,environmentCtrl.exclusionListData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("An Exclusion List was added successfully"),TDMService.getEnvExclusionLists(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.exclusionLists=_.sortBy(response.result,(function(value){return new Date(value.creation_date)})),environmentCtrl.dtInstanceExclusionLists.reloadData((function(data){}),!0),environmentCtrl.getSummaryData()):toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Failed to get Exclusion Lists")}))):toastr.error("Failed to add an Exclusion List"+response.message)}));else toastr.error("Unable to execute Exclusion List Validation 2: "+response.message)})):environmentCtrl.patternFailed=!0},environmentCtrl.openExclusionList=function(index){environmentCtrl.exclusionListRequestedByIsNotValid=!1,environmentCtrl.disableChangeExclusionList=!1,environmentCtrl.exclusionListIsNotValid=!1,environmentCtrl.exclusionListData=angular.copy(environmentCtrl.exclusionLists[index]),environmentCtrl.disableChangeExclusionList=environmentCtrl.disableChange||!AuthService.authorizedToEdit(1)||!environmentCtrl.environmentData.isOwner,environmentCtrl.activityPanel="empty",$timeout((function(){environmentCtrl.activityPanel="ExclusionList"}),200)},environmentCtrl.deleteExclusionList=function(){TDMService.deleteEnvExclusionList(environmentCtrl.environmentData.environment_id,environmentCtrl.exclusionListData.be_env_exclusion_list_id).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Exclusion List deleted Successfully"),TDMService.getEnvExclusionLists(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode?(environmentCtrl.exclusionLists=_.sortBy(response.result,(function(value){return new Date(value.creation_date)})),environmentCtrl.dtInstanceExclusionLists.reloadData((function(data){}),!0),environmentCtrl.getSummaryData()):toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Failed to get Exclusion Lists")}))):toastr.error("Exclusion List failed to delete")}))},environmentCtrl.openNewExclusionList=function(){environmentCtrl.disableChangeExclusionList=!1,environmentCtrl.exclusionListIsNotValid=!1,environmentCtrl.exclusionListData={},environmentCtrl.activityPanel="newExclusionList"},TDMService.getDataCenters().then((function(response){"SUCCESS"==response.errorCode?environmentCtrl.dataCenters=_.unique(_.filter(response.result,(function(dc){return"ALIVE"==dc.status})),"dc"):toastr.error("Environment # "+environmentCtrl.environmentData.environment_name,"Failed to get data centers")})),environmentCtrl.openProduct=function(index){environmentCtrl.productData=angular.copy(environmentCtrl.products[index]),environmentCtrl.productData.product_id&&TDMService.getProductLogicalUnits(environmentCtrl.productData.product_id).then((function(response){environmentCtrl.logicalUnitsForProduct=response.result,environmentCtrl.dataCenterChanged()})),environmentCtrl.disableChangeProduct=environmentCtrl.disableChange||"Inactive"==environmentCtrl.productData.status||!AuthService.authorizedToEdit(1)||!environmentCtrl.environmentData.isOwner,environmentCtrl.activityPanel="empty",$timeout((function(){environmentCtrl.activityPanel="Product"}),200)},environmentCtrl.openGlobal=function(index){environmentCtrl.environmentData.isOwner&&(TDMService.getAllGlobals(null).then((function(response){var envGlobals=response.result;"SUCCESS"==response.errorCode?(environmentCtrl.newEnvGlobals=envGlobals,environmentCtrl.disableChangeGlobal=!1,environmentCtrl.globalData=angular.copy(environmentCtrl.globals[index]),environmentCtrl.globalData.luName=environmentCtrl.globalData.lu_name,environmentCtrl.globalChanged(!0)):toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Faild to get new products")})),environmentCtrl.activityPanel="empty",$timeout((function(){environmentCtrl.activityPanel="Global"}),200))},environmentCtrl.deleteProduct=function(){TDMService.deleteEnvProduct(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.productData.product_id).then((function(response){if("SUCCESS"==response.errorCode){toastr.success("System # "+environmentCtrl.productData.product_name,"deleted Successfully"),environmentCtrl.productData.status="Inactive";var currentProduct=_.find(environmentCtrl.products,{product_id:environmentCtrl.productData.product_id});currentProduct&&(currentProduct.status="Inactive"),environmentCtrl.dtInstanceProducts.reloadData((function(data){}),!0),environmentCtrl.getSummaryData()}else toastr.error("System # "+environmentCtrl.productData.product_name,"failed to delete")}))},environmentCtrl.deleteGlobal=function(){TDMService.deleteEnvGlobal(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.globalData.global_name,environmentCtrl.globalData.lu_name).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Global # "+environmentCtrl.globalData.global_name,"deleted Successfully"),TDMService.getEnvGlobals(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode&&(environmentCtrl.globals=_.sortBy(response.result,(function(value){return new Date(value.update_date)})),environmentCtrl.globals.reverse(),environmentCtrl.dtInstanceGlobals.reloadData((function(data){}),!0))})),environmentCtrl.getSummaryData()):toastr.error("Global # "+environmentCtrl.globalData.global_name,"failed to delete")}))},environmentCtrl.saveProductChanges=function(){TDMService.putEnvProduct(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.productData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("System # "+environmentCtrl.productData.product_name,"Updated Successfully"),TDMService.getEnvProducts(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode&&(environmentCtrl.products=response.result,environmentCtrl.dtInstanceProducts.reloadData((function(data){}),!0))})),environmentCtrl.getSummaryData()):toastr.error("System # "+environmentCtrl.productData.product_name,"failed to update")}))},environmentCtrl.saveGlobalChanges=function(){TDMService.putEnvGlobal(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.globalData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Global # "+environmentCtrl.globalData.global_name,"Updated Successfully"),"SUCCESS"==response.errorCode&&TDMService.getEnvGlobals(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode&&(environmentCtrl.globals=_.sortBy(response.result,(function(value){return new Date(value.update_date)})),environmentCtrl.globals.reverse(),environmentCtrl.dtInstanceGlobals.reloadData((function(data){}),!0))})),environmentCtrl.getSummaryData()):toastr.error("Global # "+environmentCtrl.globalData.global_name,"failed to update")}))},environmentCtrl.openEnvProductInterfaceEdit=function(index){var environmentDataOrig=environmentCtrl.environmentDataOrig;$uibModal.open({templateUrl:"views/environments/environmentProductInterfaceModal.html",resolve:{dbInterface:environmentCtrl.productData.interfaces[index],disableChange:environmentCtrl.disableChangeProduct||"Inactive"==environmentCtrl.productData.interfaces[index].env_product_interface_status},controller:function($scope,$uibModalInstance,dbInterface,disableChange){var dbInterfaceCtrl=this;dbInterfaceCtrl.dbInterfaceData=dbInterface,environmentDataOrig.allow_read&&environmentDataOrig.allow_write&&!dbInterfaceCtrl.dbInterfaceData.db_host&&!dbInterfaceCtrl.dbInterfaceData.db_connection_string&&TDMService.postGenericAPI("interfaceConnectionDetails",{interfaceName:dbInterfaceCtrl.dbInterfaceData.interface_name,environmentName:environmentDataOrig.environment_name}).then((function(response){console.log(response.result),response.result&&response.result.length>0&&(dbInterfaceCtrl.dbInterfaceData.db_host=response.result[0],dbInterfaceCtrl.dbInterfaceData.db_port=parseInt(response.result[1]),dbInterfaceCtrl.dbInterfaceData.db_user=response.result[3],dbInterfaceCtrl.dbInterfaceData.db_password=response.result[4],dbInterfaceCtrl.dbInterfaceData.db_schema=response.result[2],TDMService.decryptInterfacePassword({db_password:dbInterfaceCtrl.dbInterfaceData.db_password}).then((function(response){"FAILED"!=response.errorCode&&response.result?dbInterfaceCtrl.dbInterfaceData.db_password=response.result:console.log("Error decrypting password : "+response.message),dbInterfaceCtrl.dbInterfaceData.passwordDecrypt=!0})))})),!dbInterfaceCtrl.dbInterfaceData.passwordDecrypt&&dbInterfaceCtrl.dbInterfaceData.db_password&&""!=dbInterfaceCtrl.dbInterfaceData.db_password&&TDMService.decryptInterfacePassword({db_password:dbInterfaceCtrl.dbInterfaceData.db_password}).then((function(response){"FAILED"!=response.errorCode&&response.result?dbInterfaceCtrl.dbInterfaceData.db_password=response.result:console.log("Error decrypting password : "+response.message),dbInterfaceCtrl.dbInterfaceData.passwordDecrypt=!0})),dbInterfaceCtrl.interfaceType="1",null!=dbInterfaceCtrl.dbInterfaceData.db_connection_string&&(dbInterfaceCtrl.interfaceType="0"),dbInterfaceCtrl.disableChange=disableChange,dbInterfaceCtrl.saveDBInterface=function(){"1"==dbInterfaceCtrl.interfaceType?dbInterfaceCtrl.dbInterfaceData.db_connection_string=null:(dbInterfaceCtrl.dbInterfaceData.db_host=null,dbInterfaceCtrl.dbInterfaceData.db_port=null,dbInterfaceCtrl.dbInterfaceData.db_schema=null),0==dbInterfaceCtrl.dbInterfaceData.status&&(dbInterfaceCtrl.dbInterfaceData.newInterface=!0),dbInterfaceCtrl.dbInterfaceData.status=!0,dbInterfaceCtrl.dbInterfaceData.deleted=!1,$uibModalInstance.close(dbInterfaceCtrl.dbInterfaceData)},dbInterfaceCtrl.testDBInterfaceConn=function(){var requestData={interface_db_type:dbInterfaceCtrl.dbInterfaceData.interface_type,db_host:dbInterfaceCtrl.dbInterfaceData.db_host,db_port:dbInterfaceCtrl.dbInterfaceData.db_port,db_user:dbInterfaceCtrl.dbInterfaceData.db_user,db_password:dbInterfaceCtrl.dbInterfaceData.db_password,db_schema:dbInterfaceCtrl.dbInterfaceData.db_schema,db_connection_string:dbInterfaceCtrl.dbInterfaceData.db_connection_string};TDMService.testInterfaceDbConnection(requestData).then((function(response){"FAILED"!=response.errorCode&&response.result?(dbInterfaceCtrl.testDbConnSuccess=!0,dbInterfaceCtrl.testDBInterfaceConnResult="Success"):(dbInterfaceCtrl.testDbConnSuccess=!1,dbInterfaceCtrl.testDBInterfaceConnResult="Failed "+(response.message?"["+response.message+"]":"")),console.log("Connection Test Done.\n"+response.message)}))},dbInterfaceCtrl.close=function(){$uibModalInstance.close()}},controllerAs:"dbInterfaceCtrl"})},environmentCtrl.openNewProduct=function(){environmentCtrl.disableChangeProduct=!1,TDMService.getProductsWithLUs().then((function(response){if("SUCCESS"==response.errorCode){var allProducts=response.result;TDMService.getEnvProducts(environmentCtrl.environmentData.environment_id).then((function(response){var envProducts=response.result;"SUCCESS"==response.errorCode?environmentCtrl.newEnvProducts=_.reject(allProducts,(function(product){for(var i=0;i<envProducts.length;i++)if(envProducts[i].product_id===product.product_id&&"Active"===envProducts[i].status)return!0;return!1})):toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Faild to get new systems")}))}else toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Faild to get new systems")})),environmentCtrl.productData={},environmentCtrl.activityPanel="newProduct"},environmentCtrl.globalChanged=init=>{const chosenGlobal=_.find(environmentCtrl.newEnvGlobals,{globalName:environmentCtrl.globalData.global_name});chosenGlobal&&(environmentCtrl.globalLogicalUnits=chosenGlobal.luList,init||(environmentCtrl.globalData.luName=null,environmentCtrl.globalData.global_value=""))},environmentCtrl.globalLogicalUnitChanged=()=>{const chosenLogicalUnit=_.find(environmentCtrl.globalLogicalUnits,{luName:environmentCtrl.globalData.luName});chosenLogicalUnit&&(environmentCtrl.globalData.global_value=chosenLogicalUnit.defaultValue)},environmentCtrl.openNewGlobal=function(){environmentCtrl.disableChangeGlobal=!1,TDMService.getAllGlobals(null).then((function(response){var envGlobals=response.result;"SUCCESS"==response.errorCode?environmentCtrl.newEnvGlobals=_.filter(envGlobals,global=>_.findIndex(environmentCtrl.globals,{global_name:global.globalName})<0):toastr.error("Environment # "+environmentCtrl.environmentData.environment_id,"Faild to get new products")})),environmentCtrl.globalLogicalUnits=[],environmentCtrl.globalData={},environmentCtrl.activityPanel="newGlobal"},environmentCtrl.dataCenterChanged=function(){if(environmentCtrl.productData.data_center_name){var dataCenter=_.find(environmentCtrl.dataCenters,{dc:environmentCtrl.productData.data_center_name});if(dataCenter&&(environmentCtrl.addProductWarning=null,environmentCtrl.logicalUnitsForProduct))for(var i=0;i<environmentCtrl.logicalUnitsForProduct.length;i++)if(environmentCtrl.logicalUnitsForProduct[i].lu_dc_name&&""!=environmentCtrl.logicalUnitsForProduct[i].lu_dc_name&&environmentCtrl.logicalUnitsForProduct[i].lu_dc_name!==dataCenter.dc){environmentCtrl.addProductWarning={dc_name:dataCenter.dc,lu_name:environmentCtrl.logicalUnitsForProduct[i].lu_name,lu_dc_name:environmentCtrl.logicalUnitsForProduct[i].lu_dc_name};break}}},environmentCtrl.productChanged=function(){if(environmentCtrl.productData.product_id){TDMService.getProductLogicalUnits(environmentCtrl.productData.product_id).then((function(response){environmentCtrl.logicalUnitsForProduct=response.result,environmentCtrl.dataCenterChanged()}));var product=_.find(environmentCtrl.newEnvProducts,{product_id:environmentCtrl.productData.product_id});product&&(environmentCtrl.productData.product_versions=product.product_versions),environmentCtrl.productData.lus=parseInt(product.lus)}},environmentCtrl.addProduct=function(){1!=environmentCtrl.addProductInProgress&&(environmentCtrl.addProductInProgress=!0,environmentCtrl.productData&&environmentCtrl.productData.interfaces&&_.remove(environmentCtrl.productData.interfaces,{deleted:!0}),TDMService.postEnvProduct(environmentCtrl.environmentData.environment_id,environmentCtrl.environmentData.environment_name,environmentCtrl.productData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("System # "+environmentCtrl.productData.product_id,"Created Successfully"),TDMService.getEnvProducts(environmentCtrl.environmentData.environment_id).then((function(response){"SUCCESS"==response.errorCode&&(environmentCtrl.products=response.result,environmentCtrl.dtInstanceProducts.reloadData((function(data){}),!0))})),environmentCtrl.addProductInProgress=!1,environmentCtrl.getSummaryData()):(environmentCtrl.addProductInProgress=!1,toastr.error("System # "+environmentCtrl.productData.product_id,"Unable to Create : "+response.message))})))},environmentCtrl.openProductFullView=function(){environmentCtrl.productDataFullView={product_id:environmentCtrl.productData.product_id,product_name:environmentCtrl.productData.product_name,product_status:environmentCtrl.productData.product_status,product_vendor:environmentCtrl.productData.product_vendor,product_versions:environmentCtrl.productData.product_versions,product_description:environmentCtrl.productData.product_description},$scope.content.openProduct(environmentCtrl.productDataFullView)}},controllerAs:"environmentCtrl"}}angular.module("TDM-FE").directive("environmentDirective",environmentDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvZW52aXJvbm1lbnRzL2Vudmlyb25tZW50RGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbImVudmlyb25tZW50RGlyZWN0aXZlIiwicmVzdHJpY3QiLCJ0ZW1wbGF0ZVVybCIsInNjb3BlIiwiY29udGVudCIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJURE1TZXJ2aWNlIiwiQnJlYWRDcnVtYnNTZXJ2aWNlIiwidG9hc3RyIiwiU3dlZXRBbGVydCIsIiR0aW1lb3V0IiwiQXV0aFNlcnZpY2UiLCJEVENvbHVtbkJ1aWxkZXIiLCJEVE9wdGlvbnNCdWlsZGVyIiwiJHEiLCIkY29tcGlsZSIsIiR1aWJNb2RhbCIsIiRodHRwIiwidGhpcyIsIl9zY29wZSIsImVudmlyb25tZW50Q3RybCIsImVudmlyb25tZW50RGF0YSIsImVudmlyb25tZW50RGF0YU9yaWciLCJhbmd1bGFyIiwiY29weSIsInBhZ2VEaXNwbGF5IiwiZW52VHlwZXMiLCJnZXRGYWJyaWNSb2xlcyIsInRoZW4iLCJyZXNwb25zZSIsIm93bmVyRmFicmljUm9sZXMiLCJyZXN1bHQiLCJzeW5jTW9kZXMiLCJ0ZXh0IiwidmFsdWUiLCJhZGRPd25lciIsIm5ld093bmVyIiwib3duZXJzIiwiXyIsImZpbmRJbmRleCIsInVzZXJfaWQiLCJhZGRPd25lckVycm9yIiwicHVzaCIsImRpc3BsYXlOYW1lIiwidWlkIiwidXNlcm5hbWUiLCJhbGxPd25lcnMiLCJpc09wZW4iLCJhZGRUZXN0ZXIiLCJuZXdUZXN0ZXIiLCJhbGxUZXN0ZXJzIiwidGVzdGVycyIsImFkZE5ld1Rlc3RlckVycm9yIiwiaXNPcGVuMSIsImluaXRBZGROZXdPd25lclBvcHVwIiwiaW5pdEFkZE5ld1Rlc3RlclBvcHVwIiwiY2xvc2VBZGRUZXN0ZXJNb2RhbCIsImNsb3NlQWRkT3duZXJNb2RhbCIsInNhdmVVc2Vyc0FuZEdyb3Vwc1Rlc3RlciIsInVzZXIiLCJ1c2VyQ3VzdG9tIiwidXNlckdyb3VwIiwiYWxsVXNlcnMiLCJhbGxVc2Vyc09iaiIsImZpbmQiLCJhbGxVc2Vyc0luZGV4Iiwic3BsaWNlIiwibmV3VXNlciIsInVzZXJfdHlwZSIsInVzZXJfbmFtZSIsImFjdGl2aXR5UGFuZWwiLCJhbGxUZXN0ZXJzUm9sZSIsImdyb3VwIiwidW5pcXVlIiwidGVzdGVyIiwic2F2ZVVzZXJzQW5kR3JvdXBzIiwib3duZXIiLCJhbGxvd193cml0ZSIsImFsbG93X3JlYWQiLCJlbnZUeXBlIiwic3luY19tb2RlIiwiaXNGbHV4TW9kZSIsInVzZXJSb2xlIiwiZ2V0Um9sZSIsInNob3dFbnZpcm9ubWVudCIsImRpc2FibGVPd25lcnNDaGFuZ2UiLCJlbnZpcm9ubWVudF9zdGF0dXMiLCJhdXRob3JpemVkVG9FZGl0IiwiZW52VHlwZUNoYW5nZWQiLCJ0b0xvd2VyQ2FzZSIsImdldEdlbmVyaWNBUEkiLCJhdmFpbGFibGVTb3VyY2VFbnZpcm9ubWVudHMiLCJmaWx0ZXIiLCJlbnYiLCJlbnZpcm9ubWVudF9uYW1lIiwiZW52aXJvbm1lbnRzIiwiaW5kZXhPZiIsImVycm9yIiwiY2F0Y2giLCJlcnIiLCJ0YWJDbGlja2VkIiwibmV3VGFiIiwicm9sZUZvcm0iLCIkZGlydHkiLCJhc2tUb1NhdmVDaGFuZ2VzIiwicHJvZHVjdEZvcm0iLCJnbG9iYWxGb3JtIiwiZm9ybSIsInN3YWwiLCJ0aXRsZSIsInR5cGUiLCJzaG93Q2FuY2VsQnV0dG9uIiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiY29uZmlybUJ1dHRvblRleHQiLCJjYW5jZWxCdXR0b25UZXh0IiwiY2xvc2VPbkNvbmZpcm0iLCJjbG9zZU9uQ2FuY2VsIiwiYW5pbWF0aW9uIiwiY3VzdG9tQ2xhc3MiLCJpc0NvbmZpcm0iLCJzYXZlUm9sZUNoYW5nZXMiLCJzYXZlUHJvZHVjdENoYW5nZXMiLCJzYXZlR2xvYmFsQ2hhbmdlcyIsImJhck9wdGlvbnMiLCJzY2FsZUJlZ2luQXRaZXJvIiwic2NhbGVTaG93R3JpZExpbmVzIiwic2NhbGVHcmlkTGluZUNvbG9yIiwic2NhbGVHcmlkTGluZVdpZHRoIiwiYmFyU2hvd1N0cm9rZSIsImJhclN0cm9rZVdpZHRoIiwiZ2V0U3VtbWFyeURhdGEiLCJsb2FkaW5nU3VtbWFyeSIsImdldEVudmlyb25tZW50U3VtbWFyeSIsImVudmlyb25tZW50X2lkIiwiZXJyb3JDb2RlIiwic3VtbWFyeURhdGEiLCJudW1iZXJPZkFMTFRlc3RlcnMiLCJwYXJzZUludCIsInRhc2tzIiwiYWN0aXZlIiwib25Ib2xkIiwib25ob2xkIiwicHJvY2Vzc2VkRW50aXRpZXMiLCJwcm9jZXNzZWRlbnRpdGllcyIsInRhc2tFeGVjdXRpb25zQmFyRGF0YSIsImxhYmVscyIsImRhdGFzZXRzIiwibGFiZWwiLCJmaWxsQ29sb3IiLCJzdHJva2VDb2xvciIsImhpZ2hsaWdodEZpbGwiLCJoaWdobGlnaHRTdHJva2UiLCJkYXRhIiwidGFza0V4ZWN1dGlvblN0YXR1cyIsImZhaWxlZCIsInBlbmRpbmciLCJwYXVzZWQiLCJzdG9wcGVkIiwicnVubmluZyIsImNvbXBsZXRlZCIsImdldEVudlRhc2tDb3VudCIsInRhc2tzQ291bnQiLCJnZXREYXRhQ2VudGVycyIsImRhdGFDZW50ZXJzIiwiZ2V0RW52aXJvbm1lbnRPd25lcnMiLCJ0ZXN0ZXJGYWJyaWNSb2xlcyIsImNvbmNhdCIsImlzT3duZXIiLCJvd25lckZvdW5kIiwiZ2V0VXNlcklkIiwiaSIsImxlbmd0aCIsImZhYnJpY1JvbGUiLCJkaXNhYmxlQ2hhbmdlIiwibWVzc2FnZSIsImdldFVzZXJzQnlQZXJtc3Npb25Hcm91cHMiLCJtYXAiLCJpdGVtIiwiZm9yRWFjaCIsInNhdmVDaGFuZ2VzIiwidXBkYXRlRW52aXJvbm1lbnQiLCJzdWNjZXNzIiwib3BlbkVudmlyb25tZW50cyIsImRlbGV0ZUVudmlyb25tZW50IiwiYnJlYWRDcnVtYkNoYW5nZSIsImVudmlyb25tZW50SUQiLCJvcGVuRW52aXJvbm1lbnQiLCJvcGVuUm9sZXNNYW5hZ2VtZW50Iiwib3BlblJvbGVzIiwib3BlblByb2R1Y3RzIiwibG9hZGluZ1RhYmxlUm9sZXMiLCJnZXRFbnZpcm9ubWVudFJvbGVzIiwicm9sZXMiLCJzb3J0QnkiLCJEYXRlIiwicm9sZV9jcmVhdGlvbl9kYXRlIiwicmV2ZXJzZSIsImR0SW5zdGFuY2VSb2xlcyIsImR0Q29sdW1uc1JvbGVzIiwiZHRDb2x1bW5EZWZzUm9sZXMiLCJoZWFkZXJzUm9sZXMiLCJjb2x1bW4iLCJuYW1lIiwiY2xpY2tBYmxlIiwiY2xpY2tBYmxlQ29sdW1uIiwiZnVsbCIsIm1ldGEiLCJyb3ciLCJjaGFuZ2VUb0xvY2FsRGF0ZSIsIm1vbWVudCIsImZvcm1hdCIsIm5ld0NvbHVtbiIsIndpdGhUaXRsZSIsInJlbmRlcldpdGgiLCJnZXRUYWJsZURhdGEiLCJkZWZlcnJlZCIsImRlZmVyIiwicmVzb2x2ZSIsInByb21pc2UiLCJkdE9wdGlvbnNSb2xlcyIsImZyb21GblByb21pc2UiLCJ3aXRoRE9NIiwid2l0aE9wdGlvbiIsImVsZW1lbnQiLCJjb250ZW50cyIsImNhc2VJbnNlbnNpdGl2ZSIsIndpdGhMaWdodENvbHVtbkZpbHRlciIsIjAiLCIxIiwiMiIsIjMiLCJ2YWx1ZXMiLCJlbCIsIjQiLCI1IiwiNiIsImRlZmF1bHRWYWx1ZSIsImR0SW5zdGFuY2VDYWxsYmFja1JvbGVzIiwiZHRJbnN0YW5jZSIsImlzRnVuY3Rpb24iLCJpc0RlZmluZWQiLCJjaGFuZ2VEYXRhIiwiZ2V0RW52R2xvYmFscyIsImdsb2JhbHMiLCJ1cGRhdGVfZGF0ZSIsImR0SW5zdGFuY2VHbG9iYWxzIiwiZHRDb2x1bW5zR2xvYmFscyIsImR0Q29sdW1uRGVmc0dsb2JhbHMiLCJoZWFkZXJzR2xvYmFscyIsImdldFRhYmxlRGF0YUdsb2JhbHMiLCJkdE9wdGlvbnNHbG9iYWxzIiwiZHRJbnN0YW5jZUNhbGxiYWNrR2xvYmFscyIsImxvYWRpbmdUYWJsZUdsb2JhbHMiLCJnZXRFbnZQcm9kdWN0cyIsInByb2R1Y3RzIiwiY3JlYXRpb25fZGF0ZSIsImR0SW5zdGFuY2VQcm9kdWN0cyIsImR0Q29sdW1uc1Byb2R1Y3RzIiwiZHRDb2x1bW5EZWZzUHJvZHVjdHMiLCJoZWFkZXJzUHJvZHVjdHMiLCJnZXRUYWJsZURhdGFQcm9kdWN0cyIsImR0T3B0aW9uc1Byb2R1Y3RzIiwiNyIsImR0SW5zdGFuY2VDYWxsYmFja1Byb2R1Y3RzIiwibG9hZGluZ1RhYmxlUHJvZHVjdHMiLCJyZWZyZXNoQnVzbmlzRW50aXRpZXMiLCJnZXRCdXNpbmVzc0VudGl0aWVzRm9yRW52UHJvZHVjdHMiLCJhbGxCdXNpbmVzc0VudGl0aWVzIiwiYWRtaW5zIiwiYWxsdXNlcnMiLCJnZXRFbnZUZXN0ZXJzIiwib3duZXJzTmV3U3RydWN0QXJyYXkiLCJhbk93bmVyIiwiZ2V0VGVzdGVycyIsInVuaXEiLCJyZW1vdmUiLCJoaWRlVXNlcnNJbnB1dCIsIm9wZW5Sb2xlIiwiaW5kZXgiLCJyb2xlRGF0YSIsImRpc2FibGVDaGFuZ2VSb2xlIiwicm9sZV9zdGF0dXMiLCJnZXRFbnZpcm9ubWVudFJvbGVUZXN0ZXJzIiwicm9sZV9pZCIsInRlc3RlcnNJZHMiLCJpdCIsInJvbGVfbmFtZSIsImRlbGV0ZVJvbGUiLCJkZWxldGVFbnZpcm9ubWVudFJvbGUiLCJ3YXJuaW5nIiwiY3VycmVudFJvbGUiLCJyZWxvYWREYXRhIiwidGVzdGVySWRzIiwic2hvd1dhcm5pbmdNZXNzYWdlIiwicG9zdEVudmlyb25tZW50Um9sZVRlc3RlcnMiLCJ1cGRhdGVFbnZpcm9ubWVudFJvbGUiLCJvcGVuTmV3Um9sZSIsImFsbG93ZWRfdGVzdF9jb25uX2ZhaWx1cmUiLCJhbGxvd2VkX2NyZWF0aW9uX29mX3N5bnRoZXRpY19kYXRhIiwiYWxsb3dlZF9kZWxldGVfYmVmb3JlX2xvYWQiLCJhbGxvd2VkX3JhbmRvbV9lbnRpdHlfc2VsZWN0aW9uIiwiYWxsb3dlZF9yZXF1ZXN0X29mX2ZyZXNoX2RhdGEiLCJhbGxvd2VkX3Rhc2tfc2NoZWR1bGluZyIsImFsbG93ZWRfcmVwbGFjZV9zZXF1ZW5jZXMiLCJhbGxvd2VkX3JlZnJlc2hfcmVmZXJlbmNlX2RhdGEiLCJhbGxvd2VkX2VudGl0eV92ZXJzaW9uaW5nIiwiYWxsb3dlZF9udW1iZXJfb2ZfcmVzZXJ2ZWRfZW50aXRpZXMiLCJhbGxvd2VkX251bWJlcl9vZl9lbnRpdGllc190b19jb3B5IiwiYWxsb3dlZF9udW1iZXJfb2ZfZW50aXRpZXNfdG9fcmVhZCIsInJvbGVfZGVzY3JpcHRpb24iLCJhZGROZXdSb2xlIiwicG9zdEVudmlyb25tZW50Um9sZSIsImlkIiwiYWRkTmV3R2xvYmFsIiwiZ2xvYmFsRGF0YSIsInRvVVRDU3RyaW5nIiwidXBkYXRlZF9ieSIsImVudmlyb25tZW50X2xhc3RfdXBkYXRlZF9ieSIsImNvbnNvbGUiLCJsb2ciLCJnbG9iYWxfbmFtZSIsInBvc3RFbnZHbG9iYWwiLCJleGNsdXNpb25QYXR0ZXJuIiwiUmVnRXhwIiwiYmVJc1NlbGVjdGVkIiwib25CZVNlbGVjdCIsInZhbGlkYXRlRXhjbHVzaW9uTGlzdFJlcXVlc3RlZEJ5IiwiZXhjbHVzaW9uTGlzdERhdGEiLCJleGNsdXNpb25MaXN0UmVxdWVzdGVkQnlJc05vdFZhbGlkIiwicG9zdEVudkV4Y2x1c2lvbkxpc3RWYWxpZGF0ZVJlcXVlc3RlZEJ5IiwidmFsaWRhdGVBbmRBZGRFeGNsdXNpb25MaXN0IiwicGF0dGVybkZhaWxlZCIsImV4Y2x1c2lvbkxpc3RJc05vdFZhbGlkIiwiZXhjbHVzaW9uX2xpc3QiLCJyZXBsYWNlIiwidGVzdCIsInBvc3RFbnZFeGNsdXNpb25MaXN0VmFsaWRhdGVMaXN0IiwiZXhpc3RpbmdFeGNsdXNpb25MaXN0TWVtYmVycyIsInVubmVzdCIsInBvc3RFbnZFeGNsdXNpb25MaXN0IiwiZ2V0RW52RXhjbHVzaW9uTGlzdHMiLCJleGNsdXNpb25MaXN0cyIsImR0SW5zdGFuY2VFeGNsdXNpb25MaXN0cyIsInZhbGlkYXRlQW5kU2F2ZUV4Y2x1c2lvbkxpc3QiLCJwb3N0RW52RXhjbHVzaW9uTGlzdFZhbGlkYXRlTGlzdEJlZm9yZVVwZGF0ZSIsImJlX2Vudl9leGNsdXNpb25fbGlzdF9pZCIsInB1dEVudkV4Y2x1c2lvbkxpc3QiLCJvcGVuRXhjbHVzaW9uTGlzdCIsImRpc2FibGVDaGFuZ2VFeGNsdXNpb25MaXN0IiwiZGVsZXRlRXhjbHVzaW9uTGlzdCIsImRlbGV0ZUVudkV4Y2x1c2lvbkxpc3QiLCJvcGVuTmV3RXhjbHVzaW9uTGlzdCIsImRjIiwic3RhdHVzIiwib3BlblByb2R1Y3QiLCJwcm9kdWN0RGF0YSIsInByb2R1Y3RfaWQiLCJnZXRQcm9kdWN0TG9naWNhbFVuaXRzIiwibG9naWNhbFVuaXRzRm9yUHJvZHVjdCIsImRhdGFDZW50ZXJDaGFuZ2VkIiwiZGlzYWJsZUNoYW5nZVByb2R1Y3QiLCJvcGVuR2xvYmFsIiwiZ2V0QWxsR2xvYmFscyIsImVudkdsb2JhbHMiLCJuZXdFbnZHbG9iYWxzIiwiZGlzYWJsZUNoYW5nZUdsb2JhbCIsImx1TmFtZSIsImx1X25hbWUiLCJnbG9iYWxDaGFuZ2VkIiwiZGVsZXRlUHJvZHVjdCIsImRlbGV0ZUVudlByb2R1Y3QiLCJwcm9kdWN0X25hbWUiLCJjdXJyZW50UHJvZHVjdCIsImRlbGV0ZUdsb2JhbCIsImRlbGV0ZUVudkdsb2JhbCIsInB1dEVudlByb2R1Y3QiLCJwdXRFbnZHbG9iYWwiLCJvcGVuRW52UHJvZHVjdEludGVyZmFjZUVkaXQiLCJvcGVuIiwiZGJJbnRlcmZhY2UiLCJpbnRlcmZhY2VzIiwiZW52X3Byb2R1Y3RfaW50ZXJmYWNlX3N0YXR1cyIsIiR1aWJNb2RhbEluc3RhbmNlIiwiZGJJbnRlcmZhY2VDdHJsIiwiZGJJbnRlcmZhY2VEYXRhIiwiZGJfaG9zdCIsImRiX2Nvbm5lY3Rpb25fc3RyaW5nIiwicG9zdEdlbmVyaWNBUEkiLCJpbnRlcmZhY2VOYW1lIiwiaW50ZXJmYWNlX25hbWUiLCJlbnZpcm9ubWVudE5hbWUiLCJkYl9wb3J0IiwiZGJfdXNlciIsImRiX3Bhc3N3b3JkIiwiZGJfc2NoZW1hIiwiZGVjcnlwdEludGVyZmFjZVBhc3N3b3JkIiwicGFzc3dvcmREZWNyeXB0IiwiaW50ZXJmYWNlVHlwZSIsInNhdmVEQkludGVyZmFjZSIsIm5ld0ludGVyZmFjZSIsImRlbGV0ZWQiLCJjbG9zZSIsInRlc3REQkludGVyZmFjZUNvbm4iLCJyZXF1ZXN0RGF0YSIsImludGVyZmFjZV9kYl90eXBlIiwiaW50ZXJmYWNlX3R5cGUiLCJ0ZXN0SW50ZXJmYWNlRGJDb25uZWN0aW9uIiwidGVzdERiQ29ublN1Y2Nlc3MiLCJ0ZXN0REJJbnRlcmZhY2VDb25uUmVzdWx0IiwiY29udHJvbGxlckFzIiwib3Blbk5ld1Byb2R1Y3QiLCJnZXRQcm9kdWN0c1dpdGhMVXMiLCJhbGxQcm9kdWN0cyIsImVudlByb2R1Y3RzIiwibmV3RW52UHJvZHVjdHMiLCJyZWplY3QiLCJwcm9kdWN0IiwiaW5pdCIsImNob3Nlbkdsb2JhbCIsImdsb2JhbE5hbWUiLCJnbG9iYWxMb2dpY2FsVW5pdHMiLCJsdUxpc3QiLCJnbG9iYWxfdmFsdWUiLCJnbG9iYWxMb2dpY2FsVW5pdENoYW5nZWQiLCJjaG9zZW5Mb2dpY2FsVW5pdCIsIm9wZW5OZXdHbG9iYWwiLCJnbG9iYWwiLCJkYXRhX2NlbnRlcl9uYW1lIiwiZGF0YUNlbnRlciIsImFkZFByb2R1Y3RXYXJuaW5nIiwibHVfZGNfbmFtZSIsImRjX25hbWUiLCJwcm9kdWN0Q2hhbmdlZCIsInByb2R1Y3RfdmVyc2lvbnMiLCJsdXMiLCJhZGRQcm9kdWN0IiwiYWRkUHJvZHVjdEluUHJvZ3Jlc3MiLCJwb3N0RW52UHJvZHVjdCIsIm9wZW5Qcm9kdWN0RnVsbFZpZXciLCJwcm9kdWN0RGF0YUZ1bGxWaWV3IiwicHJvZHVjdF9zdGF0dXMiLCJwcm9kdWN0X3ZlbmRvciIsInByb2R1Y3RfZGVzY3JpcHRpb24iLCJtb2R1bGUiLCJkaXJlY3RpdmUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLHVCQTBoRUwsTUFBTyxDQUNIQyxTQUFVLElBQ1ZDLFlBMWhFVyxzQ0EyaEVYQyxNQUFPLENBQ0hDLFFBQVMsS0FFYkMsV0E1aEVhLFNBQVVDLE9BQVFDLFdBQVlDLG1CQUFvQkMsT0FBUUMsV0FBWUMsU0FBVUMsWUFBYUMsZ0JBQWlCQyxpQkFB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LGdCQUFnQitVLFlBQVlDLFdBQVksd0JBQ3JFOVYsV0FBV3VQLGVBQWV6TyxnQkFBZ0JDLGdCQUFnQmdILGdCQUFnQnpHLE1BQUssU0FBVUMsVUFDM0QsV0FBdEJBLFNBQVN5RyxZQUNUbEgsZ0JBQWdCME8sU0FBV2pPLFNBQVNFLE9BQ3BDWCxnQkFBZ0I0TyxtQkFBbUJtQyxZQUFXLFNBQVUzSSxVQUNyRCxPQUdYcEksZ0JBQWdCZ2Esc0JBQXVCLEVBQ3ZDaGEsZ0JBQWdCOEcsbUJBR2hCOUcsZ0JBQWdCZ2Esc0JBQXVCLEVBQ3ZDNWEsT0FBT3lGLE1BQU0sWUFBYzdFLGdCQUFnQitVLFlBQVlDLFdBQVksc0JBQXdCdlUsU0FBU2lKLGVBS2hIMUosZ0JBQWdCa2Esb0JBQXNCLFdBQ2xDbGEsZ0JBQWdCbWEsb0JBQXNCLENBQ2xDbkYsV0FBWWhWLGdCQUFnQitVLFlBQVlDLFdBQ3hDZSxhQUFjL1YsZ0JBQWdCK1UsWUFBWWdCLGFBQzFDcUUsZUFBZ0JwYSxnQkFBZ0IrVSxZQUFZcUYsZUFDNUNDLGVBQWdCcmEsZ0JBQWdCK1UsWUFBWXNGLGVBQzVDUixpQkFBa0I3WixnQkFBZ0IrVSxZQUFZOEUsaUJBQzlDUyxvQkFBcUJ0YSxnQkFBZ0IrVSxZQUFZdUYscUJBRXJEcmIsT0FBT0YsUUFBUStWLFlBQVk5VSxnQkFBZ0JtYSx1QkFXL0M5QixhQUFjLG1CQUt0QmxZLFFBQ0tvYSxPQUFPLFVBQ1BDLFVBQVUsdUJBQXdCN2IiLCJmaWxlIjoiZGlyZWN0aXZlcy9lbnZpcm9ubWVudHMvZW52aXJvbm1lbnREaXJlY3RpdmUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlbnZpcm9ubWVudERpcmVjdGl2ZSgpIHtcblxuICAgIHZhciB0ZW1wbGF0ZSA9IFwidmlld3MvZW52aXJvbm1lbnRzL2Vudmlyb25tZW50Lmh0bWxcIjtcblxuICAgIHZhciBjb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgVERNU2VydmljZSwgQnJlYWRDcnVtYnNTZXJ2aWNlLCB0b2FzdHIsIFN3ZWV0QWxlcnQsICR0aW1lb3V0LCBBdXRoU2VydmljZSwgRFRDb2x1bW5CdWlsZGVyLCBEVE9wdGlvbnNCdWlsZGVyLCAkcSwgJGNvbXBpbGUsICR1aWJNb2RhbCwgJGh0dHApIHtcblxuICAgICAgICB0aGlzLl9zY29wZSA9ICRzY29wZTtcblxuICAgICAgICB2YXIgZW52aXJvbm1lbnRDdHJsID0gdGhpcztcbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YSA9ICRzY29wZS5jb250ZW50LmVudmlyb25tZW50RGF0YTtcbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YU9yaWcgPSBhbmd1bGFyLmNvcHkoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YSk7XG4gICAgICAgIGVudmlyb25tZW50Q3RybC5wYWdlRGlzcGxheSA9ICdlbnZpcm9ubWVudCc7XG4gICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZUeXBlcyA9IFsnQm90aCcsJ1NvdXJjZScsJ1RhcmdldCddO1xuXG4gICAgICAgIFRETVNlcnZpY2UuZ2V0RmFicmljUm9sZXMoJ293bmVyJykudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5vd25lckZhYnJpY1JvbGVzID0gcmVzcG9uc2UucmVzdWx0IHx8IFtdO1xuICAgICAgICB9KTtcblxuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5zeW5jTW9kZXMgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGV4dDogJ0RvIG5vdCBTeW5jJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ09GRidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGV4dDogJ0Fsd2F5cyBTeW5jJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ0ZPUkNFJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgXTtcblxuXG4gICAgICAgIFxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWRkT3duZXIgPSBmdW5jdGlvbihuZXdPd25lcil7XG4gICAgICAgICAgICBpZiAobmV3T3duZXIpe1xuICAgICAgICAgICAgICAgIGlmICghZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMpe1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLm93bmVycyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXy5maW5kSW5kZXgoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMse3VzZXJfaWQ6IG5ld093bmVyfSkgPj0gMCl7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hZGRPd25lckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogbmV3T3duZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1aWQ6IG5ld093bmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogbmV3T3duZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogbmV3T3duZXIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsT3duZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6IG5ld093bmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdWlkOiBuZXdPd25lcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfaWQ6IG5ld093bmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWU6IG5ld093bmVyLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWRkVGVzdGVyID0gZnVuY3Rpb24obmV3VGVzdGVyLGFsbFRlc3RlcnMpe1xuICAgICAgICAgICAgaWYgKG5ld1Rlc3Rlcil7XG4gICAgICAgICAgICAgICAgaWYgKCFlbnZpcm9ubWVudEN0cmwudGVzdGVycyl7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC50ZXN0ZXJzID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChfLmZpbmRJbmRleChlbnZpcm9ubWVudEN0cmwudGVzdGVycyx7dXNlcl9pZDogbmV3VGVzdGVyfSkgPj0gMCl7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hZGROZXdUZXN0ZXJFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGFsbFRlc3RlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogbmV3VGVzdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdWlkOiBuZXdUZXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiBuZXdUZXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogbmV3VGVzdGVyLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnRlc3RlcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogbmV3VGVzdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgdWlkOiBuZXdUZXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiBuZXdUZXN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogbmV3VGVzdGVyLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmlzT3BlbjEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmluaXRBZGROZXdPd25lclBvcHVwID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vIGVudmlyb25tZW50Q3RybC5hZGRPd25lckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBlbnZpcm9ubWVudEN0cmwub3duZXJUb0FkZCA9ICcnO1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmlzT3BlbiA9ICFlbnZpcm9ubWVudEN0cmwuaXNPcGVuO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5pbml0QWRkTmV3VGVzdGVyUG9wdXAgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gZW52aXJvbm1lbnRDdHJsLmFkZE5ld1Rlc3RlckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBlbnZpcm9ubWVudEN0cmwubmV3VGVzdGVyVG9BZGQgPSAnJztcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5pc09wZW4xID0gIWVudmlyb25tZW50Q3RybC5pc09wZW4xO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5jbG9zZUFkZFRlc3Rlck1vZGFsID0gKCkgPT4ge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmlzT3BlbjEgPSBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmNsb3NlQWRkT3duZXJNb2RhbCA9ICgpID0+IHtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5pc09wZW4gPSBmYWxzZVxuICAgICAgICB9XG5cblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuc2F2ZVVzZXJzQW5kR3JvdXBzVGVzdGVyID0gKHVzZXIsdXNlckN1c3RvbSx1c2VyR3JvdXAsIGFsbFVzZXJzKSA9PiB7XG4gICAgICAgICAgICBpZiAoYWxsVXNlcnMgJiYgXy5maW5kSW5kZXgoZW52aXJvbm1lbnRDdHJsLnRlc3RlcnMsIHt1c2VyX2lkOiAnLTEnfSkgPCAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsVXNlcnNPYmogPSBfLmZpbmQoZW52aXJvbm1lbnRDdHJsLmFsbFRlc3RlcnMse3VzZXJfaWQ6ICctMSd9KTtcbiAgICAgICAgICAgICAgICBpZiAoYWxsVXNlcnNPYmope1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwudGVzdGVycy5wdXNoKGFsbFVzZXJzT2JqKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmKCFhbGxVc2VycyAmJiBfLmZpbmRJbmRleChlbnZpcm9ubWVudEN0cmwudGVzdGVycywge3VzZXJfaWQ6ICctMSd9KSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxsVXNlcnNJbmRleCA9IF8uZmluZEluZGV4KGVudmlyb25tZW50Q3RybC50ZXN0ZXJzLHt1c2VyX2lkOiAnLTEnfSk7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnRlc3RlcnMuc3BsaWNlKGFsbFVzZXJzSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdVc2VyID0gYW5ndWxhci5jb3B5KHVzZXIpO1xuICAgICAgICAgICAgICAgIG5ld1VzZXIudXNlcl90eXBlID0gJ0lEJztcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwudGVzdGVycy5wdXNoKG5ld1VzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXJDdXN0b20pIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwudGVzdGVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlckN1c3RvbSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9uYW1lOiB1c2VyQ3VzdG9tLFxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckN1c3RvbSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl90eXBlOiAnSUQnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuYWN0aXZpdHlQYW5lbCA9PT0gJ25ld1JvbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlckN1c3RvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfbmFtZTogdXNlckN1c3RvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyQ3VzdG9tLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl90eXBlOiAnSUQnLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzUm9sZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHVzZXJDdXN0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyX25hbWU6IHVzZXJDdXN0b20sXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckN1c3RvbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfdHlwZTogJ0lEJyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXJHcm91cCkge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC50ZXN0ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfbmFtZTogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX3R5cGU6ICdHUk9VUCcsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuYWN0aXZpdHlQYW5lbCA9PT0gJ25ld1JvbGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9uYW1lOiB1c2VyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl90eXBlOiAnR1JPVVAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFsbFRlc3RlcnNSb2xlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl9uYW1lOiB1c2VyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlcl90eXBlOiAnR1JPVVAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycyA9IF8udW5pcXVlKGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzLCh0ZXN0ZXIpPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0ZXN0ZXIudXNlcl9pZH1fJHt0ZXN0ZXIudXNlcl90eXBlfWA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzUm9sZSA9IF8udW5pcXVlKGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzUm9sZSwodGVzdGVyKT0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGVzdGVyLnVzZXJfaWR9XyR7dGVzdGVyLnVzZXJfdHlwZX1gO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuaXNPcGVuMSA9IGZhbHNlO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLnNhdmVVc2Vyc0FuZEdyb3VwcyA9ICh1c2VyLHVzZXJDdXN0b20sdXNlckdyb3VwKSA9PiB7XG4gICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1VzZXIgPSBhbmd1bGFyLmNvcHkodXNlcik7XG4gICAgICAgICAgICAgICAgbmV3VXNlci51c2VyX3R5cGUgPSAnSUQnO1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEub3duZXJzLnB1c2gobmV3VXNlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodXNlckN1c3RvbSkge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEub3duZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VyQ3VzdG9tLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX25hbWU6IHVzZXJDdXN0b20sXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyQ3VzdG9tLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX3R5cGU6ICdJRCcsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFsbE93bmVycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9pZDogdXNlckN1c3RvbSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9uYW1lOiB1c2VyQ3VzdG9tLFxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckN1c3RvbSxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl90eXBlOiAnSUQnLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXJHcm91cCkge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEub3duZXJzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiB1c2VyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfbmFtZTogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogdXNlckdyb3VwLFxuICAgICAgICAgICAgICAgICAgICB1c2VyX3R5cGU6ICdHUk9VUCcsXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxPd25lcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIHVzZXJfaWQ6IHVzZXJHcm91cCxcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9uYW1lOiB1c2VyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lOiB1c2VyR3JvdXAsXG4gICAgICAgICAgICAgICAgICAgIHVzZXJfdHlwZTogJ0dST1VQJyxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXA6IHRydWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsT3duZXJzID0gXy51bmlxdWUoZW52aXJvbm1lbnRDdHJsLmFsbE93bmVycywob3duZXIpPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtvd25lci51c2VyX2lkfV8ke293bmVyLnVzZXJfdHlwZX1gO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmFsbG93X3dyaXRlICYmIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuYWxsb3dfcmVhZCkge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudlR5cGUgPSAnU291cmNlJztcbiAgICAgICAgfSBlbHNlIGlmIChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmFsbG93X3dyaXRlICYmICFlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmFsbG93X3JlYWQpIHtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZUeXBlID0gJ1RhcmdldCc7XG4gICAgICAgIH0gZWxzZSBpZiAoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5hbGxvd193cml0ZSAmJiBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmFsbG93X3JlYWQpIHtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZUeXBlID0gJ0JvdGgnO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuc3luY19tb2RlID09PSAnT04nKXtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuc3luY19tb2RlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5pc0ZsdXhNb2RlID0gQXV0aFNlcnZpY2UuaXNGbHV4TW9kZSgpO1xuXG4gICAgICAgIHZhciB1c2VyUm9sZSA9IEF1dGhTZXJ2aWNlLmdldFJvbGUoKTtcbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLnNob3dFbnZpcm9ubWVudCA9IHRydWU7XG4gICAgICAgIGVudmlyb25tZW50Q3RybC5kaXNhYmxlT3duZXJzQ2hhbmdlID0gKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfc3RhdHVzID09ICdJbmFjdGl2ZScgfHwgIUF1dGhTZXJ2aWNlLmF1dGhvcml6ZWRUb0VkaXQoMCkpO1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZUeXBlQ2hhbmdlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5lbnZUeXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5lbnZUeXBlLnRvTG93ZXJDYXNlKCkgPT0gJ3RhcmdldCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5hbGxvd193cml0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuYWxsb3dfcmVhZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW52aXJvbm1lbnRDdHJsLmVudlR5cGUudG9Mb3dlckNhc2UoKSA9PSAnc291cmNlJykge1xuICAgICAgICAgICAgICAgICAgICAvLyBObyBURE0gU291cmNlIGVudiBuYW1lIHdoZW4gRW52aXJvbm1lbnQgdHlwZSBpcyB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5hbGxvd193cml0ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmFsbG93X3JlYWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZW52aXJvbm1lbnRDdHJsLmVudlR5cGUudG9Mb3dlckNhc2UoKSA9PSAnYm90aCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5hbGxvd193cml0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuYWxsb3dfcmVhZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFRETVNlcnZpY2UuZ2V0R2VuZXJpY0FQSSgnd3NHZXRBbGxFbnZzJykudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYXZhaWxhYmxlU291cmNlRW52aXJvbm1lbnRzID0gXy5maWx0ZXIocmVzcG9uc2UucmVzdWx0LGZ1bmN0aW9uKGVudil7XG4gICAgICAgICAgICAgICAgaWYgKGVudiA9PSBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF8uZmluZEluZGV4KCRzY29wZS5jb250ZW50LmVudmlyb25tZW50cyx7ZW52aXJvbm1lbnRfbmFtZSA6IGVudixlbnZpcm9ubWVudF9zdGF0dXMgOiAnQWN0aXZlJ30pID49IDApe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lICYmIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSAhPSBcIlwiXG4gICAgICAgICAgICAgICAgJiYgZW52aXJvbm1lbnRDdHJsLmF2YWlsYWJsZVNvdXJjZUVudmlyb25tZW50cy5pbmRleE9mKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSkgPCAwKXtcbiAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJURE0gZW52aXJvbm1lbnQgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUgKyBcIiBpcyBubyBsb25nZXIgdmFsaWRcIiwgXCJQbGVhc2UgdXBkYXRlIHlvdXIgRW52aXJvbm1lbnRcIik7XG4gICAgICAgICAgICAgICAgLy8gZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5mYWJyaWNfZW52aXJvbm1lbnRfbmFtZSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG4gICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFbnZpcm9ubWVudFwiLFwiVW5hYmxlIHRvIGdldCBhdmFpbGFibGUgU291cmNlIEVudmlyb25tZW50XCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwudGFiQ2xpY2tlZCA9IGZ1bmN0aW9uIChuZXdUYWIpIHtcblxuICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5yb2xlRm9ybSkge1xuICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwucm9sZUZvcm0uJGRpcnR5KSB7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hc2tUb1NhdmVDaGFuZ2VzKCdSb2xlJywgbmV3VGFiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlbnZpcm9ubWVudEN0cmwucHJvZHVjdEZvcm0pIHtcbiAgICAgICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRDdHJsLnByb2R1Y3RGb3JtLiRkaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYXNrVG9TYXZlQ2hhbmdlcygnUHJvZHVjdCcsIG5ld1RhYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZW52aXJvbm1lbnRDdHJsLmdsb2JhbEZvcm0pIHsgLy8gZ2xvYmFsXG4gICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5nbG9iYWxGb3JtLiRkaXJ0eSkge1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYXNrVG9TYXZlQ2hhbmdlcygnR2xvYmFsJywgbmV3VGFiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hY3Rpdml0eVBhbmVsID0gJ1N1bW1hcnknO1xuICAgICAgICAgICAgcmV0dXJuIG5ld1RhYjtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuYXNrVG9TYXZlQ2hhbmdlcyA9IGZ1bmN0aW9uIChmb3JtLCBuZXdUYWIpIHtcbiAgICAgICAgICAgIHN3YWwoe1xuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJZb3UgaGF2ZSB1bnNhdmVkIGNoYW5nZXMuXCIsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiRG8geW91IHdhbnQgdG8gc2F2ZSBjaGFuZ2VzIGJlZm9yZSBjbG9zZT9cIixcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjREQ2QjU1XCIsXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk5vXCIsXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwiWWVzXCIsXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlT25Db25maXJtOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb246IFwiZmFsc2VcIixcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ2xhc3M6IFwiYW5pbWF0ZWQgZmFkZUluVXBcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGlzQ29uZmlybSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQ29uZmlybSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmb3JtKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdSb2xlJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuc2F2ZVJvbGVDaGFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdQcm9kdWN0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuc2F2ZVByb2R1Y3RDaGFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdHbG9iYWwnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5zYXZlR2xvYmFsQ2hhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2FsKFwiU2F2ZWQhXCIsIFwiWW91ciBjaGFuZ2VzIGhhdmUgYmVlbiBzYXZlZC5cIiwgXCJzdWNjZXNzXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzd2FsKFwiRGlzY2FyZCFcIiwgXCJZb3VyIGNoYW5nZXMgaGF2ZSBub3QgYmVlbiBzYXZlZCFcIiwgXCJlcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWN0aXZpdHlQYW5lbCA9ICdTdW1tYXJ5JztcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLm5ld1RhYiA9IG5ld1RhYjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuYmFyT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNjYWxlQmVnaW5BdFplcm86IHRydWUsXG4gICAgICAgICAgICBzY2FsZVNob3dHcmlkTGluZXM6IHRydWUsXG4gICAgICAgICAgICBzY2FsZUdyaWRMaW5lQ29sb3I6IFwicmdiYSgwLDAsMCwuMDUpXCIsXG4gICAgICAgICAgICBzY2FsZUdyaWRMaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICBiYXJTaG93U3Ryb2tlOiBmYWxzZSxcbiAgICAgICAgICAgIGJhclN0cm9rZVdpZHRoOiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhID0gZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmxvYWRpbmdTdW1tYXJ5ID0gdHJ1ZTtcbiAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0RW52aXJvbm1lbnRTdW1tYXJ5KGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuc3VtbWFyeURhdGEgPSByZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5zdW1tYXJ5RGF0YS5udW1iZXJPZkFMTFRlc3RlcnMudmFsdWUgPSBwYXJzZUludChlbnZpcm9ubWVudEN0cmwuc3VtbWFyeURhdGEubnVtYmVyT2ZBTExUZXN0ZXJzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnN1bW1hcnlEYXRhLnRhc2tzLmFjdGl2ZSA9IHBhcnNlSW50KGVudmlyb25tZW50Q3RybC5zdW1tYXJ5RGF0YS50YXNrcy5hY3RpdmUpO1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuc3VtbWFyeURhdGEudGFza3Mub25Ib2xkID0gcGFyc2VJbnQoZW52aXJvbm1lbnRDdHJsLnN1bW1hcnlEYXRhLnRhc2tzLm9uaG9sZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuc3VtbWFyeURhdGEucHJvY2Vzc2VkRW50aXRpZXMucHJvY2Vzc2VkZW50aXRpZXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnN1bW1hcnlEYXRhLnByb2Nlc3NlZEVudGl0aWVzLnByb2Nlc3NlZGVudGl0aWVzID0gcGFyc2VJbnQoZW52aXJvbm1lbnRDdHJsLnN1bW1hcnlEYXRhLnByb2Nlc3NlZEVudGl0aWVzLnByb2Nlc3NlZGVudGl0aWVzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5zdW1tYXJ5RGF0YS5wcm9jZXNzZWRFbnRpdGllcy5wcm9jZXNzZWRlbnRpdGllcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnRhc2tFeGVjdXRpb25zQmFyRGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsczogWydGYWlsZWQnLCAnUGVuZGluZycsICdQYXVzZWQnLCAnU3RvcHBlZCcsICdSdW5uaW5nJywgJ0NvbXBsZXRlZCddLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIkV4ZWN0aW9uIHN0YXR1c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxsQ29sb3I6IFwicmdiYSgyNiwxNzksMTQ4LDAuNSlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IFwicmdiYSgyNiwxNzksMTQ4LDAuOClcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0RmlsbDogXCJyZ2JhKDI2LDE3OSwxNDgsMC43NSlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0U3Ryb2tlOiBcInJnYmEoMjYsMTc5LDE0OCwxKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBbZW52aXJvbm1lbnRDdHJsLnN1bW1hcnlEYXRhLnRhc2tFeGVjdXRpb25TdGF0dXMuZmFpbGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnN1bW1hcnlEYXRhLnRhc2tFeGVjdXRpb25TdGF0dXMucGVuZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5zdW1tYXJ5RGF0YS50YXNrRXhlY3V0aW9uU3RhdHVzLnBhdXNlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5zdW1tYXJ5RGF0YS50YXNrRXhlY3V0aW9uU3RhdHVzLnN0b3BwZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuc3VtbWFyeURhdGEudGFza0V4ZWN1dGlvblN0YXR1cy5ydW5uaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnN1bW1hcnlEYXRhLnRhc2tFeGVjdXRpb25TdGF0dXMuY29tcGxldGVkXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmxvYWRpbmdTdW1tYXJ5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hY3Rpdml0eVBhbmVsID0gJ1N1bW1hcnknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9lcnJvclxuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwubG9hZGluZ1N1bW1hcnkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFjdGl2aXR5UGFuZWwgPSAnU3VtbWFyeSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2V0U3VtbWFyeURhdGEoKTtcblxuICAgICAgICBURE1TZXJ2aWNlLmdldEVudlRhc2tDb3VudChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC50YXNrc0NvdW50ID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnRhc2tzQ291bnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBURE1TZXJ2aWNlLmdldERhdGFDZW50ZXJzKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGF0YUNlbnRlcnMgPSAgXy51bmlxdWUocmVzcG9uc2UucmVzdWx0LCdkYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIFwiZmFpbGVkIHRvIGdldCBkYXRhIGNlbnRlcnNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIFRETVNlcnZpY2UuZ2V0RW52aXJvbm1lbnRPd25lcnMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLm93bmVycyA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldEZhYnJpY1JvbGVzKCd0ZXN0ZXInKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwudGVzdGVyRmFicmljUm9sZXMgPSAocmVzcG9uc2UucmVzdWx0IHx8IFtdKS5jb25jYXQoZW52aXJvbm1lbnRDdHJsLm93bmVyRmFicmljUm9sZXMuZmlsdGVyKG93bmVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfLmZpbmRJbmRleChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLm93bmVycywge3VzZXJfaWQ6IG93bmVyLCB1c2VyX3R5cGU6ICdHUk9VUCd9KSA8IDA7XG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAodXNlclJvbGUudHlwZSA9PSAnYWRtaW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuaXNPd25lciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3duZXJGb3VuZCA9IF8uZmluZChyZXNwb25zZS5yZXN1bHQsIHt1c2VyX2lkOiBBdXRoU2VydmljZS5nZXRVc2VySWQoKX0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW93bmVyRm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW52aXJvbm1lbnRDdHJsLm93bmVyRmFicmljUm9sZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmYWJyaWNSb2xlID0gZW52aXJvbm1lbnRDdHJsLm93bmVyRmFicmljUm9sZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3duZXJGb3VuZCA9IF8uZmluZChyZXNwb25zZS5yZXN1bHQsIHt1c2VyX2lkOiBmYWJyaWNSb2xlLCB1c2VyX3R5cGU6ICdHUk9VUCd9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3duZXJGb3VuZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmlzT3duZXIgPSBvd25lckZvdW5kID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kaXNhYmxlQ2hhbmdlID0gKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfc3RhdHVzID09PSAnSW5hY3RpdmUnIHx8ICFlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmlzT3duZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSwgXCJmYWlsZWQgdG8gZ2V0IG93bmVycyA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0VXNlcnNCeVBlcm1zc2lvbkdyb3Vwcygnb3duZXInKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFsbE93bmVycyA9IF8ubWFwKHJlc3BvbnNlLnJlc3VsdCxpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbS51c2VyX3R5cGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udXNlcl90eXBlID0gJ0lEJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMuZm9yRWFjaChvd25lciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5maW5kSW5kZXgoZW52aXJvbm1lbnRDdHJsLmFsbE93bmVycyx7dXNlcl9pZDogb3duZXIudXNlcl9pZH0pIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxPd25lcnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJfdHlwZTogb3duZXIudXNlcl90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5TmFtZTogb3duZXIudXNlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWlkOiBvd25lci51c2VyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiBvd25lci51c2VyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogb3duZXIudXNlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsIFwiZmFpbGVkIHRvIGdldCBvd25lcnM6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxPd25lcnMgPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLnNhdmVDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgVERNU2VydmljZS51cGRhdGVFbnZpcm9ubWVudChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLCBcIlVwZGF0ZWQgU3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udGVudC5vcGVuRW52aXJvbm1lbnRzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLCBcImZhaWxlZCB0byBVcGRhdGUgOiBcIiArIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5kZWxldGVFbnZpcm9ubWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwudGFza3NDb3VudCA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgU3dlZXRBbGVydC5zd2FsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkVudmlyb25tZW50IHdpbGwgYmUgZGVsZXRlZCBmcm9tIGFsbCByZWxlYXRlZCB0YXNrcy4gQXJlIHlvdSBzdXJlP1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiBcIiNERDZCNTVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIk5vXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIlllc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VPbkNvbmZpcm06IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbG9zZU9uQ2FuY2VsOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBcImZhbHNlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21DbGFzczogXCJhbmltYXRlZCBmYWRlSW5VcFwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChpc0NvbmZpcm0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNDb25maXJtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5kZWxldGVFbnZpcm9ubWVudChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSwgXCJkZWxldGVkIFN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udGVudC5vcGVuRW52aXJvbm1lbnRzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCA0MDApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLCBcImZhaWxlZCB0byBkZWxldGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmRlbGV0ZUVudmlyb25tZW50KGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLCBcImRlbGV0ZWQgU3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb250ZW50Lm9wZW5FbnZpcm9ubWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDQwMClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsIFwiZmFpbGVkIHRvIGRlbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIEJyZWFkQ3J1bWJzU2VydmljZS5icmVhZENydW1iQ2hhbmdlKDEpO1xuICAgICAgICBCcmVhZENydW1ic1NlcnZpY2UucHVzaCh7ZW52aXJvbm1lbnRJRDogZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lfSwgJ0VOVklST05NRU5UX0JSRUFEQ1JVTUInLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29udGVudC5vcGVuRW52aXJvbm1lbnQoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5vcGVuUm9sZXNNYW5hZ2VtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRlbnQub3BlblJvbGVzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5vcGVuUHJvZHVjdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuY29udGVudC5vcGVuUHJvZHVjdHMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmxvYWRpbmdUYWJsZVJvbGVzID0gdHJ1ZTtcbiAgICAgICAgVERNU2VydmljZS5nZXRFbnZpcm9ubWVudFJvbGVzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgLy9UT0RPIFNVQ0NFU1NcblxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5yb2xlcyA9IF8uc29ydEJ5KHJlc3BvbnNlLnJlc3VsdCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZS5yb2xlX2NyZWF0aW9uX2RhdGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5yb2xlcy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VSb2xlcyA9IHt9O1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdENvbHVtbnNSb2xlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdENvbHVtbkRlZnNSb2xlcyA9IFtdO1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5oZWFkZXJzUm9sZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3JvbGVfbmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnTmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAncm9sZV9kZXNjcmlwdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdyb2xlX2NyZWF0aW9uX2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0NyZWF0aW9uIERhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRlJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdyb2xlX2NyZWF0ZWRfYnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0NyZWF0ZWQgQnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdyb2xlX2xhc3RfdXBkYXRlZF9kYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdMYXN0IFVwZGF0ZSBEYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAncm9sZV9sYXN0X3VwZGF0ZWRfYnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1VwZGF0ZWQgQnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdyb2xlX3N0YXR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnU3RhdHVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICB2YXIgY2xpY2tBYmxlQ29sdW1uID0gZnVuY3Rpb24gKGRhdGEsIHR5cGUsIGZ1bGwsIG1ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8YSBuZy1jbGljaz1cImVudmlyb25tZW50Q3RybC5vcGVuUm9sZSgnICsgbWV0YS5yb3cgKyAnKVwiPicgKyBkYXRhICsgJzwvYT4nO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlVG9Mb2NhbERhdGUgPSBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgZnVsbCwgbWV0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KGRhdGEpLmZvcm1hdCgnRCBNTU0gWVlZWSwgSEg6bW0nKVxuICAgICAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNSb2xlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNSb2xlc1tpXS5jbGlja0FibGUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uc1JvbGVzLnB1c2goRFRDb2x1bW5CdWlsZGVyLm5ld0NvbHVtbihlbnZpcm9ubWVudEN0cmwuaGVhZGVyc1JvbGVzW2ldLmNvbHVtbikud2l0aFRpdGxlKGVudmlyb25tZW50Q3RybC5oZWFkZXJzUm9sZXNbaV0ubmFtZSkucmVuZGVyV2l0aChjbGlja0FibGVDb2x1bW4pKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChlbnZpcm9ubWVudEN0cmwuaGVhZGVyc1JvbGVzW2ldLnR5cGUgPT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRDb2x1bW5zUm9sZXMucHVzaChEVENvbHVtbkJ1aWxkZXIubmV3Q29sdW1uKGVudmlyb25tZW50Q3RybC5oZWFkZXJzUm9sZXNbaV0uY29sdW1uKS53aXRoVGl0bGUoZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNSb2xlc1tpXS5uYW1lKS5yZW5kZXJXaXRoKGNoYW5nZVRvTG9jYWxEYXRlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRDb2x1bW5zUm9sZXMucHVzaChEVENvbHVtbkJ1aWxkZXIubmV3Q29sdW1uKGVudmlyb25tZW50Q3RybC5oZWFkZXJzUm9sZXNbaV0uY29sdW1uKS53aXRoVGl0bGUoZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNSb2xlc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZ2V0VGFibGVEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGVudmlyb25tZW50Q3RybC5yb2xlcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRPcHRpb25zUm9sZXMgPSBEVE9wdGlvbnNCdWlsZGVyLmZyb21GblByb21pc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGFibGVEYXRhKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhET00oJ2xUZmdpdHAnKVxuICAgICAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignY3JlYXRlZFJvdycsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29tcGlsaW5nIHNvIHdlIGNhbiBiaW5kIEFuZ3VsYXIgZGlyZWN0aXZlIHRvIHRoZSBEVFxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbXBpbGUoYW5ndWxhci5lbGVtZW50KHJvdykuY29udGVudHMoKSkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3Njcm9sbFgnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2FhU29ydGluZycsIFs2LCAnYXNjJ10pXG4gICAgICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdsZW5ndGhDaGFuZ2UnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3BhZ2luZycsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignc2VhcmNoaW5nJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2luZm8nLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oXCJjYXNlSW5zZW5zaXRpdmVcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3NlYXJjaCcsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FzZUluc2Vuc2l0aXZlXCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdE9wdGlvbnNSb2xlcy53aXRoTGlnaHRDb2x1bW5GaWx0ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgMCA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAxIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDIgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgMyA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IF8ubWFwKF8udW5pcXVlKF8ubWFwKGVudmlyb25tZW50Q3RybC5yb2xlcywgJ3JvbGVfY3JlYXRlZF9ieScpKSxmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dmFsdWUgOiBlbCxsYWJlbCA6ZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICA0IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDUgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBfLm1hcChfLnVuaXF1ZShfLm1hcChlbnZpcm9ubWVudEN0cmwucm9sZXMsICdyb2xlX2xhc3RfdXBkYXRlZF9ieScpKSxmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dmFsdWUgOiBlbCxsYWJlbCA6ZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICA2IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogJ0FjdGl2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIDogXCJJbmFjdGl2ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgOiBcIkluYWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgOiBcIkFjdGl2ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwgOiBcIkFjdGl2ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUNhbGxiYWNrUm9sZXMgPSBmdW5jdGlvbiAoZHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUm9sZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZVJvbGVzKGR0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUm9sZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZVJvbGVzID0gZHRJbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUm9sZXMuY2hhbmdlRGF0YSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZVJvbGVzLmNoYW5nZURhdGEoZ2V0VGFibGVEYXRhKCkpO1xuXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmxvYWRpbmdUYWJsZVJvbGVzID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL1RPRE8gRVJST1JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgVERNU2VydmljZS5nZXRFbnZHbG9iYWxzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG5cbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2xvYmFscyA9IF8uc29ydEJ5KHJlc3BvbnNlLnJlc3VsdCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZS51cGRhdGVfZGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdsb2JhbHMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlR2xvYmFscyA9IHt9O1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdENvbHVtbnNHbG9iYWxzID0gW107XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uRGVmc0dsb2JhbHMgPSBbXTtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuaGVhZGVyc0dsb2JhbHMgPSBbXG4gICAgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29sdW1uOiAnZW52aXJvbm1lbnRfaWQnLFxuICAgICAgICAgICAgICAgICAgICAvLyBuYW1lOiAnSUQnLFxuICAgICAgICAgICAgICAgICAgICAvLyBjbGlja0FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnZ2xvYmFsX25hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ05hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdnbG9iYWxfdmFsdWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1ZhbHVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAndXBkYXRlX2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0xhc3QgVXBkYXRlIGRhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICd1cGRhdGVkX2J5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdVcGRhdGVkIEJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNsaWNrQWJsZUNvbHVtbiA9IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBmdWxsLCBtZXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGEgbmctY2xpY2s9XCJlbnZpcm9ubWVudEN0cmwub3Blbkdsb2JhbCgnICsgbWV0YS5yb3cgKyAnKVwiPicgKyBkYXRhICsgJzwvYT4nO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlVG9Mb2NhbERhdGUgPSBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgZnVsbCwgbWV0YSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtb21lbnQoZGF0YSkuZm9ybWF0KCdEIE1NTSBZWVlZLCBISDptbScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNHbG9iYWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuaGVhZGVyc0dsb2JhbHNbaV0uY2xpY2tBYmxlID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdENvbHVtbnNHbG9iYWxzLnB1c2goRFRDb2x1bW5CdWlsZGVyLm5ld0NvbHVtbihlbnZpcm9ubWVudEN0cmwuaGVhZGVyc0dsb2JhbHNbaV0uY29sdW1uKS53aXRoVGl0bGUoZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNHbG9iYWxzW2ldLm5hbWUpLnJlbmRlcldpdGgoY2xpY2tBYmxlQ29sdW1uKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNHbG9iYWxzW2ldLnR5cGUgPT0gJ2RhdGUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRDb2x1bW5zR2xvYmFscy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4oZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNHbG9iYWxzW2ldLmNvbHVtbikud2l0aFRpdGxlKGVudmlyb25tZW50Q3RybC5oZWFkZXJzR2xvYmFsc1tpXS5uYW1lKS5yZW5kZXJXaXRoKGNoYW5nZVRvTG9jYWxEYXRlKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRDb2x1bW5zR2xvYmFscy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4oZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNHbG9iYWxzW2ldLmNvbHVtbikud2l0aFRpdGxlKGVudmlyb25tZW50Q3RybC5oZWFkZXJzR2xvYmFsc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZ2V0VGFibGVEYXRhR2xvYmFscyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShlbnZpcm9ubWVudEN0cmwuZ2xvYmFscyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRPcHRpb25zR2xvYmFscyA9IERUT3B0aW9uc0J1aWxkZXIuZnJvbUZuUHJvbWlzZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRUYWJsZURhdGFHbG9iYWxzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhET00oJ2xUZmdpdHAnKVxuICAgICAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignY3JlYXRlZFJvdycsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29tcGlsaW5nIHNvIHdlIGNhbiBiaW5kIEFuZ3VsYXIgZGlyZWN0aXZlIHRvIHRoZSBEVFxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbXBpbGUoYW5ndWxhci5lbGVtZW50KHJvdykuY29udGVudHMoKSkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3Njcm9sbFgnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2FhU29ydGluZycsIFtlbnZpcm9ubWVudEN0cmwuaGVhZGVyc0dsb2JhbHMubGVuZ3RoIC0gMiwgJ2Rlc2MnXSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2xlbmd0aENoYW5nZScsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAud2l0aE9wdGlvbigncGFnaW5nJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2hpbmcnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2luZm8nLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUNhbGxiYWNrR2xvYmFscyA9IGZ1bmN0aW9uIChkdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VHbG9iYWxzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VHbG9iYWxzKGR0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlR2xvYmFscykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlR2xvYmFscyA9IGR0SW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUdsb2JhbHMuY2hhbmdlRGF0YSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUdsb2JhbHMuY2hhbmdlRGF0YShnZXRUYWJsZURhdGFHbG9iYWxzKCkpO1xuXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmxvYWRpbmdUYWJsZUdsb2JhbHMgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBcIkZhaWxkIHRvIGdldCBHbG9iYWxzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBURE1TZXJ2aWNlLmdldEVudlByb2R1Y3RzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG5cbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdHMgPSBfLnNvcnRCeShyZXNwb25zZS5yZXN1bHQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUuY3JlYXRpb25fZGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnByb2R1Y3RzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZVByb2R1Y3RzID0ge307XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uc1Byb2R1Y3RzID0gW107XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uRGVmc1Byb2R1Y3RzID0gW107XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNQcm9kdWN0cyA9IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAncHJvZHVjdF9uYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdOYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdkYXRhX2NlbnRlcl9uYW1lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdEYXRhIENlbnRlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3Byb2R1Y3RfdmVyc2lvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnVmVyc2lvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ2NyZWF0ZWRfYnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0NyZWF0ZWQgQnknLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdjcmVhdGlvbl9kYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdDcmVhdGlvbiBEYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnbGFzdF91cGRhdGVkX2J5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdVcGRhdGVkIEJ5JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnbGFzdF91cGRhdGVkX2RhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1VwZGF0ZSBEYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGF0ZSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnc3RhdHVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgIHZhciBjbGlja0FibGVDb2x1bW4gPSBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgZnVsbCwgbWV0YSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxhIG5nLWNsaWNrPVwiZW52aXJvbm1lbnRDdHJsLm9wZW5Qcm9kdWN0KCcgKyBtZXRhLnJvdyArICcpXCI+JyArIGRhdGEgKyAnPC9hPic7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VUb0xvY2FsRGF0ZSA9IGZ1bmN0aW9uIChkYXRhLCB0eXBlLCBmdWxsLCBtZXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudChkYXRhKS5mb3JtYXQoJ0QgTU1NIFlZWVksIEhIOm1tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnZpcm9ubWVudEN0cmwuaGVhZGVyc1Byb2R1Y3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuaGVhZGVyc1Byb2R1Y3RzW2ldLmNsaWNrQWJsZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRDb2x1bW5zUHJvZHVjdHMucHVzaChEVENvbHVtbkJ1aWxkZXIubmV3Q29sdW1uKGVudmlyb25tZW50Q3RybC5oZWFkZXJzUHJvZHVjdHNbaV0uY29sdW1uKS53aXRoVGl0bGUoZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNQcm9kdWN0c1tpXS5uYW1lKS5yZW5kZXJXaXRoKGNsaWNrQWJsZUNvbHVtbikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGVudmlyb25tZW50Q3RybC5oZWFkZXJzUHJvZHVjdHNbaV0udHlwZSA9PSAnZGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdENvbHVtbnNQcm9kdWN0cy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4oZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNQcm9kdWN0c1tpXS5jb2x1bW4pLndpdGhUaXRsZShlbnZpcm9ubWVudEN0cmwuaGVhZGVyc1Byb2R1Y3RzW2ldLm5hbWUpLnJlbmRlcldpdGgoY2hhbmdlVG9Mb2NhbERhdGUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdENvbHVtbnNQcm9kdWN0cy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4oZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNQcm9kdWN0c1tpXS5jb2x1bW4pLndpdGhUaXRsZShlbnZpcm9ubWVudEN0cmwuaGVhZGVyc1Byb2R1Y3RzW2ldLm5hbWUpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBnZXRUYWJsZURhdGFQcm9kdWN0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShlbnZpcm9ubWVudEN0cmwucHJvZHVjdHMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0T3B0aW9uc1Byb2R1Y3RzID0gRFRPcHRpb25zQnVpbGRlci5mcm9tRm5Qcm9taXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldFRhYmxlRGF0YVByb2R1Y3RzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhET00oJ2xUZmdpdHAnKVxuICAgICAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignY3JlYXRlZFJvdycsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29tcGlsaW5nIHNvIHdlIGNhbiBiaW5kIEFuZ3VsYXIgZGlyZWN0aXZlIHRvIHRoZSBEVFxuICAgICAgICAgICAgICAgICAgICAgICAgJGNvbXBpbGUoYW5ndWxhci5lbGVtZW50KHJvdykuY29udGVudHMoKSkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2FhU29ydGluZycsIFs3LCAnYXNjJ10pXG4gICAgICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzY3JvbGxYJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2hpbmcnLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAud2l0aE9wdGlvbihcImNhc2VJbnNlbnNpdGl2ZVwiLHRydWUpXG4gICAgICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2gnLHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY2FzZUluc2Vuc2l0aXZlXCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdE9wdGlvbnNQcm9kdWN0cy53aXRoTGlnaHRDb2x1bW5GaWx0ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgMCA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAxIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzZWxlY3QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXy5tYXAoXy51bmlxdWUoXy5tYXAoZW52aXJvbm1lbnRDdHJsLnByb2R1Y3RzLCAnZGF0YV9jZW50ZXJfbmFtZScpKSxmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dmFsdWUgOiBlbCxsYWJlbCA6ZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAyIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDMgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBfLm1hcChfLnVuaXF1ZShfLm1hcChlbnZpcm9ubWVudEN0cmwucHJvZHVjdHMsICdjcmVhdGVkX2J5JykpLGZ1bmN0aW9uKGVsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt2YWx1ZSA6IGVsLGxhYmVsIDplbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDQgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgNSA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2VsZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IF8ubWFwKF8udW5pcXVlKF8ubWFwKGVudmlyb25tZW50Q3RybC5wcm9kdWN0cywgJ2xhc3RfdXBkYXRlZF9ieScpKSxmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7dmFsdWUgOiBlbCxsYWJlbCA6ZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICA2IDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIDcgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiAnQWN0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgOiBcIkluYWN0aXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA6IFwiSW5hY3RpdmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA6IFwiQWN0aXZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbCA6IFwiQWN0aXZlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlQ2FsbGJhY2tQcm9kdWN0cyA9IGZ1bmN0aW9uIChkdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24oZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VQcm9kdWN0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUHJvZHVjdHMoZHRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0RlZmluZWQoZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VQcm9kdWN0cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUHJvZHVjdHMgPSBkdEluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VQcm9kdWN0cy5jaGFuZ2VEYXRhICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUHJvZHVjdHMuY2hhbmdlRGF0YShnZXRUYWJsZURhdGFQcm9kdWN0cygpKTtcblxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5sb2FkaW5nVGFibGVQcm9kdWN0cyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIFwiRmFpbGVkIHRvIGdldCBwcm9kdWN0c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJlZnJlc2hCdXNuaXNFbnRpdGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0QnVzaW5lc3NFbnRpdGllc0ZvckVudlByb2R1Y3RzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgICB2YXIgYWxsQnVzaW5lc3NFbnRpdGllcyA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxCdXNpbmVzc0VudGl0aWVzID0gYWxsQnVzaW5lc3NFbnRpdGllcztcbiAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5nZXRVc2Vyc0J5UGVybXNzaW9uR3JvdXBzKCdhZG1pbicpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRtaW5zID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGx1c2VycyA9IGFkbWlucztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0RW52VGVzdGVycyhlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ZXJzID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsdXNlcnMgPSB0ZXN0ZXJzLmNvbmNhdChlbnZpcm9ubWVudEN0cmwuYWxsdXNlcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldEVudmlyb25tZW50T3duZXJzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG93bmVycyA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldEZhYnJpY1JvbGVzKCd0ZXN0ZXInKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwudGVzdGVyRmFicmljUm9sZXMgPSAocmVzcG9uc2UucmVzdWx0IHx8IFtdKS5jb25jYXQoZW52aXJvbm1lbnRDdHJsLm93bmVyRmFicmljUm9sZXMuZmlsdGVyKG93bmVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfLmZpbmRJbmRleChvd25lcnMsIHt1c2VyX2lkOiBvd25lciwgdXNlcl90eXBlOiAnR1JPVVAnfSkgPCAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvd25lcnNOZXdTdHJ1Y3RBcnJheSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lcnMuZm9yRWFjaChmdW5jdGlvbiAob3duZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbk93bmVyID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbk93bmVyLnVpZCA9IG93bmVyLnVzZXJfaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvd25lcnNOZXdTdHJ1Y3RBcnJheS5wdXNoKGFuT3duZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsdXNlcnMgPSBvd25lcnNOZXdTdHJ1Y3RBcnJheS5jb25jYXQoZW52aXJvbm1lbnRDdHJsLmFsbHVzZXJzKTsgLy8gcHV0IFRlc3RlcnMgYW5kIE93bmVycyBpbiAxIGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRmFpbGVkIHRvIGdldCBFbnZpcm9ubWVudCBPd25lcnNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkZhaWxlZCB0byBnZXQgRW52aXJvbm1lbnQgVGVzdGVyc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGFsbCBBZG1pbnNcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJGYWlsZWQgdG8gZ2V0IEJ1c2luZXNzIEVudGl0aWVzXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICAgIGVudmlyb25tZW50Q3RybC5yZWZyZXNoQnVzbmlzRW50aXRpZXMoKTtcblxuICAgICAgICAvLyBURE1TZXJ2aWNlLmdldEVudkV4Y2x1c2lvbkxpc3RzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIC8vICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG5cbiAgICAgICAgLy8gICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdHMgPSBfLnNvcnRCeShyZXNwb25zZS5yZXN1bHQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUuY3JlYXRpb25fZGF0ZSk7XG4gICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3RzLnJldmVyc2UoKTtcbiAgICAgICAgLy8gICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUV4Y2x1c2lvbkxpc3RzID0ge307XG4gICAgICAgIC8vICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uc0V4Y2x1c2lvbkxpc3RzID0gW107XG4gICAgICAgIC8vICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uRGVmc0V4Y2x1c2lvbkxpc3RzID0gW107XG4gICAgICAgIC8vICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNFeGNsdXNpb25MaXN0cyA9IFtcbiAgICAgICAgLy8gICAgICAgICAgICAge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgY29sdW1uOiAnZXhjbHVzaW9uX2xpc3QnLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgbmFtZTogJ0V4Y2x1c2lvbiBMaXN0JyxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogdHJ1ZVxuICAgICAgICAvLyAgICAgICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAgICAgICB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjb2x1bW46ICdiZV9uYW1lJyxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIG5hbWU6ICdCdXNpbmVzcyBFbnRpdHknLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAvLyAgICAgICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAgICAgICB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjb2x1bW46ICdyZXF1ZXN0ZWRfYnknLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgbmFtZTogJ1JlcXVlc3RlZCBCeScsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgIC8vICAgICAgICAgICAgIH0sXG4gICAgICAgIC8vICAgICAgICAgICAgIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGNvbHVtbjogJ3VwZGF0ZWRfYnknLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgbmFtZTogJ1VwZGF0ZWQgQnknLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAvLyAgICAgICAgICAgICB9LFxuICAgICAgICAvLyAgICAgICAgICAgICB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBjb2x1bW46ICd1cGRhdGVfZGF0ZScsXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBuYW1lOiAnVXBkYXRlIERhdGUnLFxuICAgICAgICAvLyAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIHR5cGU6ICdkYXRlJ1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgXTtcblxuICAgICAgICAvLyAgICAgICAgIHZhciBjbGlja0FibGVDb2x1bW4gPSBmdW5jdGlvbiAoZGF0YSwgdHlwZSwgZnVsbCwgbWV0YSkge1xuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiA0MCkge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEuc3Vic3RyaW5nKDAsIDQwKSArICcuLi4nO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiAnPGEgbmctY2xpY2s9XCJlbnZpcm9ubWVudEN0cmwub3BlbkV4Y2x1c2lvbkxpc3QoJyArIG1ldGEucm93ICsgJylcIj4nICsgZGF0YSArICc8L2E+JztcbiAgICAgICAgLy8gICAgICAgICB9O1xuXG4gICAgICAgIC8vICAgICAgICAgdmFyIGNoYW5nZVRvTG9jYWxEYXRlID0gZnVuY3Rpb24gKGRhdGEsIHR5cGUsIGZ1bGwsIG1ldGEpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGRhdGEpXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICByZXR1cm4gbW9tZW50KGRhdGEpLmZvcm1hdCgnRCBNTU0gWVlZWSwgSEg6bW0nKTtcbiAgICAgICAgLy8gICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAvLyAgICAgICAgIH07XG5cbiAgICAgICAgLy8gICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVudmlyb25tZW50Q3RybC5oZWFkZXJzRXhjbHVzaW9uTGlzdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5oZWFkZXJzRXhjbHVzaW9uTGlzdHNbaV0uY2xpY2tBYmxlID09IHRydWUpIHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdENvbHVtbnNFeGNsdXNpb25MaXN0cy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4oZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNFeGNsdXNpb25MaXN0c1tpXS5jb2x1bW4pLndpdGhUaXRsZShlbnZpcm9ubWVudEN0cmwuaGVhZGVyc0V4Y2x1c2lvbkxpc3RzW2ldLm5hbWUpLnJlbmRlcldpdGgoY2xpY2tBYmxlQ29sdW1uKSk7XG4gICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgLy8gICAgICAgICAgICAgZWxzZSBpZiAoZW52aXJvbm1lbnRDdHJsLmhlYWRlcnNFeGNsdXNpb25MaXN0c1tpXS50eXBlID09ICdkYXRlJykge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uc0V4Y2x1c2lvbkxpc3RzLnB1c2goRFRDb2x1bW5CdWlsZGVyLm5ld0NvbHVtbihlbnZpcm9ubWVudEN0cmwuaGVhZGVyc0V4Y2x1c2lvbkxpc3RzW2ldLmNvbHVtbikud2l0aFRpdGxlKGVudmlyb25tZW50Q3RybC5oZWFkZXJzRXhjbHVzaW9uTGlzdHNbaV0ubmFtZSkucmVuZGVyV2l0aChjaGFuZ2VUb0xvY2FsRGF0ZSkpO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0Q29sdW1uc0V4Y2x1c2lvbkxpc3RzLnB1c2goRFRDb2x1bW5CdWlsZGVyLm5ld0NvbHVtbihlbnZpcm9ubWVudEN0cmwuaGVhZGVyc0V4Y2x1c2lvbkxpc3RzW2ldLmNvbHVtbikud2l0aFRpdGxlKGVudmlyb25tZW50Q3RybC5oZWFkZXJzRXhjbHVzaW9uTGlzdHNbaV0ubmFtZSkpO1xuICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgIC8vICAgICAgICAgfVxuXG4gICAgICAgIC8vICAgICAgICAgdmFyIGdldFRhYmxlRGF0YUV4Y2x1c2lvbkxpc3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAvLyAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0cyk7XG4gICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAvLyAgICAgICAgIH07XG5cbiAgICAgICAgLy8gICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRPcHRpb25zRXhjbHVzaW9uTGlzdHMgPSBEVE9wdGlvbnNCdWlsZGVyLmZyb21GblByb21pc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAgICAgICAgICAgICByZXR1cm4gZ2V0VGFibGVEYXRhRXhjbHVzaW9uTGlzdHMoKTtcbiAgICAgICAgLy8gICAgICAgICB9KVxuICAgICAgICAvLyAgICAgICAgICAgICAud2l0aERPTSgnbFRmZ2l0cCcpXG4gICAgICAgIC8vICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdjcmVhdGVkUm93JywgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgLy8gUmVjb21waWxpbmcgc28gd2UgY2FuIGJpbmQgQW5ndWxhciBkaXJlY3RpdmUgdG8gdGhlIERUXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAkY29tcGlsZShhbmd1bGFyLmVsZW1lbnQocm93KS5jb250ZW50cygpKSgkc2NvcGUpO1xuICAgICAgICAvLyAgICAgICAgICAgICB9KVxuICAgICAgICAvLyAgICAgICAgICAgICAud2l0aE9wdGlvbignc2Nyb2xsWCcsIGZhbHNlKVxuICAgICAgICAvLyAgICAgICAgICAgICAud2l0aE9wdGlvbignYWFTb3J0aW5nJywgWzQsICdhc2MnXSlcbiAgICAgICAgLy8gICAgICAgICAgICAgLndpdGhPcHRpb24oJ2xlbmd0aENoYW5nZScsIGZhbHNlKVxuICAgICAgICAvLyAgICAgICAgICAgICAud2l0aE9wdGlvbigncGFnaW5nJywgZmFsc2UpXG4gICAgICAgIC8vICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2hpbmcnLCBmYWxzZSlcbiAgICAgICAgLy8gICAgICAgICAgICAgLndpdGhPcHRpb24oJ2luZm8nLCBmYWxzZSk7XG5cbiAgICAgICAgLy8gICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUNhbGxiYWNrRXhjbHVzaW9uTGlzdHMgPSBmdW5jdGlvbiAoZHRJbnN0YW5jZSkge1xuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlRXhjbHVzaW9uTGlzdHMpKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUV4Y2x1c2lvbkxpc3RzKGR0SW5zdGFuY2UpO1xuICAgICAgICAvLyAgICAgICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlRXhjbHVzaW9uTGlzdHMpKSB7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUV4Y2x1c2lvbkxpc3RzID0gZHRJbnN0YW5jZTtcbiAgICAgICAgLy8gICAgICAgICAgICAgfVxuICAgICAgICAvLyAgICAgICAgIH07XG4gICAgICAgIC8vICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlRXhjbHVzaW9uTGlzdHMuY2hhbmdlRGF0YSAhPSBudWxsKVxuICAgICAgICAvLyAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUV4Y2x1c2lvbkxpc3RzLmNoYW5nZURhdGEoZ2V0VGFibGVEYXRhRXhjbHVzaW9uTGlzdHMoKSk7XG5cbiAgICAgICAgLy8gICAgICAgICBlbnZpcm9ubWVudEN0cmwubG9hZGluZ1RhYmxlRXhjbHVzaW9uTGlzdHMgPSBmYWxzZTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gICAgIGVsc2Uge1xuICAgICAgICAvLyAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBcIkZhaWxlZCB0byBnZXQgRXhjbHVzaW9uIExpc3RzXCIpO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KTtcblxuXG4gICAgICAgIFRETVNlcnZpY2UuZ2V0VGVzdGVycyhlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzID0gXy5tYXAocmVzcG9uc2UucmVzdWx0LHRlc3RlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGVzdGVyLnVzZXJfdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGVyLnVzZXJfdHlwZSA9ICdJRCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RlcjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyBlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICAvLyAgICAgdXNlcl9pZCA6IC0xLFxuICAgICAgICAgICAgICAgIC8vICAgICB1c2VybmFtZSA6IFwiQUxMXCJcbiAgICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycyA9IF8udW5pcShlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycywndXNlcl9pZCcpO1xuICAgICAgICAgICAgICAgIF8ucmVtb3ZlKGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzLGZ1bmN0aW9uKHRlc3Rlcil7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmZpbmQoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMse3VzZXJfaWQ6IHRlc3Rlci51c2VyX2lkfSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuaGlkZVVzZXJzSW5wdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsIFwiZmFpbGVkIHRvIGdldCBBbGwgVGVzdGVycyA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5vcGVuUm9sZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhID0gYW5ndWxhci5jb3B5KGVudmlyb25tZW50Q3RybC5yb2xlc1tpbmRleF0pO1xuICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGFPcmlnLmFsbG93X3JlYWQpe1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5hbGxvd19yZWFkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhT3JpZy5hbGxvd193cml0ZSl7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLmFsbG93X3dyaXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kaXNhYmxlQ2hhbmdlUm9sZSA9IChlbnZpcm9ubWVudEN0cmwuZGlzYWJsZUNoYW5nZSB8fFxuICAgICAgICAgICAgKGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX3N0YXR1cyA9PSAnSW5hY3RpdmUnIHx8ICFBdXRoU2VydmljZS5hdXRob3JpemVkVG9FZGl0KDEpIHx8ICFlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmlzT3duZXIpKTtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5pc09wZW4xID0gZmFsc2U7XG4gICAgICAgICAgICBURE1TZXJ2aWNlLmdldEVudmlyb25tZW50Um9sZVRlc3RlcnMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwudGVzdGVycyA9IF8ubWFwKHJlc3BvbnNlLnJlc3VsdCwgdGVzdGVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVzdGVyLnVzZXJfdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3Rlci51c2VyX3R5cGUgPSAnSUQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RlcjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC50ZXN0ZXJzSWRzID0gZW52aXJvbm1lbnRDdHJsLnRlc3RlcnMubWFwKGl0ID0+IGl0LnVzZXJfaWQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzUm9sZSA9IGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzLmNvbmNhdChlbnZpcm9ubWVudEN0cmwudGVzdGVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuaGlkZVVzZXJzSW5wdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJSb2xlICMgXCIgKyBlbnZpcm9ubWVudEN0cmwucm9sZURhdGEucm9sZV9uYW1lLCBcImZhaWxlZCB0byBnZXQgUm9sZSBVc2VycyA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWN0aXZpdHlQYW5lbCA9ICdlbXB0eSc7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFjdGl2aXR5UGFuZWwgPSAnUm9sZSc7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmRlbGV0ZVJvbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBURE1TZXJ2aWNlLmRlbGV0ZUVudmlyb25tZW50Um9sZShlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfaWQsIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX25hbWUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlJvbGUgIyBcIiArIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX25hbWUsIFwiZGVsZXRlZCBTdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKCdUaGUgZW50aXRpZXMgb2YgdGhlIHJlbW92ZWQgdXNlcnMgbmVlZCB0byBiZSByZWxlYXNlZCBmcm9tIHRoZSBlbnZpcm9ubWVudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfc3RhdHVzID0gJ0luYWN0aXZlJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRSb2xlID0gXy5maW5kKGVudmlyb25tZW50Q3RybC5yb2xlcyx7cm9sZV9pZCA6IGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX2lkfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Um9sZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Um9sZS5yb2xlX3N0YXR1cyA9ICdJbmFjdGl2ZSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VSb2xlcy5yZWxvYWREYXRhKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldFRlc3RlcnMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycyA9IF8ubWFwKHJlc3BvbnNlLnJlc3VsdCwgdGVzdGVyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXN0ZXIudXNlcl90eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ZXIudXNlcl90eXBlID0gJ0lEJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVzdGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzLnVuc2hpZnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1c2VyX2lkIDogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVzZXJuYW1lIDogXCJBTExcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVtb3ZlKGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzLGZ1bmN0aW9uKHRlc3Rlcil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmZpbmQoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMse3VzZXJfaWQ6IHRlc3Rlci51c2VyX2lkfSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuaGlkZVVzZXJzSW5wdXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsIFwiZmFpbGVkIHRvIGdldCBBbGwgVGVzdGVycyA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2V0U3VtbWFyeURhdGEoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlJvbGUgIyBcIiArIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX25hbWUsIFwiZmFpbGVkIHRvIGRlbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuc2F2ZVJvbGVDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgdGVzdGVySWRzID0gZW52aXJvbm1lbnRDdHJsLnRlc3RlcnMubWFwKGl0ID0+IGl0LnVzZXJfaWQpO1xuICAgICAgICAgICAgbGV0IHNob3dXYXJuaW5nTWVzc2FnZSA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yKGxldCBpID0gMCA7IGkgPCBlbnZpcm9ubWVudEN0cmwudGVzdGVyc0lkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0ZXJJZHMuaW5kZXhPZihlbnZpcm9ubWVudEN0cmwudGVzdGVyc0lkc1tpXSkgPCAwKXtcbiAgICAgICAgICAgICAgICAgICAgc2hvd1dhcm5pbmdNZXNzYWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnRlc3RlcnNJZHMgPSBbXTtcbiAgICAgICAgICAgIFRETVNlcnZpY2UucG9zdEVudmlyb25tZW50Um9sZVRlc3RlcnMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX2lkLCBlbnZpcm9ubWVudEN0cmwucm9sZURhdGEucm9sZV9uYW1lLCBlbnZpcm9ubWVudEN0cmwudGVzdGVycykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaG93V2FybmluZ01lc3NhZ2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLndhcm5pbmcoJ1RoZSBlbnRpdGllcyBvZiB0aGUgcmVtb3ZlZCB1c2VycyBuZWVkIHRvIGJlIHJlbGVhc2VkIGZyb20gdGhlIGVudmlyb25tZW50LicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUm9sZSBVc2VycyAjIFwiICsgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfbmFtZSwgXCJVcGRhdGVkIFN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5nZXRUZXN0ZXJzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFsbFRlc3RlcnMgPSBfLm1hcChyZXNwb25zZS5yZXN1bHQsIHRlc3RlciA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVzdGVyLnVzZXJfdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdGVyLnVzZXJfdHlwZSA9ICdJRCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycy51bnNoaWZ0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdXNlcl9pZCA6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1c2VybmFtZSA6IFwiQUxMXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZShlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycyxmdW5jdGlvbih0ZXN0ZXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5maW5kKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEub3duZXJzLHt1c2VyX2lkOiB0ZXN0ZXIudXNlcl9pZH0pKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmhpZGVVc2Vyc0lucHV0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLCBcImZhaWxlZCB0byBnZXQgQWxsIFRlc3RlcnMgOiBcIiArIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJSb2xlIFVzZXJzICMgXCIgKyBlbnZpcm9ubWVudEN0cmwucm9sZURhdGEucm9sZV9uYW1lLCBcImZhaWxlZCB0byBVcGRhdGUgOiBcIiArIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBURE1TZXJ2aWNlLnVwZGF0ZUVudmlyb25tZW50Um9sZShlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfaWQsIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUm9sZSAjIFwiICsgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfbmFtZSwgXCJVcGRhdGVkIFN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5nZXRFbnZpcm9ubWVudFJvbGVzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJvbGVzID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUm9sZXMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlJvbGUgIyBcIiArIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX25hbWUsIFwiZmFpbGVkIHRvIFVwZGF0ZSA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLm9wZW5OZXdSb2xlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhID0ge1xuICAgICAgICAgICAgICAgIGFsbG93ZWRfdGVzdF9jb25uX2ZhaWx1cmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRfY3JlYXRpb25fb2Zfc3ludGhldGljX2RhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRfZGVsZXRlX2JlZm9yZV9sb2FkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkX3JhbmRvbV9lbnRpdHlfc2VsZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhbGxvd2VkX3JlcXVlc3Rfb2ZfZnJlc2hfZGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF90YXNrX3NjaGVkdWxpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRfcmVwbGFjZV9zZXF1ZW5jZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbG93ZWRfcmVmcmVzaF9yZWZlcmVuY2VfZGF0YTogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF9lbnRpdHlfdmVyc2lvbmluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF9udW1iZXJfb2ZfcmVzZXJ2ZWRfZW50aXRpZXM6IDAsXG4gICAgICAgICAgICAgICAgYWxsb3dlZF9udW1iZXJfb2ZfZW50aXRpZXNfdG9fY29weTogMCxcbiAgICAgICAgICAgICAgICBhbGxvd2VkX251bWJlcl9vZl9lbnRpdGllc190b19yZWFkOiAwLFxuICAgICAgICAgICAgICAgIHJvbGVfZGVzY3JpcHRpb246IFwiXCIsXG4gICAgICAgICAgICAgICAgcm9sZV9uYW1lOiBcIlwiLFxuICAgICAgICAgICAgICAgIGFsbG93X3JlYWQgOiBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhT3JpZy5hbGxvd19yZWFkID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbG93X3dyaXRlIDogZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YU9yaWcuYWxsb3dfd3JpdGUgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuaXNPcGVuMSA9IGZhbHNlO1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFjdGl2aXR5UGFuZWwgPSAnbmV3Um9sZSc7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwudGVzdGVycyA9IFtdO1xuICAgICAgICAgICAgaWYgKCFlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycykge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFkZE5ld1JvbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoXy5maW5kKGVudmlyb25tZW50Q3RybC5yb2xlcywge3JvbGVfbmFtZTogZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfbmFtZSwgcm9sZV9zdGF0dXM6ICdBY3RpdmUnfSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdG9hc3RyLmVycm9yKFwiUm9sZSAjIFwiICsgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfbmFtZSArIFwiIEFscmVhZHkgRXhpc3RzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgVERNU2VydmljZS5wb3N0RW52aXJvbm1lbnRSb2xlKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSwgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0RW52aXJvbm1lbnRSb2xlcyhlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5yb2xlcyA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZVJvbGVzLnJlbG9hZERhdGEoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUm9sZSAjIFwiICsgZW52aXJvbm1lbnRDdHJsLnJvbGVEYXRhLnJvbGVfbmFtZSwgXCJDcmVhdGVkIFN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIFRETVNlcnZpY2UucG9zdEVudmlyb25tZW50Um9sZVRlc3RlcnMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucmVzdWx0LmlkLCBlbnZpcm9ubWVudEN0cmwucm9sZURhdGEucm9sZV9uYW1lLCBlbnZpcm9ubWVudEN0cmwudGVzdGVycykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlJvbGUgVXNlcnMgIyBcIiArIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX25hbWUsIFwiVXBkYXRlZCBTdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5nZXRUZXN0ZXJzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hbGxUZXN0ZXJzID0gXy5tYXAocmVzcG9uc2UucmVzdWx0LCB0ZXN0ZXIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVzdGVyLnVzZXJfdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0ZXIudXNlcl90eXBlID0gJ0lEJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW52aXJvbm1lbnRDdHJsLmFsbFRlc3RlcnMudW5zaGlmdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdXNlcl9pZCA6IC0xLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVzZXJuYW1lIDogXCJBTExcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZShlbnZpcm9ubWVudEN0cmwuYWxsVGVzdGVycyxmdW5jdGlvbih0ZXN0ZXIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmZpbmQoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5vd25lcnMse3VzZXJfaWQ6IHRlc3Rlci51c2VyX2lkfSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5oaWRlVXNlcnNJbnB1dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLCBcImZhaWxlZCB0byBnZXQgQWxsIFRlc3RlcnMgOiBcIiArIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJSb2xlIFVzZXJzICMgXCIgKyBlbnZpcm9ubWVudEN0cmwucm9sZURhdGEucm9sZV9uYW1lLCBcImZhaWxlZCB0byBVcGRhdGUgOiBcIiArIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlJvbGUgIyBcIiArIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX25hbWUsIFwiVW5hYmxlIHRvIENyZWF0ZSA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFkZE5ld0dsb2JhbCA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdsb2JhbERhdGEudXBkYXRlX2RhdGUgPSBuZXcgRGF0ZSgpLnRvVVRDU3RyaW5nKCk7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS51cGRhdGVkX2J5ID0gZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9sYXN0X3VwZGF0ZWRfYnk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhKTtcblxuICAgICAgICAgICAgaWYgKF8uZmluZChlbnZpcm9ubWVudEN0cmwuZ2xvYmFscywge2dsb2JhbF9uYW1lOiBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS5nbG9iYWxfbmFtZX0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRvYXN0ci5lcnJvcihcIkdsb2JhbCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmdsb2JhbERhdGEuZ2xvYmFsX25hbWUgKyBcIiBBbHJlYWR5IEV4aXN0c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFRETVNlcnZpY2UucG9zdEVudkdsb2JhbChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsIGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5nZXRFbnZHbG9iYWxzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdsb2JhbHMgPSByZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VHbG9iYWxzLnJlbG9hZERhdGEoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiR2xvYmFsICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS5nbG9iYWxfbmFtZSwgXCJDcmVhdGVkIFN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJHbG9iYWwgIyBcIiArIGVudmlyb25tZW50Q3RybC5yb2xlRGF0YS5yb2xlX25hbWUsIFwiVW5hYmxlIHRvIENyZWF0ZSA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFkZE5ld0V4Y2x1c2lvbkxpc3QgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiYWRkIG5ldyBleGNsdXNpb24gbGlzdFwiKTtcbiAgICAgICAgICAgIFRETVNlcnZpY2UucG9zdEVudkV4Y2x1c2lvbkxpc3QoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJBbiBFeGNsdXNpb24gTGlzdCB3YXMgYWRkZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldEVudkV4Y2x1c2lvbkxpc3RzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdHMgPSBfLnNvcnRCeShyZXNwb25zZS5yZXN1bHQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUuY3JlYXRpb25fZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VFeGNsdXNpb25MaXN0cy5yZWxvYWREYXRhKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgXCJGYWlsZWQgdG8gZ2V0IEV4Y2x1c2lvbiBMaXN0c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJGYWlsZWQgdG8gYWRkIGFuIEV4Y2x1c2lvbiBMaXN0XCIgKyByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgc2F2ZUV4Y2x1c2lvbkxpc3QgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2F2ZSBleGNsdXNpb24gbGlzdC4gaWQ6IFwiICsgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhLmJlX2Vudl9leGNsdXNpb25fbGlzdF9pZCk7XG4gICAgICAgICAgICBURE1TZXJ2aWNlLnB1dEVudkV4Y2x1c2lvbkxpc3QoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhLmJlX2Vudl9leGNsdXNpb25fbGlzdF9pZCwgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJBbiBFeGNsdXNpb24gTGlzdCB3YXMgYWRkZWQgc3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldEVudkV4Y2x1c2lvbkxpc3RzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdHMgPSBfLnNvcnRCeShyZXNwb25zZS5yZXN1bHQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUuY3JlYXRpb25fZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmR0SW5zdGFuY2VFeGNsdXNpb25MaXN0cy5yZWxvYWREYXRhKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFbnZpcm9ubWVudCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgXCJGYWlsZWQgdG8gZ2V0IEV4Y2x1c2lvbiBMaXN0c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJGYWlsZWQgdG8gYWRkIGFuIEV4Y2x1c2lvbiBMaXN0XCIgKyByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25QYXR0ZXJuID0gbmV3IFJlZ0V4cChcIl4oKFxcXFx3fC0pKyg/OiwoXFxcXHd8LSkrKXswLH0pPyRcIik7XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmJlSXNTZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5vbkJlU2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmJlSXNTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLnZhbGlkYXRlRXhjbHVzaW9uTGlzdFJlcXVlc3RlZEJ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ2YWxpZGF0aW5nIEV4Y2x1c2lvbiBMaXN0IHJlcXVlc3RlZCBieTogbmV2X2lkPVwiICsgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCArIFwiXFxuXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhKTtcblxuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3RSZXF1ZXN0ZWRCeUlzTm90VmFsaWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgVERNU2VydmljZS5wb3N0RW52RXhjbHVzaW9uTGlzdFZhbGlkYXRlUmVxdWVzdGVkQnkoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdFJlcXVlc3RlZEJ5SXNOb3RWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlVuYWJsZSB0byBleGVjdXRlIEV4Y2x1c2lvbiBMaXN0IFZhbGlkYXRpb24gMTogXCIgKyByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwudmFsaWRhdGVBbmRBZGRFeGNsdXNpb25MaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ2YWxpZGF0aW5nIEV4Y2x1c2lvbiBMaXN0IFwiKTtcblxuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnBhdHRlcm5GYWlsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0SXNOb3RWYWxpZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvL2ZpcnN0IHJlbW92ZSBzcGFjZSBhbmQgbmV3IGxpbmVzIGFuZCB2YWxpZGF0ZSBwYXR0ZXJuXG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdERhdGEuZXhjbHVzaW9uX2xpc3QgPSBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdERhdGEuZXhjbHVzaW9uX2xpc3QucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0RGF0YS5leGNsdXNpb25fbGlzdCA9IGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0RGF0YS5leGNsdXNpb25fbGlzdC5yZXBsYWNlKC9cXHI/XFxufFxcci9nLCAnJyk7XG5cbiAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uUGF0dGVybi50ZXN0KGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0RGF0YS5leGNsdXNpb25fbGlzdCkpIHtcblxuICAgICAgICAgICAgICAgIFRETVNlcnZpY2UucG9zdEVudkV4Y2x1c2lvbkxpc3RWYWxpZGF0ZUxpc3QoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdElzTm90VmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGlzdGluZ0V4Y2x1c2lvbkxpc3RNZW1iZXJzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNwb25zZS5yZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmV4aXN0aW5nRXhjbHVzaW9uTGlzdE1lbWJlcnMucHVzaChyZXNwb25zZS5yZXN1bHRbaV0udW5uZXN0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZE5ld0V4Y2x1c2lvbkxpc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlVuYWJsZSB0byBleGVjdXRlIEV4Y2x1c2lvbiBMaXN0IFZhbGlkYXRpb24gMjogXCIgKyByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucGF0dGVybkZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLnZhbGlkYXRlQW5kU2F2ZUV4Y2x1c2lvbkxpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInZhbGlkYXRpbmcgRXhjbHVzaW9uIExpc3QgXCIpO1xuXG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucGF0dGVybkZhaWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3RJc05vdFZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vZmlyc3QgcmVtb3ZlIHNwYWNlIGFuZCBuZXcgbGluZXMgYW5kIHZhbGlkYXRlIHBhdHRlcm5cbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0RGF0YS5leGNsdXNpb25fbGlzdCA9IGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0RGF0YS5leGNsdXNpb25fbGlzdC5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhLmV4Y2x1c2lvbl9saXN0ID0gZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhLmV4Y2x1c2lvbl9saXN0LnJlcGxhY2UoL1xccj9cXG58XFxyL2csICcnKTtcblxuICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5leGNsdXNpb25QYXR0ZXJuLnRlc3QoZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhLmV4Y2x1c2lvbl9saXN0KSkge1xuXG4gICAgICAgICAgICAgICAgVERNU2VydmljZS5wb3N0RW52RXhjbHVzaW9uTGlzdFZhbGlkYXRlTGlzdEJlZm9yZVVwZGF0ZShlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdERhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0SXNOb3RWYWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmV4aXN0aW5nRXhjbHVzaW9uTGlzdE1lbWJlcnMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3BvbnNlLnJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhpc3RpbmdFeGNsdXNpb25MaXN0TWVtYmVycy5wdXNoKHJlc3BvbnNlLnJlc3VsdFtpXS51bm5lc3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUV4Y2x1c2lvbkxpc3QoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlVuYWJsZSB0byBleGVjdXRlIEV4Y2x1c2lvbiBMaXN0IFZhbGlkYXRpb24gMjogXCIgKyByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucGF0dGVybkZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLm9wZW5FeGNsdXNpb25MaXN0ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdFJlcXVlc3RlZEJ5SXNOb3RWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmRpc2FibGVDaGFuZ2VFeGNsdXNpb25MaXN0ID0gZmFsc2U7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZXhjbHVzaW9uTGlzdElzTm90VmFsaWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmV4Y2x1c2lvbkxpc3REYXRhID0gYW5ndWxhci5jb3B5KGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0c1tpbmRleF0pO1xuXG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGlzYWJsZUNoYW5nZUV4Y2x1c2lvbkxpc3QgPSAoZW52aXJvbm1lbnRDdHJsLmRpc2FibGVDaGFuZ2UgfHxcbiAgICAgICAgICAgICghQXV0aFNlcnZpY2UuYXV0aG9yaXplZFRvRWRpdCgxKSB8fCAhZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5pc093bmVyKSk7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWN0aXZpdHlQYW5lbCA9ICdlbXB0eSc7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFjdGl2aXR5UGFuZWwgPSAnRXhjbHVzaW9uTGlzdCc7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5kZWxldGVFeGNsdXNpb25MaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgVERNU2VydmljZS5kZWxldGVFbnZFeGNsdXNpb25MaXN0KGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0RGF0YS5iZV9lbnZfZXhjbHVzaW9uX2xpc3RfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXhjbHVzaW9uIExpc3QgZGVsZXRlZCBTdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0RW52RXhjbHVzaW9uTGlzdHMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0cyA9IF8uc29ydEJ5KHJlc3BvbnNlLnJlc3VsdCwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZS5jcmVhdGlvbl9kYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUV4Y2x1c2lvbkxpc3RzLnJlbG9hZERhdGEoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2V0U3VtbWFyeURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBcIkZhaWxlZCB0byBnZXQgRXhjbHVzaW9uIExpc3RzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXhjbHVzaW9uIExpc3QgZmFpbGVkIHRvIGRlbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwub3Blbk5ld0V4Y2x1c2lvbkxpc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGlzYWJsZUNoYW5nZUV4Y2x1c2lvbkxpc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0SXNOb3RWYWxpZCA9IGZhbHNlO1xuXG5cbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5leGNsdXNpb25MaXN0RGF0YSA9IHt9O1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFjdGl2aXR5UGFuZWwgPSAnbmV3RXhjbHVzaW9uTGlzdCc7XG4gICAgICAgIH07XG5cblxuICAgICAgICBURE1TZXJ2aWNlLmdldERhdGFDZW50ZXJzKCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGF0YUNlbnRlcnMgPSBfLnVuaXF1ZShfLmZpbHRlcihyZXNwb25zZS5yZXN1bHQsIGZ1bmN0aW9uIChkYykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGMuc3RhdHVzID09ICdBTElWRScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KSwnZGMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVudmlyb25tZW50ICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsIFwiRmFpbGVkIHRvIGdldCBkYXRhIGNlbnRlcnNcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG5cblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwub3BlblByb2R1Y3QgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YSA9IGFuZ3VsYXIuY29weShlbnZpcm9ubWVudEN0cmwucHJvZHVjdHNbaW5kZXhdKTtcbiAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9pZCkge1xuICAgICAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0UHJvZHVjdExvZ2ljYWxVbml0cyhlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9pZCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5sb2dpY2FsVW5pdHNGb3JQcm9kdWN0ID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGF0YUNlbnRlckNoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlmIChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhT3JpZy5hbGxvd193cml0ZSl7XG4gICAgICAgICAgICAvLyAgICAgaWYgKGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X2lkKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vIFRETVNlcnZpY2UuZ2V0RGJJbnRlcmZhY2VzQnlQcm9kdWN0TFVzKGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X2lkKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICB2YXIgaW50ZXJmYWNlcyA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICBfLmVhY2goaW50ZXJmYWNlcywgZnVuY3Rpb24gKGludGVyZmFjZSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgICAgICB2YXIgZm91bmRJbnRlcmZhY2UgPSBfLmZpbmQoZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLmludGVyZmFjZXMse2ludGVyZmFjZV9uYW1lIDogaW50ZXJmYWNlLmludGVyZmFjZV9uYW1lfSk7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgIGlmIChmb3VuZEludGVyZmFjZSl7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgICAgICBpZiAoZm91bmRJbnRlcmZhY2UuaW50ZXJmYWNlX3R5cGUgPT0gaW50ZXJmYWNlLmludGVyZmFjZV90eXBlKXtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBpbnRlcmZhY2UuZGJfaG9zdCA9IGZvdW5kSW50ZXJmYWNlLmRiX2hvc3Q7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlLmRiX3BvcnQgPSBmb3VuZEludGVyZmFjZS5kYl9wb3J0O1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGludGVyZmFjZS5kYl91c2VyID0gZm91bmRJbnRlcmZhY2UuZGJfdXNlcjtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBpbnRlcmZhY2UuZGJfcGFzc3dvcmQgPSBmb3VuZEludGVyZmFjZS5kYl9wYXNzd29yZDtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBpbnRlcmZhY2UuZGJfc2NoZW1hID0gZm91bmRJbnRlcmZhY2UuZGJfc2NoZW1hO1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGludGVyZmFjZS5lbnZfcHJvZHVjdF9pbnRlcmZhY2VfaWQgPSBmb3VuZEludGVyZmFjZS5lbnZfcHJvZHVjdF9pbnRlcmZhY2VfaWQ7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlLmRiX2Nvbm5lY3Rpb25fc3RyaW5nID0gZm91bmRJbnRlcmZhY2UuZGJfY29ubmVjdGlvbl9zdHJpbmc7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlLnN0YXR1cyA9IChpbnRlcmZhY2UuZGJfY29ubmVjdGlvbl9zdHJpbmcgIT0gbnVsbCB8fCBpbnRlcmZhY2UuZGJfaG9zdCAhPSBudWxsKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBpbnRlcmZhY2UudXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlLnN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgICAgICBpbnRlcmZhY2UuZGVsZXRlZCA9IHRydWU7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgICAgICBpbnRlcmZhY2Uuc3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICAvLyAgICAgICAgIC8vICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgICAgICAgICAgaW50ZXJmYWNlLmludGVyZmFjZV9zdGF0dXMgPSBcIkFjdGl2ZVwiO1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5pbnRlcmZhY2VzID0gaW50ZXJmYWNlcztcbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vICAgICAgICAgLy8gICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgICAgIHRvYXN0ci5lcnJvcihcIlN5c3RlbSAjIFwiICsgZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLnByb2R1Y3RfaWQsIFwiZmFpbGVkIHRvIGdldCBpbnRlcmZhY2VzXCIpO1xuICAgICAgICAgICAgLy8gICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgLy8gICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvLyBURE1TZXJ2aWNlLmdldFByb2R1Y3RJbnRlcmZhY2VzKGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgLy8gICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5zdGF0dXMgPT0gJ0FjdGl2ZScpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzcG9uc2UucmVzdWx0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdFtpXS5pbnRlcmZhY2Vfc3RhdHVzID09ICdBY3RpdmUnICYmICFfLmZpbmQoZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLmludGVyZmFjZXMsIHtpbnRlcmZhY2VfaWQ6IHJlc3BvbnNlLnJlc3VsdFtpXS5pbnRlcmZhY2VfaWR9KSkge1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5yZXN1bHRbaV0uc3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5pbnRlcmZhY2VzLnB1c2gocmVzcG9uc2UucmVzdWx0W2ldKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAvLyAgICAgXy5lYWNoKGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5pbnRlcmZhY2VzLCBmdW5jdGlvbiAoaW50ZXJmYWNlKSB7XG4gICAgICAgICAgICAvLyAgICAgICAgIGludGVyZmFjZS5zdGF0dXMgPSAoaW50ZXJmYWNlLmRiX2Nvbm5lY3Rpb25fc3RyaW5nICE9IG51bGwgfHwgaW50ZXJmYWNlLmRiX2hvc3QgIT0gbnVsbCk7XG4gICAgICAgICAgICAvLyAgICAgICAgIGludGVyZmFjZS51cGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGlzYWJsZUNoYW5nZVByb2R1Y3QgPSAoZW52aXJvbm1lbnRDdHJsLmRpc2FibGVDaGFuZ2UgfHxcbiAgICAgICAgICAgIChlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuc3RhdHVzID09ICdJbmFjdGl2ZScgfHwgIUF1dGhTZXJ2aWNlLmF1dGhvcml6ZWRUb0VkaXQoMSkgfHwgIWVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuaXNPd25lcikpO1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFjdGl2aXR5UGFuZWwgPSAnZW1wdHknO1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hY3Rpdml0eVBhbmVsID0gJ1Byb2R1Y3QnO1xuICAgICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwub3Blbkdsb2JhbCA9IGZ1bmN0aW9uIChpbmRleCkge1xuXG4gICAgICAgICAgICBpZiAoIWVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuaXNPd25lcikgcmV0dXJuO1xuXG4gICAgICAgICAgICBURE1TZXJ2aWNlLmdldEFsbEdsb2JhbHMobnVsbCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciBlbnZHbG9iYWxzID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcblxuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwubmV3RW52R2xvYmFscyA9IGVudkdsb2JhbHM7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kaXNhYmxlQ2hhbmdlR2xvYmFsID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhID0gYW5ndWxhci5jb3B5KGVudmlyb25tZW50Q3RybC5nbG9iYWxzW2luZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhLmx1TmFtZSA9IGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhLmx1X25hbWU7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxDaGFuZ2VkKHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIFwiRmFpbGQgdG8gZ2V0IG5ldyBwcm9kdWN0c1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFjdGl2aXR5UGFuZWwgPSAnZW1wdHknO1xuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hY3Rpdml0eVBhbmVsID0gJ0dsb2JhbCc7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5kZWxldGVQcm9kdWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgVERNU2VydmljZS5kZWxldGVFbnZQcm9kdWN0KGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9pZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU3lzdGVtICMgXCIgKyBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9uYW1lLCBcImRlbGV0ZWQgU3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuc3RhdHVzID0gJ0luYWN0aXZlJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQcm9kdWN0ID0gXy5maW5kKGVudmlyb25tZW50Q3RybC5wcm9kdWN0cyx7cHJvZHVjdF9pZCA6IGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X2lkfSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UHJvZHVjdCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UHJvZHVjdC5zdGF0dXMgPSAnSW5hY3RpdmUnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUHJvZHVjdHMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJTeXN0ZW0gIyBcIiArIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X25hbWUsIFwiZmFpbGVkIHRvIGRlbGV0ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGVsZXRlR2xvYmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgVERNU2VydmljZS5kZWxldGVFbnZHbG9iYWwoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCwgZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9uYW1lLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhLmdsb2JhbF9uYW1lLCBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS5sdV9uYW1lKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcblxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkdsb2JhbCAjIFwiICsgZW52aXJvbm1lbnRDdHJsLmdsb2JhbERhdGEuZ2xvYmFsX25hbWUsIFwiZGVsZXRlZCBTdWNjZXNzZnVsbHlcIik7XG4gICAgICAgICAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0RW52R2xvYmFscyhlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdsb2JhbHMgPSBfLnNvcnRCeShyZXNwb25zZS5yZXN1bHQsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUudXBkYXRlX2RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZHRJbnN0YW5jZUdsb2JhbHMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJHbG9iYWwgIyBcIiArIGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhLmdsb2JhbF9uYW1lLCBcImZhaWxlZCB0byBkZWxldGVcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLnNhdmVQcm9kdWN0Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgLyplbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuaW50ZXJmYWNlcyA9IF8uZmlsdGVyKGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5pbnRlcmZhY2VzLGZ1bmN0aW9uKGludGVyZmFjZSl7XG4gICAgICAgICAgICAgcmV0dXJuIChpbnRlcmZhY2UuZW52X3Byb2R1Y3RfaW50ZXJmYWNlX3N0YXR1cyA9PSAnQWN0aXZlJyk7XG4gICAgICAgICAgICAgfSk7Ki9cbiAgICAgICAgICAgIFRETVNlcnZpY2UucHV0RW52UHJvZHVjdChlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X2lkLCBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhLmVudmlyb25tZW50X25hbWUsIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU3lzdGVtICMgXCIgKyBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9uYW1lLCBcIlVwZGF0ZWQgU3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldEVudlByb2R1Y3RzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnByb2R1Y3RzID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUHJvZHVjdHMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdldFN1bW1hcnlEYXRhKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJTeXN0ZW0gIyBcIiArIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X25hbWUsIFwiZmFpbGVkIHRvIHVwZGF0ZVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwuc2F2ZUdsb2JhbENoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBnbG9iYWxcbiAgICAgICAgICAgIFRETVNlcnZpY2UucHV0RW52R2xvYmFsKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSwgZW52aXJvbm1lbnRDdHJsLmdsb2JhbERhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiR2xvYmFsICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS5nbG9iYWxfbmFtZSwgXCJVcGRhdGVkIFN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBuZXcgZ2xvYmFsIGRhdGEoYWZ0ZXIgdXBkYXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5nZXRFbnZHbG9iYWxzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxzID0gXy5zb3J0QnkocmVzcG9uc2UucmVzdWx0LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh2YWx1ZS51cGRhdGVfZGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2xvYmFscy5yZXZlcnNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlR2xvYmFscy5yZWxvYWREYXRhKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nZXRTdW1tYXJ5RGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiR2xvYmFsICMgXCIgKyBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS5nbG9iYWxfbmFtZSwgXCJmYWlsZWQgdG8gdXBkYXRlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLm9wZW5FbnZQcm9kdWN0SW50ZXJmYWNlRWRpdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdmFyIGVudmlyb25tZW50RGF0YU9yaWcgPSBlbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhT3JpZztcbiAgICAgICAgICAgIHZhciBkYkludGVyZmFjZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG5cbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudFByb2R1Y3RJbnRlcmZhY2VNb2RhbC5odG1sJyxcbiAgICAgICAgICAgICAgICByZXNvbHZlOiB7XG4gICAgICAgICAgICAgICAgICAgIGRiSW50ZXJmYWNlOiBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuaW50ZXJmYWNlc1tpbmRleF0sXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVDaGFuZ2U6IGVudmlyb25tZW50Q3RybC5kaXNhYmxlQ2hhbmdlUHJvZHVjdCB8fCBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuaW50ZXJmYWNlc1tpbmRleF0uZW52X3Byb2R1Y3RfaW50ZXJmYWNlX3N0YXR1cyA9PSAnSW5hY3RpdmUnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgZGJJbnRlcmZhY2UgLCBkaXNhYmxlQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYkludGVyZmFjZUN0cmwgPSB0aGlzO1xuICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhID0gZGJJbnRlcmZhY2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudERhdGFPcmlnLmFsbG93X3JlYWQgJiYgZW52aXJvbm1lbnREYXRhT3JpZy5hbGxvd193cml0ZSBcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX2hvc3QgJiYgIWRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEuZGJfY29ubmVjdGlvbl9zdHJpbmcpe1xuICAgICAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5wb3N0R2VuZXJpY0FQSSgnaW50ZXJmYWNlQ29ubmVjdGlvbkRldGFpbHMnLHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmZhY2VOYW1lIDogZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5pbnRlcmZhY2VfbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudE5hbWU6IGVudmlyb25tZW50RGF0YU9yaWcuZW52aXJvbm1lbnRfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzcG9uc2UucmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0ICYmIHJlc3BvbnNlLnJlc3VsdC5sZW5ndGggPiAwKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9ob3N0ID0gcmVzcG9uc2UucmVzdWx0WzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX3BvcnQgPSBwYXJzZUludChyZXNwb25zZS5yZXN1bHRbMV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX3VzZXIgPSByZXNwb25zZS5yZXN1bHRbM107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEuZGJfcGFzc3dvcmQgPSByZXNwb25zZS5yZXN1bHRbNF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEuZGJfc2NoZW1hID0gcmVzcG9uc2UucmVzdWx0WzJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmRlY3J5cHRJbnRlcmZhY2VQYXNzd29yZCh7J2RiX3Bhc3N3b3JkJzpkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX3Bhc3N3b3JkfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJGQUlMRURcIiB8fCAhcmVzcG9uc2UucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBkZWNyeXB0aW5nIHBhc3N3b3JkIDogXCIgKyByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9wYXNzd29yZCA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEucGFzc3dvcmREZWNyeXB0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5wYXNzd29yZERlY3J5cHQgJiYgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9wYXNzd29yZCAmJiBkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX3Bhc3N3b3JkICE9IFwiXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgVERNU2VydmljZS5kZWNyeXB0SW50ZXJmYWNlUGFzc3dvcmQoeydkYl9wYXNzd29yZCc6ZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9wYXNzd29yZH0pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIkZBSUxFRFwiIHx8ICFyZXNwb25zZS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciBkZWNyeXB0aW5nIHBhc3N3b3JkIDogXCIgKyByZXNwb25zZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX3Bhc3N3b3JkID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLnBhc3N3b3JkRGVjcnlwdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuaW50ZXJmYWNlVHlwZSA9IFwiMVwiO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9jb25uZWN0aW9uX3N0cmluZyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuaW50ZXJmYWNlVHlwZSA9IFwiMFwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRpc2FibGVDaGFuZ2UgPSBkaXNhYmxlQ2hhbmdlO1xuICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuc2F2ZURCSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRiSW50ZXJmYWNlQ3RybC5pbnRlcmZhY2VUeXBlID09IFwiMVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9jb25uZWN0aW9uX3N0cmluZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX2hvc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEuZGJfcG9ydCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9zY2hlbWEgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEuc3RhdHVzID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5uZXdJbnRlcmZhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5zdGF0dXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kZWxldGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwudGVzdERCSW50ZXJmYWNlQ29ubiA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWVzdERhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ludGVyZmFjZV9kYl90eXBlJzpkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmludGVyZmFjZV90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYl9ob3N0JzpkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX2hvc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RiX3BvcnQnOmRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEuZGJfcG9ydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGJfdXNlcic6ZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl91c2VyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkYl9wYXNzd29yZCc6ZGJJbnRlcmZhY2VDdHJsLmRiSW50ZXJmYWNlRGF0YS5kYl9wYXNzd29yZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGJfc2NoZW1hJzpkYkludGVyZmFjZUN0cmwuZGJJbnRlcmZhY2VEYXRhLmRiX3NjaGVtYSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGJfY29ubmVjdGlvbl9zdHJpbmcnOmRiSW50ZXJmYWNlQ3RybC5kYkludGVyZmFjZURhdGEuZGJfY29ubmVjdGlvbl9zdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLnRlc3RJbnRlcmZhY2VEYkNvbm5lY3Rpb24ocmVxdWVzdERhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIkZBSUxFRFwiIHx8ICFyZXNwb25zZS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLnRlc3REYkNvbm5TdWNjZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRiSW50ZXJmYWNlQ3RybC50ZXN0REJJbnRlcmZhY2VDb25uUmVzdWx0ID0gXCJGYWlsZWQgXCIgKyAocmVzcG9uc2UubWVzc2FnZSA/IFwiW1wiICsgcmVzcG9uc2UubWVzc2FnZSArIFwiXVwiIDogXCJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLnRlc3REYkNvbm5TdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGJJbnRlcmZhY2VDdHJsLnRlc3REQkludGVyZmFjZUNvbm5SZXN1bHQgPSBcIlN1Y2Nlc3NcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb25uZWN0aW9uIFRlc3QgRG9uZS5cXG5cIiArIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBkYkludGVyZmFjZUN0cmwuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAnZGJJbnRlcmZhY2VDdHJsJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLm9wZW5OZXdQcm9kdWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmRpc2FibGVDaGFuZ2VQcm9kdWN0ID0gZmFsc2U7XG4gICAgICAgICAgICBURE1TZXJ2aWNlLmdldFByb2R1Y3RzV2l0aExVcygpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWxsUHJvZHVjdHMgPSByZXNwb25zZS5yZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0RW52UHJvZHVjdHMoZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5lbnZpcm9ubWVudF9pZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbnZQcm9kdWN0cyA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwubmV3RW52UHJvZHVjdHMgPSBfLnJlamVjdChhbGxQcm9kdWN0cywgZnVuY3Rpb24gKHByb2R1Y3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbnZQcm9kdWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudlByb2R1Y3RzW2ldLnByb2R1Y3RfaWQgPT09IHByb2R1Y3QucHJvZHVjdF9pZCAmJiBlbnZQcm9kdWN0c1tpXS5zdGF0dXMgPT09ICdBY3RpdmUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIFwiRmFpbGQgdG8gZ2V0IG5ldyBzeXN0ZW1zXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIFwiRmFpbGQgdG8gZ2V0IG5ldyBzeXN0ZW1zXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEgPSB7fTtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hY3Rpdml0eVBhbmVsID0gJ25ld1Byb2R1Y3QnO1xuICAgICAgICB9O1xuXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxDaGFuZ2VkID0gKGluaXQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNob3Nlbkdsb2JhbCA9IF8uZmluZChlbnZpcm9ubWVudEN0cmwubmV3RW52R2xvYmFscyx7Z2xvYmFsTmFtZTogZW52aXJvbm1lbnRDdHJsLmdsb2JhbERhdGEuZ2xvYmFsX25hbWV9KTtcbiAgICAgICAgICAgIGlmIChjaG9zZW5HbG9iYWwpIHtcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsTG9naWNhbFVuaXRzID0gY2hvc2VuR2xvYmFsLmx1TGlzdDtcbiAgICAgICAgICAgICAgICBpZiAoIWluaXQpe1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS5sdU5hbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZ2xvYmFsRGF0YS5nbG9iYWxfdmFsdWUgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGVudmlyb25tZW50Q3RybC5nbG9iYWxMb2dpY2FsVW5pdENoYW5nZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaG9zZW5Mb2dpY2FsVW5pdCA9IF8uZmluZChlbnZpcm9ubWVudEN0cmwuZ2xvYmFsTG9naWNhbFVuaXRzLHtsdU5hbWU6IGVudmlyb25tZW50Q3RybC5nbG9iYWxEYXRhLmx1TmFtZX0pO1xuICAgICAgICAgICAgaWYgKGNob3NlbkxvZ2ljYWxVbml0KSB7XG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdsb2JhbERhdGEuZ2xvYmFsX3ZhbHVlID0gY2hvc2VuTG9naWNhbFVuaXQuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLm9wZW5OZXdHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGlzYWJsZUNoYW5nZUdsb2JhbCA9IGZhbHNlO1xuXG4gICAgICAgICAgICBURE1TZXJ2aWNlLmdldEFsbEdsb2JhbHMobnVsbCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblxuICAgICAgICAgICAgICAgIHZhciBlbnZHbG9iYWxzID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLm5ld0Vudkdsb2JhbHMgPSBfLmZpbHRlcihlbnZHbG9iYWxzLGdsb2JhbCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXy5maW5kSW5kZXgoZW52aXJvbm1lbnRDdHJsLmdsb2JhbHMse2dsb2JhbF9uYW1lIDogZ2xvYmFsLmdsb2JhbE5hbWV9KSA8IDA7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRW52aXJvbm1lbnQgIyBcIiArIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIFwiRmFpbGQgdG8gZ2V0IG5ldyBwcm9kdWN0c1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdsb2JhbExvZ2ljYWxVbml0cyA9IFtdO1xuICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmdsb2JhbERhdGEgPSB7fTtcbiAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hY3Rpdml0eVBhbmVsID0gJ25ld0dsb2JhbCc7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmRhdGFDZW50ZXJDaGFuZ2VkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuZGF0YV9jZW50ZXJfbmFtZSl7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGFDZW50ZXIgPSBfLmZpbmQoZW52aXJvbm1lbnRDdHJsLmRhdGFDZW50ZXJzLHtkYyA6IGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5kYXRhX2NlbnRlcl9uYW1lfSk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGFDZW50ZXIpe1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWRkUHJvZHVjdFdhcm5pbmcgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRDdHJsLmxvZ2ljYWxVbml0c0ZvclByb2R1Y3Qpe1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7aSA8IGVudmlyb25tZW50Q3RybC5sb2dpY2FsVW5pdHNGb3JQcm9kdWN0Lmxlbmd0aCA7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5sb2dpY2FsVW5pdHNGb3JQcm9kdWN0W2ldLmx1X2RjX25hbWUgJiYgZW52aXJvbm1lbnRDdHJsLmxvZ2ljYWxVbml0c0ZvclByb2R1Y3RbaV0ubHVfZGNfbmFtZSAhPSBcIlwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmxvZ2ljYWxVbml0c0ZvclByb2R1Y3RbaV0ubHVfZGNfbmFtZSAhPT0gZGF0YUNlbnRlci5kYyl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5hZGRQcm9kdWN0V2FybmluZyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRjX25hbWUgOiBkYXRhQ2VudGVyLmRjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHVfbmFtZSA6IGVudmlyb25tZW50Q3RybC5sb2dpY2FsVW5pdHNGb3JQcm9kdWN0W2ldLmx1X25hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdV9kY19uYW1lIDogZW52aXJvbm1lbnRDdHJsLmxvZ2ljYWxVbml0c0ZvclByb2R1Y3RbaV0ubHVfZGNfbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdENoYW5nZWQgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmIChlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9pZCkge1xuICAgICAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0UHJvZHVjdExvZ2ljYWxVbml0cyhlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9pZCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5sb2dpY2FsVW5pdHNGb3JQcm9kdWN0ID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuZGF0YUNlbnRlckNoYW5nZWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB2YXIgcHJvZHVjdCA9IF8uZmluZChlbnZpcm9ubWVudEN0cmwubmV3RW52UHJvZHVjdHMsIHtwcm9kdWN0X2lkOiBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9pZH0pO1xuICAgICAgICAgICAgICAgIGlmIChwcm9kdWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X3ZlcnNpb25zID0gcHJvZHVjdC5wcm9kdWN0X3ZlcnNpb25zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEubHVzID0gcGFyc2VJbnQocHJvZHVjdC5sdXMpO1xuICAgICAgICAgICAgICAgIC8vIGlmICghZW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YU9yaWcuYWxsb3dfd3JpdGUgJiYgIWVudmlyb25tZW50Q3RybC5hZGlfb25seSl7XG4gICAgICAgICAgICAgICAgLy8gICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgLy8gVERNU2VydmljZS5nZXREYkludGVyZmFjZXNCeVByb2R1Y3RMVXMoZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLnByb2R1Y3RfaWQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgICAgICAgICAgICAgIC8vICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuaW50ZXJmYWNlcyA9IHJlc3BvbnNlLnJlc3VsdDtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIF8uZWFjaChlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuaW50ZXJmYWNlcywgZnVuY3Rpb24gKGludGVyZmFjZSkge1xuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIGludGVyZmFjZS5zdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICBpbnRlcmZhY2UuaW50ZXJmYWNlX3N0YXR1cyA9IFwiQWN0aXZlXCI7XG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgIC8vICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRvYXN0ci5lcnJvcihcIlN5c3RlbSAjIFwiICsgZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLnByb2R1Y3RfaWQsIFwiZmFpbGVkIHRvIGdldCBpbnRlcmZhY2VzXCIpO1xuICAgICAgICAgICAgICAgIC8vICAgICB9XG4gICAgICAgICAgICAgICAgLy8gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFkZFByb2R1Y3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRDdHJsLmFkZFByb2R1Y3RJblByb2dyZXNzID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwuYWRkUHJvZHVjdEluUHJvZ3Jlc3MgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YSAmJiBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEuaW50ZXJmYWNlcyl7XG4gICAgICAgICAgICAgICAgXy5yZW1vdmUoZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLmludGVyZmFjZXMse2RlbGV0ZWQgOiB0cnVlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBURE1TZXJ2aWNlLnBvc3RFbnZQcm9kdWN0KGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQsIGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfbmFtZSwgZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5lcnJvckNvZGUgPT0gXCJTVUNDRVNTXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTeXN0ZW0gIyBcIiArIGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X2lkLCBcIkNyZWF0ZWQgU3VjY2Vzc2Z1bGx5XCIpO1xuICAgICAgICAgICAgICAgICAgICBURE1TZXJ2aWNlLmdldEVudlByb2R1Y3RzKGVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuZW52aXJvbm1lbnRfaWQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlID09IFwiU1VDQ0VTU1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLnByb2R1Y3RzID0gcmVzcG9uc2UucmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5kdEluc3RhbmNlUHJvZHVjdHMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFkZFByb2R1Y3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGVudmlyb25tZW50Q3RybC5nZXRTdW1tYXJ5RGF0YSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZW52aXJvbm1lbnRDdHJsLmFkZFByb2R1Y3RJblByb2dyZXNzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlN5c3RlbSAjIFwiICsgZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLnByb2R1Y3RfaWQsIFwiVW5hYmxlIHRvIENyZWF0ZSA6IFwiICsgcmVzcG9uc2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgZW52aXJvbm1lbnRDdHJsLm9wZW5Qcm9kdWN0RnVsbFZpZXcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGFGdWxsVmlldyA9IHtcbiAgICAgICAgICAgICAgICBwcm9kdWN0X2lkOiBlbnZpcm9ubWVudEN0cmwucHJvZHVjdERhdGEucHJvZHVjdF9pZCxcbiAgICAgICAgICAgICAgICBwcm9kdWN0X25hbWU6IGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X25hbWUsXG4gICAgICAgICAgICAgICAgcHJvZHVjdF9zdGF0dXM6IGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X3N0YXR1cyxcbiAgICAgICAgICAgICAgICBwcm9kdWN0X3ZlbmRvcjogZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhLnByb2R1Y3RfdmVuZG9yLFxuICAgICAgICAgICAgICAgIHByb2R1Y3RfdmVyc2lvbnM6IGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X3ZlcnNpb25zLFxuICAgICAgICAgICAgICAgIHByb2R1Y3RfZGVzY3JpcHRpb246IGVudmlyb25tZW50Q3RybC5wcm9kdWN0RGF0YS5wcm9kdWN0X2Rlc2NyaXB0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRlbnQub3BlblByb2R1Y3QoZW52aXJvbm1lbnRDdHJsLnByb2R1Y3REYXRhRnVsbFZpZXcpO1xuICAgICAgICB9O1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICAgIHRlbXBsYXRlVXJsOiB0ZW1wbGF0ZSxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6ICc9J1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6ICdlbnZpcm9ubWVudEN0cmwnXG4gICAgfTtcbn1cblxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnVERNLUZFJylcbiAgICAuZGlyZWN0aXZlKCdlbnZpcm9ubWVudERpcmVjdGl2ZScsIGVudmlyb25tZW50RGlyZWN0aXZlKTsiXX0=
