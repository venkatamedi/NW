function productDirective(){return{restrict:"E",templateUrl:"views/products/product.html",scope:{content:"="},controller:function($scope,$compile,TDMService,BreadCrumbsService,$uibModal,toastr,$timeout,SweetAlert,AuthService,DTColumnBuilder,DTOptionsBuilder,$q){var productCtrl=this;productCtrl.productData=$scope.content.productData,productCtrl.productData.product_versions=productCtrl.productData.product_versions.split(","),productCtrl.supportedDBTypes=TDMService.getDBTypes(),productCtrl.disableChange="Inactive"==productCtrl.productData.product_status||!AuthService.authorizedToEdit(0)||!$scope.content.openProducts,productCtrl.addInterface=function(update,index){if(1==update)var productInterface=angular.copy(productCtrl.interfacesData[index]);$uibModal.open({templateUrl:"views/products/productDBInterfaceModal.html",resolve:{productID:productCtrl.productData.product_id,productName:function(){return productCtrl.productData.product_name}},controller:function($scope,$uibModalInstance,TDMService,productID,productName){var productInterfacesCtrl=this;productInterfacesCtrl.productDBInterface={},productInterfacesCtrl.saveButton="ADD",1==update&&(productInterfacesCtrl.productDBInterface=productInterface,productInterfacesCtrl.productDBInterface.general_interface_type_id=productInterfacesCtrl.productDBInterface.interface_type_id,productInterfacesCtrl.saveButton="SAVE"),productInterfacesCtrl.supportedDBTypes=TDMService.getDBTypes(),productInterfacesCtrl.title="ADD_DB_INTERFACE",productInterfacesCtrl.addProductDBInterface=function(){if(productInterfacesCtrl.productDBInterface.interface_name&&productInterfacesCtrl.productDBInterface.interface_type_id)if(1==update){if(_.find(productCtrl.interfacesData,{interface_name:productInterfacesCtrl.productDBInterface.interface_name,interface_type_id:productInterfacesCtrl.productDBInterface.interface_type_id}))return toastr.error("No Changes Made Or Interface With The Same Name And Type Already Exists");TDMService.putProductInterface(productID,productName,productInterface.interface_id,productInterfacesCtrl.productDBInterface).then((function(response){if("SUCCESS"==response.errorCode){if(productInterfacesCtrl.productDBInterface.general_interface_type_id==productInterfacesCtrl.productDBInterface.interface_type_id)return void $uibModalInstance.close(productInterfacesCtrl.productDBInterface);if(productCtrl.hasActiveEnvironment.length>0){for(var envMessage="",i=0;i<productCtrl.hasActiveEnvironment.length;i++)envMessage+=productCtrl.hasActiveEnvironment[i].environment_name,i<productCtrl.hasActiveEnvironment.length-1&&(envMessage+=",");SweetAlert.swal({title:"Warning",type:"warning",text:"Please Update the interface details for related environments ["+envMessage+"]"})}$uibModalInstance.close(productInterfacesCtrl.productDBInterface)}else productInterfacesCtrl.interfacesAlert={type:"danger",msg:"failed to Update DB Interface ["+response.message+"]"}}))}else{if(_.find(productCtrl.interfacesData,{interface_name:productInterfacesCtrl.productDBInterface.interface_name,interface_type_id:productInterfacesCtrl.productDBInterface.interface_type_id}))return toastr.error("Interface With The Same Name And Type Already Exists");TDMService.postProductInterface(productID,productName,productInterfacesCtrl.productDBInterface).then((function(response){if("SUCCESS"==response.errorCode){if(productCtrl.hasActiveEnvironment.length>0){for(var envMessage="",i=0;i<productCtrl.hasActiveEnvironment.length;i++)envMessage+=productCtrl.hasActiveEnvironment[i].environment_name,i<productCtrl.hasActiveEnvironment.length-1&&(envMessage+=",");SweetAlert.swal({title:"Warning",type:"warning",text:"Please add the interface details for related environments ["+envMessage+"]"})}productInterfacesCtrl.productDBInterface.interface_id=response.result,$uibModalInstance.close(productInterfacesCtrl.productDBInterface)}else productInterfacesCtrl.interfacesAlert={type:"danger",msg:"failed to Add DB Interface ["+response.message+"]"}}))}},productInterfacesCtrl.close=function(){$uibModalInstance.close()}},controllerAs:"productInterfacesCtrl"}).result.then((function(productInterface){productInterface&&(1==update?productCtrl.interfacesData[index]=productInterface:productCtrl.interfacesData.push(productInterface),productCtrl.dtInstanceInterfaces.reloadData((function(data){}),!0))}))},productCtrl.removeInterface=function(index){productCtrl.hasActiveEnvironment.length>0?SweetAlert.swal({title:(1==productCtrl.interfacesData.length?"Product may be deleted from environments. Related tasks may also be deleted":"Interface may be also deleted from environments having this product.")+"Are you sure ?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"No",cancelButtonText:"Yes",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){isConfirm||TDMService.deleteProductInterface(productCtrl.productData.product_id,productCtrl.productData.product_name,productCtrl.interfacesData[index].interface_id,productCtrl.interfacesData[index].interface_name,productCtrl.interfacesData.length,productCtrl.hasActiveEnvironment.length).then((function(response){"SUCCESS"==response.errorCode?(productCtrl.interfacesData.splice(index,1),productCtrl.dtInstanceInterfaces.reloadData((function(data){}),!0)):toastr.error("Interface # "+productCtrl.interfacesData[index].interface_name,"Failed to delete : "+response.message)}))})):TDMService.deleteProductInterface(productCtrl.productData.product_id,productCtrl.productData.product_name,productCtrl.interfacesData[index].interface_id,productCtrl.interfacesData[index].interface_name,productCtrl.interfacesData.length,productCtrl.hasActiveEnvironment.length).then((function(response){"SUCCESS"==response.errorCode?(productCtrl.interfacesData.splice(index,1),productCtrl.dtInstanceInterfaces.reloadData((function(data){}),!0)):toastr.error("Interface # "+productCtrl.interfacesData[index].interface_name,"Failed to delete : "+response.message)}))},productCtrl.addLogicalUnit=function(){$uibModal.open({templateUrl:"views/products/productLogicalUnitModal.html",resolve:{productID:function(){return productCtrl.productData.product_id},productName:function(){return productCtrl.productData.product_name}},controller:function($scope,$uibModalInstance,TDMService,productID,productName){var productLogicalUnitCtrl=this;productLogicalUnitCtrl.title="ADD_LOGICAL_UNIT",TDMService.getLogicalUnitsWithoutProduct().then((function(response){"SUCCESS"==response.errorCode?(productLogicalUnitCtrl.logicalUnitsWithoutProductData=_.map(response.result,(function(lu){return lu.be_id=parseInt(lu.be_id),lu})),TDMService.getBusinessEntities().then((function(response){"SUCCESS"==response.errorCode?productLogicalUnitCtrl.businessEntities=_.filter(response.result,(function(be){return!("Active"!=be.be_status||!_.find(productLogicalUnitCtrl.logicalUnitsWithoutProductData,{be_id:be.be_id}))})):productLogicalUnitCtrl.businessEntitiesAlert={type:"danger",msg:"failed to get logical units without system"}}))):productLogicalUnitCtrl.logicalUnitAlert={type:"danger",msg:"failed to get logical units without system"}})),productLogicalUnitCtrl.addLogicalUnit=function(){var be_id=-1;if(productLogicalUnitCtrl.newProductLogicalUnit&&productLogicalUnitCtrl.newProductLogicalUnit.length>0){be_id=productLogicalUnitCtrl.newProductLogicalUnit[0].be_id;var body={product_id:productID,product_name:productName,logicalUnits:productLogicalUnitCtrl.newProductLogicalUnit,be_id:be_id};TDMService.putLogicalUnits(body).then((function(response){"SUCCESS"==response.errorCode?$uibModalInstance.close(productLogicalUnitCtrl.newProductLogicalUnit):productLogicalUnitCtrl.logicalUnitAlert={type:"danger",msg:"failed to Add Logical Unit ["+response.message+"]"}}))}},productLogicalUnitCtrl.closeAlert=function(){delete productLogicalUnitCtrl.logicalUnitAlert},productLogicalUnitCtrl.close=function(){$uibModalInstance.close()}},controllerAs:"productLogicalUnitCtrl"}).result.then((function(newProductLogicalUnit){if(newProductLogicalUnit)for(var i=0;i<newProductLogicalUnit.length;i++)newProductLogicalUnit[i].product_id=productCtrl.productData.product_id,newProductLogicalUnit[i].product_name=productCtrl.productData.product_name,productCtrl.logicalUnitsData.push(newProductLogicalUnit[i]);productCtrl.dtInstanceLUs.reloadData((function(data){}),!0)}))},productCtrl.removeLogicalUnit=function(index){var el=angular.copy(productCtrl.logicalUnitsData).splice(index,1);el[0].product_id=-1,el[0].product_name="",TDMService.putLogicalUnit(el[0]).then((function(response){if("SUCCESS"==response.errorCode){if(productCtrl.logicalUnitsData.splice(index,1),0==productCtrl.logicalUnitsData.length)for(var i=0;i<productCtrl.hasActiveEnvironment.length;i++)TDMService.deleteEnvProduct(productCtrl.hasActiveEnvironment[i].environment_id,productCtrl.hasActiveEnvironment[i].environment_name,productCtrl.productData.product_id).then((function(response){}));productCtrl.dtInstanceLUs.reloadData((function(data){}),!0)}else toastr.error("Logical Unit "+productCtrl.logicalUnitsData[index].lu_name,"Failed to delete : "+response.message)}))},productCtrl.loadingTableInterfaces=!0,TDMService.getProductEnvCount(productCtrl.productData.product_id).then((function(response){"SUCCESS"==response.errorCode?(productCtrl.hasActiveEnvironment=response.result,productCtrl.loadingTableLUs=!0,TDMService.getProductLogicalUnits(productCtrl.productData.product_id).then((function(response){if("SUCCESS"==response.errorCode){productCtrl.logicalUnitsData=response.result,productCtrl.dtInstanceLUs={},productCtrl.dtColumnsLUs=[],productCtrl.dtColumnDefsLUs=[],productCtrl.headersLUs=[{column:"actions",name:"",clickAble:!1},{column:"lu_name",name:"Name",clickAble:!0},{column:"lu_description",name:"Description",clickAble:!1},{column:"lu_parent_name",name:"Parent LU",clickAble:!1},{column:"be_name",name:"Business Entity",clickAble:!1}];for(var renderLUActions=function(data,type,full,meta){return'<div style="display: flex;justify-content: space-around;max-width: 100px;"><div ><img  src="icons/delete-icon.svg" alt="delete"  uib-tooltip="Remove Logical Unit" tooltip-placement="right"  tooltip-append-to-body="true"mwl-confirm message="'+(productCtrl.hasActiveEnvironment.length>0?1==productCtrl.logicalUnitsData.length?"Logical Unit "+full.lu_name+" is attached to testing environments. If you remove this Logical Unit, system may be removed from environments. Tasks for this system may be also deleted. Are you sure you want to delete it ?":"Logical Unit "+full.lu_name+" is attached to testing environments. Are you sure you want to delete it ?":"Are you sure you want to delete this Logical Unit?")+'" confirm-text="Yes <i class=\'glyphicon glyphicon-ok\'</i>" cancel-text="No <i class=\'glyphicon glyphicon-remove\'></i>"  placement="right" on-confirm="productCtrl.removeLogicalUnit('+meta.row+')" on-cancel="cancelClicked = true" confirm-button-type="danger" cancel-button-type="default"role-handler="" role="0" ng-if="!productCtrl.disableChange"></div></div>'},i=0;i<productCtrl.headersLUs.length;i++)"actions"==productCtrl.headersLUs[i].column?productCtrl.dtColumnsLUs.push(DTColumnBuilder.newColumn(productCtrl.headersLUs[i].column).withTitle(productCtrl.headersLUs[i].name).renderWith(renderLUActions)):productCtrl.dtColumnsLUs.push(DTColumnBuilder.newColumn(productCtrl.headersLUs[i].column).withTitle(productCtrl.headersLUs[i].name));var getTableDataLUs=function(){var deferred=$q.defer();return deferred.resolve(productCtrl.logicalUnitsData),deferred.promise};productCtrl.dtOptionsLUs=DTOptionsBuilder.fromFnPromise((function(){return getTableDataLUs()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withOption("searching",!1).withOption("info",!1).withButtons([]).withButtons([]).withOption("search",{caseInsensitive:!1}),productCtrl.dtInstanceCallbackLUs=function(dtInstance){angular.isFunction(productCtrl.dtInstanceLUs)?productCtrl.dtInstance(dtInstance):angular.isDefined(productCtrl.dtInstanceLUs)&&(productCtrl.dtInstanceLUs=dtInstance)},null!=productCtrl.dtInstanceLUs.changeData&&productCtrl.dtInstanceLUs.changeData(getTableDataLUs()),productCtrl.loadingTableLUs=!1}else toastr.error("System # "+productCtrl.productData.product_name,"failed to get Logical Units")}))):productCtrl.hasActiveEnvironment=[]})),productCtrl.saveChanges=function(){var productToUpdate=angular.copy(productCtrl.productData);productToUpdate.product_versions=productToUpdate.product_versions.join(","),TDMService.updateProduct(productCtrl.productData.product_id,productToUpdate).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("System # "+productCtrl.productData.product_name,"Updated Successfully"),$timeout((function(){$scope.content.openProducts()}),400)):toastr.error("System # "+productCtrl.productData.product_name,"failed to Update : "+response.message)}))},productCtrl.deleteProduct=function(){productCtrl.hasActiveEnvironment.length>0?SweetAlert.swal({title:"System may be deleted from environments. Related tasks may also be deleted,Are you sure ?",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"No",cancelButtonText:"Yes",closeOnConfirm:!0,closeOnCancel:!0,animation:"false",customClass:"animated fadeInUp"},(function(isConfirm){isConfirm||TDMService.deleteProduct(productCtrl.productData.product_id).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("System # "+productCtrl.productData.product_id,"deleted Successfully"),$timeout((function(){$scope.content.openProducts()}),400)):toastr.error("System # "+productCtrl.productData.product_id,"failed to delete")}))})):TDMService.deleteProduct(productCtrl.productData.product_id).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("System # "+productCtrl.productData.product_id,"deleted Successfully"),$timeout((function(){$scope.content.openProducts()}),400)):toastr.error("System # "+productCtrl.productData.product_id,"failed to delete")}))},productCtrl.addVersion=function(newVersion){newVersion&&(productCtrl.productData.product_versions||(productCtrl.productData.product_versions=[]),productCtrl.productData.product_versions.indexOf(newVersion)>=0?productCtrl.addVersionError=!0:(productCtrl.productData.product_versions.push(newVersion),productCtrl.isOpen=!1))},productCtrl.initAddVersionPopup=function(){productCtrl.addVersionError=!1,productCtrl.versionToAdd="",productCtrl.isOpen=!0},BreadCrumbsService.push({productID:productCtrl.productData.product_name},"PRODUCT_BREADCRUMB",(function(){}))},controllerAs:"productCtrl"}}angular.module("TDM-FE").directive("productDirective",productDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
