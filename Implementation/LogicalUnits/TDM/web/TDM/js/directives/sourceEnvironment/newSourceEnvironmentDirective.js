function newSourceEnvironmentDirective(){return{restrict:"E",templateUrl:"views/soruceEnvrionments/newSourceEnvironment.html",scope:{content:"="},controller:function($scope,TDMService,BreadCrumbsService,toastr,$timeout){var newSourceEnvironmentCtrl=this;newSourceEnvironmentCtrl.environmentData={},newSourceEnvironmentCtrl.environments=$scope.content.environments,TDMService.getGenericAPI("k2view/sourceEnvironments").then((function(response){newSourceEnvironmentCtrl.availableSourceEnvironments=_.filter(response.result,(function(env){return!(_.findIndex(newSourceEnvironmentCtrl.environments,{source_environment_name:env,environment_status:"Active"})>=0)}))})).catch((function(err){toastr.error("New Source Environment","Unable to get available Source Environment")})),newSourceEnvironmentCtrl.addEnvironment=function(){if(_.find(newSourceEnvironmentCtrl.environments,{source_environment_name:newSourceEnvironmentCtrl.environmentData.source_environment_name,environment_status:"Active"}))return toastr.error("Source Environment # "+newSourceEnvironmentCtrl.environmentData.source_environment_name+" Already Exists");TDMService.postGenericAPI("sourceEnvironment",newSourceEnvironmentCtrl.environmentData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Source Environment # "+newSourceEnvironmentCtrl.environmentData.source_environment_name,"Created Successfully"),$timeout((function(){$scope.content.openEnvironment(response.result)}),300)):toastr.error("Source Environment # "+newSourceEnvironmentCtrl.environmentData.source_environment_name,"Unable to Create : "+response.message)}))},BreadCrumbsService.push({},"NEW_SOURCE_ENVIRONMENT",(function(){}))},controllerAs:"newSourceEnvironmentCtrl"}}angular.module("TDM-FE").directive("newSourceEnvironmentDirective",newSourceEnvironmentDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvc291cmNlRW52aXJvbm1lbnQvbmV3U291cmNlRW52aXJvbm1lbnREaXJlY3RpdmUuanMiXSwibmFtZXMiOlsibmV3U291cmNlRW52aXJvbm1lbnREaXJlY3RpdmUiLCJyZXN0cmljdCIsInRlbXBsYXRlVXJsIiwic2NvcGUiLCJjb250ZW50IiwiY29udHJvbGxlciIsIiRzY29wZSIsIlRETVNlcnZpY2UiLCJCcmVhZENydW1ic1NlcnZpY2UiLCJ0b2FzdHIiLCIkdGltZW91dCIsIm5ld1NvdXJjZUVudmlyb25tZW50Q3RybCIsInRoaXMiLCJlbnZpcm9ubWVudERhdGEiLCJlbnZpcm9ubWVudHMiLCJnZXRHZW5lcmljQVBJIiwidGhlbiIsInJlc3BvbnNlIiwiYXZhaWxhYmxlU291cmNlRW52aXJvbm1lbnRzIiwiXyIsImZpbHRlciIsInJlc3VsdCIsImVudiIsImZpbmRJbmRleCIsInNvdXJjZV9lbnZpcm9ubWVudF9uYW1lIiwiZW52aXJvbm1lbnRfc3RhdHVzIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsImFkZEVudmlyb25tZW50IiwiZmluZCIsInBvc3RHZW5lcmljQVBJIiwiZXJyb3JDb2RlIiwic3VjY2VzcyIsIm9wZW5FbnZpcm9ubWVudCIsIm1lc3NhZ2UiLCJwdXNoIiwiY29udHJvbGxlckFzIiwiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsZ0NBMkNMLE1BQU8sQ0FDSEMsU0FBVSxJQUNWQyxZQTNDVyxxREE0Q1hDLE1BQU8sQ0FDSEMsUUFBUyxLQUViQyxXQTdDYSxTQUFVQyxPQUFPQyxXQUFXQyxtQkFBbUJDLE9BQU9DLFVBQ25FLElBQUlDLHlCQUEyQkMsS0FFL0JELHlCQUF5QkUsZ0JBQWtCLEdBQzNDRix5QkFBeUJHLGFBQWVSLE9BQU9GLFFBQVFVLGFBRXZEUCxXQUFXUSxjQUFjLDZCQUE2QkMsTUFBSyxTQUFTQyxVQUNoRU4seUJBQXlCTyw0QkFBOEJDLEVBQUVDLE9BQU9ILFNBQVNJLFFBQU8sU0FBU0MsS0FDckYsUUFBSUgsRUFBRUksVUFBVVoseUJBQXlCRyxhQUFhLENBQUNVLHdCQUEwQkYsSUFBSUcsbUJBQXFCLFlBQWMsU0FLN0hDLE9BQU0sU0FBU0MsS0FDZGxCLE9BQU9tQixNQUFNLHlCQUF5QixpREFHMUNqQix5QkFBeUJrQixlQUFpQixXQUN0QyxHQUFJVixFQUFFVyxLQUFLbkIseUJBQXlCRyxhQUFjLENBQUNVLHdCQUF5QmIseUJBQXlCRSxnQkFBZ0JXLHdCQUF3QkMsbUJBQXFCLFdBQzlKLE9BQU9oQixPQUFPbUIsTUFBTSx3QkFBMEJqQix5QkFBeUJFLGdCQUFnQlcsd0JBQTBCLG1CQUVySGpCLFdBQVd3QixlQUFlLG9CQUFvQnBCLHlCQUF5QkUsaUJBQWlCRyxNQUFLLFNBQVNDLFVBQ3BFLFdBQXRCQSxTQUFTZSxXQUNUdkIsT0FBT3dCLFFBQVEsd0JBQTBCdEIseUJBQXlCRSxnQkFBZ0JXLHdCQUF3Qix3QkFDMUdkLFVBQVMsV0FDTEosT0FBT0YsUUFBUThCLGdCQUFnQmpCLFNBQVNJLFVBQzFDLE1BR0ZaLE9BQU9tQixNQUFNLHdCQUEwQmpCLHlCQUF5QkUsZ0JBQWdCVyx3QkFBd0Isc0JBQXdCUCxTQUFTa0IsYUFLekozQixtQkFBbUI0QixLQUFLLEdBQUcsMEJBQXlCLGdCQVlwREMsYUFBYyw0QkFLdEJDLFFBQ0tDLE9BQU8sVUFDUEMsVUFBVSxnQ0FBaUN4QyIsImZpbGUiOiJkaXJlY3RpdmVzL3NvdXJjZUVudmlyb25tZW50L25ld1NvdXJjZUVudmlyb25tZW50RGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gbmV3U291cmNlRW52aXJvbm1lbnREaXJlY3RpdmUgKCl7XG5cbiAgICB2YXIgdGVtcGxhdGUgPSBcInZpZXdzL3NvcnVjZUVudnJpb25tZW50cy9uZXdTb3VyY2VFbnZpcm9ubWVudC5odG1sXCI7XG5cbiAgICB2YXIgY29udHJvbGxlciA9IGZ1bmN0aW9uICgkc2NvcGUsVERNU2VydmljZSxCcmVhZENydW1ic1NlcnZpY2UsdG9hc3RyLCR0aW1lb3V0KSB7XG4gICAgICAgIHZhciBuZXdTb3VyY2VFbnZpcm9ubWVudEN0cmwgPSB0aGlzO1xuXG4gICAgICAgIG5ld1NvdXJjZUVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEgPSB7fTtcbiAgICAgICAgbmV3U291cmNlRW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50cyA9ICRzY29wZS5jb250ZW50LmVudmlyb25tZW50cztcblxuICAgICAgICBURE1TZXJ2aWNlLmdldEdlbmVyaWNBUEkoJ2sydmlldy9zb3VyY2VFbnZpcm9ubWVudHMnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIG5ld1NvdXJjZUVudmlyb25tZW50Q3RybC5hdmFpbGFibGVTb3VyY2VFbnZpcm9ubWVudHMgPSBfLmZpbHRlcihyZXNwb25zZS5yZXN1bHQsZnVuY3Rpb24oZW52KXtcbiAgICAgICAgICAgICAgICBpZiAoXy5maW5kSW5kZXgobmV3U291cmNlRW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50cyx7c291cmNlX2Vudmlyb25tZW50X25hbWUgOiBlbnYsZW52aXJvbm1lbnRfc3RhdHVzIDogJ0FjdGl2ZSd9KSA+PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpe1xuICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiTmV3IFNvdXJjZSBFbnZpcm9ubWVudFwiLFwiVW5hYmxlIHRvIGdldCBhdmFpbGFibGUgU291cmNlIEVudmlyb25tZW50XCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICBuZXdTb3VyY2VFbnZpcm9ubWVudEN0cmwuYWRkRW52aXJvbm1lbnQgPSBmdW5jdGlvbigpe1xuICAgICAgICAgICAgaWYgKF8uZmluZChuZXdTb3VyY2VFbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnRzLCB7c291cmNlX2Vudmlyb25tZW50X25hbWU6IG5ld1NvdXJjZUVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuc291cmNlX2Vudmlyb25tZW50X25hbWUsZW52aXJvbm1lbnRfc3RhdHVzIDogJ0FjdGl2ZSd9KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2FzdHIuZXJyb3IoXCJTb3VyY2UgRW52aXJvbm1lbnQgIyBcIiArIG5ld1NvdXJjZUVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuc291cmNlX2Vudmlyb25tZW50X25hbWUgKyBcIiBBbHJlYWR5IEV4aXN0c1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFRETVNlcnZpY2UucG9zdEdlbmVyaWNBUEkoJ3NvdXJjZUVudmlyb25tZW50JyxuZXdTb3VyY2VFbnZpcm9ubWVudEN0cmwuZW52aXJvbm1lbnREYXRhKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yQ29kZSA9PSBcIlNVQ0NFU1NcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTb3VyY2UgRW52aXJvbm1lbnQgIyBcIiArIG5ld1NvdXJjZUVudmlyb25tZW50Q3RybC5lbnZpcm9ubWVudERhdGEuc291cmNlX2Vudmlyb25tZW50X25hbWUsXCJDcmVhdGVkIFN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRlbnQub3BlbkVudmlyb25tZW50KHJlc3BvbnNlLnJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LDMwMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlNvdXJjZSBFbnZpcm9ubWVudCAjIFwiICsgbmV3U291cmNlRW52aXJvbm1lbnRDdHJsLmVudmlyb25tZW50RGF0YS5zb3VyY2VfZW52aXJvbm1lbnRfbmFtZSxcIlVuYWJsZSB0byBDcmVhdGUgOiBcIiArIHJlc3BvbnNlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBCcmVhZENydW1ic1NlcnZpY2UucHVzaCh7fSwnTkVXX1NPVVJDRV9FTlZJUk9OTUVOVCcsZnVuY3Rpb24oKXtcblxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxuICAgICAgICB0ZW1wbGF0ZVVybDogdGVtcGxhdGUsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBjb250ZW50OiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgY29udHJvbGxlcjogY29udHJvbGxlcixcbiAgICAgICAgY29udHJvbGxlckFzIDonbmV3U291cmNlRW52aXJvbm1lbnRDdHJsJ1xuICAgIH07XG59XG5cblxuYW5ndWxhclxuICAgIC5tb2R1bGUoJ1RETS1GRScpXG4gICAgLmRpcmVjdGl2ZSgnbmV3U291cmNlRW52aXJvbm1lbnREaXJlY3RpdmUnLCBuZXdTb3VyY2VFbnZpcm9ubWVudERpcmVjdGl2ZSk7Il19
