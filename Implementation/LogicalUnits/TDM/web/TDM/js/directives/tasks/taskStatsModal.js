function taskStatsModalDirective(TDMService,$filter,DTColumnBuilder,DTOptionsBuilder,$q,$compile){return{templateUrl:"views/tasks/taskStatsModal.html",controllerAs:"taskStatsModalCtrl",controller:function($scope){let taskStatsModalCtrl=this;taskStatsModalCtrl.openTab=function(tabId){taskStatsModalCtrl.tab=tabId},taskStatsModalCtrl.updatePopup=function(targetId){$scope.updatePopup(targetId,taskStatsModalCtrl.selectedLU.lu_name)},taskStatsModalCtrl.refreshTable=node=>{var targetId=node.targetId,parentTargetId=node.parentTargetId,luName=node.lu_name,isRoot=node.isRoot,hasBrothers=node.brothers&&node.brothers.length>1||!1;let body={taskExecutionId:$scope.taskExecutionId,parentTargetId:isRoot||!hasBrothers?void 0:parentTargetId,targetId:isRoot||!hasBrothers?targetId:void 0,lu_name:luName};taskStatsModalCtrl.errorFailedReason=null,taskStatsModalCtrl.loadingTables=!0,TDMService.getTDMStats(body).then(res=>{let tableData=res.result.data;node.hasBrothers||(taskStatsModalCtrl.errorFailedReason=tableData&&tableData["Failed entities per execution"]&&tableData["Failed entities per execution"].entitiesList&&tableData["Failed entities per execution"].entitiesList.length>0&&tableData["Failed entities per execution"].entitiesList[0].errorMsg||void 0),taskStatsModalCtrl.makeTables=isRoot=>{taskStatsModalCtrl.makeCopiedEntitiesTable(isRoot),taskStatsModalCtrl.makeFailedEntitiesTable(isRoot)},taskStatsModalCtrl.makeCopiedEntitiesTable=function(isRoot){taskStatsModalCtrl.dtInstancecEntities={},taskStatsModalCtrl.dtColumnscEntities=[],taskStatsModalCtrl.dtColumnDefscEntities=[],taskStatsModalCtrl.headerscEntities=isRoot?[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1},{column:"copyEntityStatus",name:"Entity Status",clickAble:!1},{column:"copyHierarchyStatus",name:"Hierarchy Data Status",clickAble:!1}]:[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1},{column:"parentLuName",name:"Parent LU Name",clickAble:!1},{column:"parentSourceId",name:"Parent Source ID",clickAble:!1},{column:"parentTargetId",name:"Parent Target ID",clickAble:!1}];let clickableCol=(data,type,full)=>`<a ng-click="taskStatsModalCtrl.updatePopup('${full.targetId}')">  ${data} </a>`;for(var i=0;i<taskStatsModalCtrl.headerscEntities.length;i++)taskStatsModalCtrl.headerscEntities[i].clickAble?taskStatsModalCtrl.dtColumnscEntities.push(DTColumnBuilder.newColumn(taskStatsModalCtrl.headerscEntities[i].column).withTitle(taskStatsModalCtrl.headerscEntities[i].name).renderWith(clickableCol)):taskStatsModalCtrl.dtColumnscEntities.push(DTColumnBuilder.newColumn(taskStatsModalCtrl.headerscEntities[i].column).withTitle(taskStatsModalCtrl.headerscEntities[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(taskStatsModalCtrl.cEntities),deferred.promise};taskStatsModalCtrl.dtOptionscEntities=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!0).withOption("paging",!0).withOption("searching",!0).withOption("info",!0).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),taskStatsModalCtrl.dtInstanceCallbackcEntities=function(dtInstance){angular.isFunction(taskStatsModalCtrl.dtInstancecEntities)?taskStatsModalCtrl.dtInstancecEntities(dtInstance):angular.isDefined(taskStatsModalCtrl.dtInstancecEntities)&&(taskStatsModalCtrl.dtInstancecEntities=dtInstance)},null!=taskStatsModalCtrl.dtInstancecEntities.changeData&&taskStatsModalCtrl.dtInstancecEntities.changeData(getTableData()),taskStatsModalCtrl.loadingTableCopiedEntities=!1,taskStatsModalCtrl.dtInstancecEntities&&taskStatsModalCtrl.dtInstancecEntities.reloadData&&taskStatsModalCtrl.dtInstancecEntities.reloadData((function(data){}),!1)},taskStatsModalCtrl.makeFailedEntitiesTable=function(isRoot){taskStatsModalCtrl.dtInstancefEntities={},taskStatsModalCtrl.dtColumnsfEntities=[],taskStatsModalCtrl.dtColumnDefsfEntities=[],taskStatsModalCtrl.headersfEntities=isRoot?[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1},{column:"copyEntityStatus",name:"Entity Status",clickAble:!1},{column:"copyHierarchyStatus",name:"Hierarchy Data Status",clickAble:!1}]:[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1},{column:"parentLuName",name:"Parent LU Name",clickAble:!1},{column:"parentSourceId",name:"Parent Source ID",clickAble:!1},{column:"parentTargetId",name:"Parent Target ID",clickAble:!1},{column:"copyEntityStatus",name:"Entity Status",clickAble:!1},{column:"copyHierarchyStatus",name:"Hierarchy Data Status",clickAble:!1}];let clickableCol=(data,type,full)=>`<a ng-click="taskStatsModalCtrl.updatePopup('${full.targetId}')">  ${data} </a>`;for(var i=0;i<taskStatsModalCtrl.headersfEntities.length;i++)taskStatsModalCtrl.headersfEntities[i].clickAble?taskStatsModalCtrl.dtColumnsfEntities.push(DTColumnBuilder.newColumn(taskStatsModalCtrl.headersfEntities[i].column).withTitle(taskStatsModalCtrl.headersfEntities[i].name).renderWith(clickableCol)):taskStatsModalCtrl.dtColumnsfEntities.push(DTColumnBuilder.newColumn(taskStatsModalCtrl.headersfEntities[i].column).withTitle(taskStatsModalCtrl.headersfEntities[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(taskStatsModalCtrl.fEntities),deferred.promise};taskStatsModalCtrl.dtOptionsfEntities=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!0).withOption("paging",!0).withOption("searching",!0).withOption("info",!0).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),taskStatsModalCtrl.dtInstanceCallbackfEntities=function(dtInstance){angular.isFunction(taskStatsModalCtrl.dtInstancefEntities)?taskStatsModalCtrl.dtInstancefEntities(dtInstance):angular.isDefined(taskStatsModalCtrl.dtInstancefEntities)&&(taskStatsModalCtrl.dtInstancefEntities=dtInstance)},null!=taskStatsModalCtrl.dtInstancefEntities.changeData&&taskStatsModalCtrl.dtInstancefEntities.changeData(getTableData()),taskStatsModalCtrl.loadingTableFailedEntities=!1},tableData?(tableData["Copied entities per execution"]&&(taskStatsModalCtrl.totalCopiedEntities=tableData["Copied entities per execution"].NoOfEntities,taskStatsModalCtrl.cEntities=tableData["Copied entities per execution"].entitiesList,taskStatsModalCtrl.cEntitiesTitle=`${$filter("translate")("COPIED")} ${$filter("translate")("LIST")}`),tableData["Failed entities per execution"]&&(taskStatsModalCtrl.totalFailedEntities=tableData["Failed entities per execution"].NoOfEntities,taskStatsModalCtrl.fEntities=tableData["Failed entities per execution"].entitiesList,taskStatsModalCtrl.fEntities=taskStatsModalCtrl.fEntities,taskStatsModalCtrl.fEntitiesTitle=`${$filter("translate")("FAILED")} ${$filter("translate")("LIST")}`)):(taskStatsModalCtrl.totalCopiedEntities=0,taskStatsModalCtrl.totalFailedEntities=0,taskStatsModalCtrl.fEntities=[],taskStatsModalCtrl.cEntities=[]),taskStatsModalCtrl.makeTables(isRoot),taskStatsModalCtrl.loadingTables=!1,taskStatsModalCtrl.tab||(taskStatsModalCtrl.tab=1)})},taskStatsModalCtrl.updateTDMStats=function(item){for(i of(taskStatsModalCtrl.selectedLU=item,item.collapsed=!1,$scope.luTreeMenu.forEach((function(root){item.isRoot?root.collapsed=!1:item.parentRootLuName!==root.lu_name&&(root.collapsed=!0)})),$scope.luTreeMenu))if(i.selected=!1,i.children)for(child of i.children)child.selected=!1;taskStatsModalCtrl.refreshTable(item)};var updateTree=function(element){if(element.children&&0!=element.children.length){var i;for(i=0;i<element.children.length;i++)updateTree(element.children[i]);if(element.children&&element.children.length>1){var newChildren=[],groupByLU=_.groupBy(element.children,"lu_name");for(var key in groupByLU){var newChild=groupByLU[key][0];newChild.brothers=groupByLU[key],newChildren.push(newChild)}element.children=newChildren}}},searchTree=function(element,lu_name,target_id){if(element.lu_name==lu_name&&element.targetId==target_id)return element.selected=!0,element;if(null!=element.children){var i,result=null;for(i=0;null==result&&i<element.children.length;i++)(result=searchTree(element.children[i],lu_name,target_id))&&(element.collapsed=!1);return result}return!1};TDMService.getLuTree({targetId:$scope.targetId,luName:$scope.luName,taskExecutionId:$scope.taskExecutionId}).then(response=>{for(var result=null,i=0;i<response.result.length;i++)result=searchTree(response.result[i],$scope.luName,$scope.targetId),updateTree(response.result[i]);$scope.luTreeMenu=response.result,result&&taskStatsModalCtrl.updateTDMStats(result)})},scope:{taskExecutionId:"=",targetId:"=",luName:"=",updatePopup:"=",close:"="}}}angular.module("TDM-FE").directive("taskStatsModalDirective",taskStatsModalDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
