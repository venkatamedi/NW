function taskHistoryDirective($interval){return{restrict:"EA",templateUrl:"views/tasks/tasksHistoryTable.html",scope:{content:"="},link:function(scope,element,attr){scope.updateRunningExecutions&&scope.updateRunningExecutions();var updateData=$interval((function(){scope.updateRunningExecutions&&scope.updateRunningExecutions()}),2e3);element.on("$destroy",(function(){$interval.cancel(updateData)}))},controller:function($scope,$rootScope,$window,$compile,$timeout,TDMService,AuthService,DTColumnBuilder,DTOptionsBuilder,DTColumnDefBuilder,$q,$sessionStorage,$http,toastr,$interval,$uibModal,ExcelService){var taskHistoryTableCtrl=this;taskHistoryTableCtrl.taskData=$scope.content.task,taskHistoryTableCtrl.loadingTable=!0,$rootScope.inter_flag=!1,taskHistoryTableCtrl.userRole=AuthService.getRole(),taskHistoryTableCtrl.username=AuthService.getUsername(),taskHistoryTableCtrl.TDMReports=AuthService.getTDMReports(),taskHistoryTableCtrl.enableStopExecution=!1,"Active"==taskHistoryTableCtrl.taskData.task_status&&("admin"==taskHistoryTableCtrl.userRole.type||taskHistoryTableCtrl.taskData.owners.indexOf(taskHistoryTableCtrl.username)>=0||taskHistoryTableCtrl.username==taskHistoryTableCtrl.taskData.task_created_by)&&(taskHistoryTableCtrl.enableStopExecution=!0),taskHistoryTableCtrl.disableAccessingStatistics=!!(taskHistoryTableCtrl.taskData.disabled||taskHistoryTableCtrl.taskData.onHold||taskHistoryTableCtrl.taskData.executioncount),TDMService.getTaskHistory($scope.content.exec_id).then((function(response){if("SUCCESS"==response.errorCode){taskHistoryTableCtrl.taskType="LOAD",response.result&&response.result.length>0&&(taskHistoryTableCtrl.taskType=response.result[0].task_type||"LOAD"),taskHistoryTableCtrl.runningExecutions=[];var pendingTasks=!1;taskHistoryTableCtrl.taskHistoryData=_.filter(response.result,(function(execution){return!execution.execution_status||("RUNNING"==execution.execution_status.toUpperCase()||"EXECUTING"==execution.execution_status.toUpperCase()||"STARTED"==execution.execution_status.toUpperCase()||"STARTEXECUTIONREQUESTED"==execution.execution_status.toUpperCase()?(taskHistoryTableCtrl.runningExecutions.push(execution),taskHistoryTableCtrl.runningExecution=execution.task_execution_id,!1):("PENDING"!=execution.execution_status.toUpperCase()&&"PAUSED"!=execution.execution_status.toUpperCase()||(taskHistoryTableCtrl.runningExecution=execution.task_execution_id),"PENDING"==execution.execution_status.toUpperCase()&&(pendingTasks=!0),!0))})),0==taskHistoryTableCtrl.runningExecutions.length&&taskHistoryTableCtrl.ExtractRefStatsStarted&&($timeout.cancel(taskHistoryTableCtrl.ExtractRefStatsStarted),taskHistoryTableCtrl.ExtractRefStatsStarted=null),pendingTasks&&0==taskHistoryTableCtrl.runningExecutions.length&&$timeout((function(){$rootScope.$broadcast("refreshPage",!0)}),1e4),taskHistoryTableCtrl.taskHistoryData=_.sortBy(taskHistoryTableCtrl.taskHistoryData,(function(value){return-1*value.task_execution_id})),taskHistoryTableCtrl.executionIds=_.map(taskHistoryTableCtrl.runningExecutions,(function(execution){return{name:execution.lu_name||execution.process_name,etl_execution_id:execution.etl_execution_id,etl_ip_address:execution.etl_ip_address,fabric_execution_id:execution.fabric_execution_id,task_execution_id:execution.task_execution_id}})),taskHistoryTableCtrl.disableAccessingStatistics=!!taskHistoryTableCtrl.executionIds.length,taskHistoryTableCtrl.reloadData=function(){taskHistoryTableCtrl.runningExecution=null,taskHistoryTableCtrl.runningExecutions=[],TDMService.getTaskHistory($scope.content.exec_id).then((function(response){if("SUCCESS"!=response.errorCode)return;let pendingTasks=!1;taskHistoryTableCtrl.taskHistoryData=_.filter(response.result,(function(execution){return"RUNNING"==execution.execution_status.toUpperCase()||"EXECUTING"==execution.execution_status.toUpperCase()||"STARTED"==execution.execution_status.toUpperCase()||"STARTEXECUTIONREQUESTED"==execution.execution_status.toUpperCase()?(taskHistoryTableCtrl.runningExecution=execution.task_execution_id,taskHistoryTableCtrl.runningExecutions.push(execution),!1):("PENDING"!=execution.execution_status.toUpperCase()&&"PAUSED"!=execution.execution_status.toUpperCase()||(taskHistoryTableCtrl.runningExecution=execution.task_execution_id),"PENDING"==execution.execution_status.toUpperCase()&&(pendingTasks=!0),!0)})),pendingTasks&&0==taskHistoryTableCtrl.runningExecutions.length&&$timeout((function(){$rootScope.$broadcast("refreshPage",!0)}),1e4),taskHistoryTableCtrl.executionIds=_.map(taskHistoryTableCtrl.runningExecutions,(function(execution){return{name:execution.lu_name||execution.process_name,etl_execution_id:execution.etl_execution_id,etl_ip_address:execution.etl_ip_address,fabric_execution_id:execution.fabric_execution_id,task_execution_id:execution.task_execution_id}})),taskHistoryTableCtrl.taskHistoryData=_.sortBy(taskHistoryTableCtrl.taskHistoryData,(function(value){return-1*value.task_execution_id})),taskHistoryTableCtrl.dtInstance.reloadData((function(data){}),!1)}))},taskHistoryTableCtrl.stopExecution=function(executionId){0!=taskHistoryTableCtrl.executionIds.length&&TDMService.postGenericAPI("cancelMigratWS",{taskExecutionId:taskHistoryTableCtrl.executionIds[0].task_execution_id}).then((function(response){taskHistoryTableCtrl.executionIds=[],$timeout((function(){getTableData(),taskHistoryTableCtrl.reloadData()}),5e3)}))},taskHistoryTableCtrl.startExtractRefStatsDetailed=function(type,lu_name){if(!taskHistoryTableCtrl.executionIds||0==taskHistoryTableCtrl.executionIds.length)return;let stopInterval;var task_execution_id=taskHistoryTableCtrl.executionIds[0].task_execution_id;$uibModal.open({templateUrl:"views/tasks/taskHistoryRefModal.html",windowTopClass:"taskHistoryRef",controller:function($scope,$uibModalInstance,TDMService){var taskHistoryRefCtrl=this;taskHistoryRefCtrl.getExtractRefStats=function(){TDMService.postGenericAPI("extractrefstats",{taskExecutionId:task_execution_id,type:"D"}).then((function(response){taskHistoryRefCtrl.refDetailedData=_.map(response.result||[],(function(refData){return refData.number_of_records_to_process>0&&(refData.percentageOfCompleted=refData.number_of_processed_records/refData.number_of_records_to_process*100),isNaN(refData.number_of_records_to_process)||(refData.number_of_records_to_process=refData.number_of_records_to_process.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")),isNaN(refData.number_of_processed_records)||(refData.number_of_processed_records=refData.number_of_processed_records.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")),refData})),taskHistoryRefCtrl.refDetailedData=_.filter(taskHistoryRefCtrl.refDetailedData,(function(data){return!(!data||data.lu_name!==lu_name)&&("failed"==type?"failed"==data.execution_status:"failed"!=type?"failed"!=data.execution_status:void 0)}))}))},stopInterval=$interval((function(){taskHistoryRefCtrl.getExtractRefStats()}),1e4),taskHistoryRefCtrl.getExtractRefStats(),taskHistoryRefCtrl.close=function(){$uibModalInstance.close()}},controllerAs:"taskHistoryRefCtrl"}).result.then((function(){stopInterval&&$interval.cancel(stopInterval)}),(function(){stopInterval&&$interval.cancel(stopInterval)}))},taskHistoryTableCtrl.resumeExecution=function(migrateId,task_execution_id){task_execution_id&&TDMService.postGenericAPI("resumeMigratWS",{taskExecutionId:task_execution_id}).then((function(response){toastr.success("Task Execution # "+task_execution_id," Successfully Resumed"),$timeout((function(){$rootScope.$broadcast("refreshPage",!0)}),5e3)}))},taskHistoryTableCtrl.setReloadInterval=function(reloadInterval){var time=1e3*reloadInterval;console.log("setting new reload interval: ",time),$rootScope.reload_interval=time,taskHistoryTableCtrl.reload_interval=time};$rootScope.reload_interval;taskHistoryTableCtrl.taskData.task_id;taskHistoryTableCtrl.reload_interval=$rootScope.reload_interval,taskHistoryTableCtrl.getExtractTaskRefData=function(task_execution_id,type,lu_name){return new Promise((function(resolve,reject){TDMService.postGenericAPI("extractrefstats",{taskExecutionId:task_execution_id,type:type}).then((function(response){"D"===type?response.result&&response.result&&response.result&&(response.result=_.filter(response.result,(function(row){return row["start_time(UTC)"]=row.start_time,row["end_time(UTC)"]=row.end_time,delete row.start_time,delete row.end_time,delete row.estimated_remaining_duration,!(!row||row.lu_name!==lu_name)}))):"S"===type&&(response.result=response.result[lu_name]),resolve(response)})).catch((function(err){reject(err)}))}))},taskHistoryTableCtrl.downloadExtractReport=function(type,migrateId,logicalUnit,taskExecutionId){var types=[type,"H"];if("D"==type&&types.push("S"),"null"!=migrateId)TDMService.postGenericAPI("migrateStatusWs",{migrateIds:migrateId,runModes:types}).then((function(response){if("S"==type){var data=$scope.buildSummaryData(response.result,migrateId,logicalUnit);if((taskExecution=_.find(taskHistoryTableCtrl.taskHistoryData,{task_execution_id:taskExecutionId,lu_name:logicalUnit}))&&("REF"==taskExecution.selection_method||taskExecution.refcount>0))return taskHistoryTableCtrl.getExtractTaskRefData(taskExecution.task_execution_id,type,logicalUnit).then((function(response){(data=Object.assign(data,response.result)).reference=!0,$scope.buildHtml("summary",data)}));$scope.buildHtml("summary",data)}else if("D"==type){var taskExecution;data=$scope.buildDetailedData(response.result,migrateId,logicalUnit);if((taskExecution=_.find(taskHistoryTableCtrl.taskHistoryData,{task_execution_id:taskExecutionId,lu_name:logicalUnit}))&&("REF"==taskExecution.selection_method||taskExecution.refcount>0))return taskHistoryTableCtrl.getExtractTaskRefData(taskExecution.task_execution_id,type,logicalUnit).then((function(response){(data=Object.assign(data,{refData:response.result})).reference=!0,$scope.buildHtml("detailed",data)}));$scope.buildHtml("detailed",data)}}));else{var taskExecution=_.find(taskHistoryTableCtrl.taskHistoryData,{task_execution_id:taskExecutionId,lu_name:logicalUnit});if(taskExecution&&("REF"==taskExecution.selection_method||taskExecution.refcount>0))return taskHistoryTableCtrl.getExtractTaskRefData(taskExecution.task_execution_id,type,logicalUnit).then((function(response){"S"===type&&(response.result.reference=!0),$scope.buildHtml("S"==type?"summary":"detailed","S"==type?response.result:{refData:response.result,reference:!0})}))}},$scope.buildDetailedData=function(detailedData,migrateId,logicalUnit){var data={migrateId:migrateId,logicalUnit:logicalUnit,userName:taskHistoryTableCtrl.username,rows:[],columns:[],nodeList:[]};if(detailedData&&detailedData.S)for(var i=0;i<detailedData.S.results.length;i++)"Cluster"==detailedData.S.results[i].columns.Level&&(data.status=detailedData.S.results[i].columns.Status),"Node"==detailedData.S.results[i].columns.Level&&data.nodeList.push(detailedData.S.results[i].columns.Name);return detailedData&&detailedData.H&&(data.migrateCommand=detailedData.H["Migration Command"]),detailedData&&detailedData.D&&(data.columns=["Entity ID","Error","Node id","Results","Status"],data.rows=_.map(detailedData.D,(function(row){var results=JSON.parse(row.Results);return results&&results.Added?row.Results="Added":results&&results.Updated?row.Results="Updated":results&&results.Unchanged&&(row.Results="Unchanged"),row}))),data},$scope.buildHtml=function(title,data){$http({method:"GET",url:"views/staticHtmls/"+title+".html"}).then((function(response){var htmlData=response.data;htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=htmlData.replaceAll("{{migration}}",data.migrateId?"block":"none")).replaceAll("{{reference}}",data.reference?"block":"none")).replaceAll("{{migrateId}}",data.migrateId)).replaceAll("{{migrateCommand}}",data.migrateCommand)).replaceAll("{{status}}",data.status)).replaceAll("{{userName}}",data.userName)).replaceAll("{{logicalUnit}}",data.logicalUnit)).replaceAll("{{nodeList}}",data.nodeList)).replaceAll("{{numOfProcessedRefTables}}",data.numOfProcessedRefTables)).replaceAll("{{numOfFailedRefTables}}",data.numOfFailedRefTables)).replaceAll("{{numOfCopiedRefTables}}",data.numOfCopiedRefTables)).replaceAll("{{minStartExecutiobnDate}}",data.minStartExecutionDate)).replaceAll("{{maxEndExecutiobnDate}}",data.maxEndExecutionDate);var rowData="<tr>";if(data.columns){for(var i=0;i<data.columns.length;i++)rowData=rowData+"<th>"+data.columns[i]+"</th>";rowData+="</tr>";for(i=0;i<data.rows.length;i++){rowData+="<tr>";for(var j=0;j<data.columns.length;j++)rowData=rowData+"<th>"+data.rows[i][data.columns[j]]+"</th>";rowData+="</tr>"}}else rowData="<tr></tr>";var rowDataRef="<tr>";if(data.refData&&data.refData.length>0){var columns=[];for(var key in data.refData[0])columns.push(key);const errMsgIndex=columns.indexOf("error_msg");errMsgIndex>=0&&columns.push(columns.splice(errMsgIndex,1)[0]),columns.forEach(column=>{rowDataRef=rowDataRef+"<th>"+column+"</th>"}),rowDataRef+="</tr>";for(i=0;i<data.refData.length;i++){rowDataRef+="<tr>";for(j=0;j<columns.length;j++)rowDataRef=rowDataRef+"<th>"+data.refData[i][columns[j]]+"</th>";rowDataRef+="</tr>"}}else rowDataRef="<tr></tr>";htmlData=(htmlData=htmlData.replaceAll("{{dataRows}}",rowData)).replaceAll("{{dataRowsReference}}",rowDataRef),$scope.downloadHtml(htmlData,title+".html")}))},$scope.buildSummaryData=function(summaryData,migrateId,logicalUnit){var data={migrateId:"null"==migrateId?null:migrateId,logicalUnit:logicalUnit,userName:taskHistoryTableCtrl.username,rows:[],columns:[],nodeList:[]};if(summaryData&&summaryData.S){data.columns=summaryData.S.columnsNames;for(var i=0;i<summaryData.S.results.length;i++)"Cluster"==summaryData.S.results[i].columns.Level&&(data.status=summaryData.S.results[i].columns.Status),"Node"==summaryData.S.results[i].columns.Level&&data.nodeList.push(summaryData.S.results[i].columns.Name),data.rows.push(summaryData.S.results[i].columns)}return summaryData&&summaryData.H&&(data.migrateCommand=summaryData.H["Migration Command"]),data},String.prototype.replaceAll=function(search,replacement){return this.replace(new RegExp(search,"g"),replacement)},$scope.downloadHtml=function(htmlData,fileName){var element=document.createElement("a");element.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(htmlData)),element.setAttribute("download",fileName),element.style.display="none",document.body.appendChild(element),element.click(),document.body.removeChild(element)},$scope.buildSummaryHtml=function(data){$http({method:"GET",url:"views/staticHtmls/summary.html"}).then((function(response){var htmlData=response.data;htmlData=(htmlData=(htmlData=(htmlData=(htmlData=(htmlData=htmlData.replaceAll("{{migrateId}}",data.migrateId)).replaceAll("{{migrateCommand}}",data.migrateCommand)).replaceAll("{{status}}",data.status)).replaceAll("{{userName}}",data.userName)).replaceAll("{{logicalUnit}}",data.logicalUnit)).replaceAll("{{nodeList}}",data.nodeList);for(var rowData="<tr>",i=0;i<data.columns.length;i++)rowData=rowData+"<th>"+data.columns[i]+"</th>";rowData+="</tr>";for(i=0;i<data.rows.length;i++){rowData+="<tr>";for(var j=0;j<data.columns.length;j++)rowData=rowData+"<th>"+data.rows[i][data.columns[j]]+"</th>";rowData+="</tr>"}htmlData=htmlData.replaceAll("{{dataRows}}",rowData),$scope.downloadHtml(htmlData,"summary_"+data.migrateId+".html")}))},$scope.getMigrateStatusWs=function(){TDMService.postGenericAPI("migrateStatusWs",{migrateIds:_.map(taskHistoryTableCtrl.executionIds,"fabric_execution_id"),runModes:["H","S"]}).then((function(response){taskHistoryTableCtrl.executionData=[];let i=0;for(res of response.result){if(taskHistoryTableCtrl.migrationCommand="",res&&res.H&&res.H["Migration Command"]&&(taskHistoryTableCtrl.migrationCommand=res.H["Migration Command"]),taskHistoryTableCtrl.clusterLevel={},!(res&&res.S&&res.S.results))return void $timeout((function(){getTableData(),taskHistoryTableCtrl.reloadData()}),5e3);var clusterLevel=_.find(res.S.results,{columns:{Level:"Cluster"}});if(clusterLevel&&(taskHistoryTableCtrl.clusterLevel=clusterLevel.columns,"DONE"==taskHistoryTableCtrl.clusterLevel.Status))return void $timeout((function(){getTableData(),taskHistoryTableCtrl.reloadData()}),5e3);var added=("LOAD"===taskHistoryTableCtrl.taskType?taskHistoryTableCtrl.clusterLevel.Succeeded:taskHistoryTableCtrl.clusterLevel.Added)||0;taskHistoryTableCtrl.executionData.push({name:taskHistoryTableCtrl.executionIds&&taskHistoryTableCtrl.executionIds[i]&&taskHistoryTableCtrl.executionIds[i].name,migrateID:taskHistoryTableCtrl.executionIds&&taskHistoryTableCtrl.executionIds[i]&&taskHistoryTableCtrl.executionIds[i].fabric_execution_id,migrationCommand:taskHistoryTableCtrl.migrationCommand,remainingDuration:taskHistoryTableCtrl.clusterLevel["Remaining dur."]||"00:00:00",percentageOfCompleted:taskHistoryTableCtrl.clusterLevel["% Completed"],added:added||0,failed:taskHistoryTableCtrl.clusterLevel.Failed||0,Updated:taskHistoryTableCtrl.clusterLevel.Updated||0,Unchanged:taskHistoryTableCtrl.clusterLevel.Unchanged||0,processed:parseInt(added||0)+parseInt(taskHistoryTableCtrl.clusterLevel.Failed||0)+parseInt(taskHistoryTableCtrl.clusterLevel.Updated||0)+parseInt(taskHistoryTableCtrl.clusterLevel.Unchanged||0)}),i++}}))},$scope.updateRunningExecutions=function(){taskHistoryTableCtrl.executionIds.length>0?(taskHistoryTableCtrl.disableAccessingStatistics=!0,"REF"!==taskHistoryTableCtrl.taskData.selection_method&&$scope.getMigrateStatusWs(),("REF"==taskHistoryTableCtrl.taskData.selection_method||taskHistoryTableCtrl.taskData.refcount>0)&&TDMService.postGenericAPI("extractrefstats",{taskExecutionId:taskHistoryTableCtrl.executionIds[0].task_execution_id,type:"S"}).then((function(response){taskHistoryTableCtrl.executionRefData=[];var executionsFinished=!1;for(key in response.result){let refExecution=response.result[key];refExecution.lu_name=key,refExecution.percentageOfCompleted=0,refExecution.totNumOfTablesToProcess>0&&(refExecution.percentageOfCompleted=refExecution.numOfProcessedRefTables/refExecution.totNumOfTablesToProcess*100),100==refExecution.percentageOfCompleted&&(executionsFinished=!0),refExecution.percentageOfCompleted=refExecution.percentageOfCompleted.toFixed(2),taskHistoryTableCtrl.executionRefData.push(refExecution)}1==executionsFinished&&$timeout((function(){getTableData(),taskHistoryTableCtrl.reloadData()}),5e3)}))):taskHistoryTableCtrl.disableAccessingStatistics=!1},taskHistoryTableCtrl.dtInstance={},taskHistoryTableCtrl.dtColumns=[],taskHistoryTableCtrl.dtColumnDefs=[],taskHistoryTableCtrl.headers=[{column:"lu_name",name:"Logical Unit Name",clickAble:!1},{column:"lu_parent_name",name:"Parent Logical Unit",clickAble:!1},{column:"process_name",name:"Post Execution Process Name",clickAble:!1},{column:"execution_status",name:"Execution Status",clickAble:!1},{column:"num_of_processed_entities",name:"Total Number Of Processed Entities",clickAble:!1},{column:"num_of_copied_entities",name:"Number Of Succeeded Entities",clickAble:!1},{column:"num_of_failed_entities",name:"Number Of Failed Entities",clickAble:!1},{column:"num_of_processed_ref_tables",name:"Total Number Of Processed Reference Tables",clickAble:!1},{column:"num_of_copied_ref_tables",name:"Number Of Copied Reference Tables",clickAble:!1},{column:"num_of_failed_ref_tables",name:"Number Of Failed Reference Tables",clickAble:!1},{column:"start_execution_time",name:"Start Execution Date",clickAble:!1,date:!0},{column:"end_execution_time",name:"End Execution Date",clickAble:!1,date:!0},{column:"source_env_name",name:"Source Environment Name",clickAble:!1},{column:"environment_name",name:"Target Environment Name",clickAble:!1},{column:"task_executed_by",name:"Task Executed By",clickAble:!0},{column:"be_name",name:"Business Entity Name",clickAble:!1},{column:"product_name",name:"System Name",clickAble:!1},{column:"product_version",name:"System Version",clickAble:!1},{column:"fabric_execution_id",name:"Fabric Execution Id",clickAble:!1,visible:!1},{column:"version_expiration_date",name:"Version Expiration Date",clickAble:!1,date:!0},{column:"execution_note",name:"Execution Note",clickAble:!1,date:!1}],taskHistoryTableCtrl.dtColumnDefs=[],$sessionStorage.taskHistoryTableHideColumns?taskHistoryTableCtrl.hideColumns=$sessionStorage.taskHistoryTableHideColumns:taskHistoryTableCtrl.hideColumns=[19];for(var i=0;i<taskHistoryTableCtrl.hideColumns.length;i++){var hideColumn=DTColumnDefBuilder.newColumnDef(taskHistoryTableCtrl.hideColumns[i]).withOption("visible",!1);taskHistoryTableCtrl.dtColumnDefs.push(hideColumn)}var changeToLocalDate=function(data,type,full,meta){return data?moment(data).format("DD MMM YYYY, HH:mm:ss"):""};taskHistoryTableCtrl.openEntitiesExecStats=function(taskExecId,type,fabricExecutionId,selectionMethod,refcount){taskHistoryTableCtrl.disableAccessingStatistics||$scope.$parent.$parent.$parent.tasks.openEntitiesExecStats(taskExecId,type,fabricExecutionId,selectionMethod,refcount)},taskHistoryTableCtrl.downloadSequenceReport=function(task_execution_id){TDMService.getGenericAPI("sequencereport/"+task_execution_id).then((function(response){}))},taskHistoryTableCtrl.downloadErrorReport=function(lu_name,taskExecutionId){TDMService.getSummaryReport(taskExecutionId,lu_name).then((function(response){"FAILED"!=response.errorCode&&ExcelService.buildSummaryExcel(response.result).xlsx.writeBuffer().then((function(data){var fileName=`Summary_Report_EXECID_${taskExecutionId}_${lu_name}.xlsx`,a=document.createElement("a");document.body.appendChild(a),a.style="display: none";var file=new Blob([data],{type:"application/vnd.ms-excel"}),fileURL=(window.URL||window.webkitURL).createObjectURL(file);a.href=fileURL,a.download=fileName,a.click(),(window.URL||window.webkitURL).revokeObjectURL(file)}))}))};for(i=0;i<taskHistoryTableCtrl.headers.length;i++)1==taskHistoryTableCtrl.headers[i].date?taskHistoryTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(taskHistoryTableCtrl.headers[i].column).withTitle(taskHistoryTableCtrl.headers[i].name).renderWith(changeToLocalDate)):taskHistoryTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(taskHistoryTableCtrl.headers[i].column).withTitle(taskHistoryTableCtrl.headers[i].name));taskHistoryTableCtrl.dtColumns.unshift(DTColumnBuilder.newColumn("taskHistoryActions").withTitle("").renderWith((function(data,type,full,meta){if(full.process_id)return"";var pathfile=taskHistoryTableCtrl.TDMReports.replace("[etlIpAddress]",full.etl_ip_address);full.etl_execution_id;var fileName=full.lu_name+"_Stats_Report_EXEID_"+full.etl_execution_id+".csv",seqName=full.lu_name+"_Sequences_Report_EXEID_"+full.etl_execution_id+".csv";taskHistoryTableCtrl.statsFile=pathfile+fileName,taskHistoryTableCtrl.seqFile=pathfile+seqName;var taskHistoryActions="";return!full.execution_status||"stopped"!=full.execution_status.toLowerCase()||taskHistoryTableCtrl.executionIds&&0!=taskHistoryTableCtrl.executionIds.length||(taskHistoryActions=taskHistoryActions+"<a ng-click=\"taskHistoryTableCtrl.resumeExecution('"+full.fabric_execution_id+"','"+full.task_execution_id+'\')" style="margin-left: 5px;border-color: transparent;background-color: transparent; color: black;" type="button" title="Resume Execution"><i class="fa fa-play"></i> </a>'),taskHistoryActions=taskHistoryTableCtrl.runningExecution==full.task_execution_id?taskHistoryActions='<a  style="margin-left: 3px;border-color: transparent;background-color: transparent; color: grey;cursor: not-allowed;"  type="button" title="Download Statistics File"><img src="icons/summary-report.svg"></img> </a>':taskHistoryActions+"<a ng-click=\"taskHistoryTableCtrl.downloadErrorReport('"+full.lu_name+"',"+full.task_execution_id+')"  style="margin-left: 3px;border-color: transparent;background-color: transparent; color: black;" title="Download Summary Report"><img src="icons/summary-report.svg"></img> </a>',full.fabric_execution_id,taskHistoryActions})).withOption("width","100"));var getTableData=function(){var deferred=$q.defer();const data=_.map(taskHistoryTableCtrl.taskHistoryData,row=>("EXTRACT"===taskHistoryTableCtrl.taskType&&(row.environment_name=""),row));return deferred.resolve(data),deferred.promise};if(taskHistoryTableCtrl.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("paging",!0).withOption("scrollX",!1).withButtons([{extend:"colvis",text:"Show/Hide columns",columns:[5,6,7,8,9,10,16,17,18,19],callback:function(columnIdx,visible){var index;1==visible?(index=taskHistoryTableCtrl.hideColumns.indexOf(columnIdx))>=0&&taskHistoryTableCtrl.hideColumns.splice(index,1):(index=taskHistoryTableCtrl.hideColumns.indexOf(columnIdx))<0&&taskHistoryTableCtrl.hideColumns.push(columnIdx);$sessionStorage.taskHistoryTableHideColumns=taskHistoryTableCtrl.hideColumns}}]),taskHistoryTableCtrl.taskHistoryData&&taskHistoryTableCtrl.taskHistoryData.length>0){const columns=[{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"lu_name")),(function(el){return{value:el,label:el}}))},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"lu_parent_name")),(function(el){return{value:el,label:el}}))},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"process_name")),(function(el){return{value:el,label:el}}))},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"execution_status")),(function(el){return{value:el,label:el}}))},{type:"text"},{type:"text"},{type:"text"},{type:"text"},{type:"text"},{type:"text"},{type:"text"},{type:"text"},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"source_env_name")),(function(el){return{value:el,label:el}}))},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"environment_name")),(function(el){return{value:el,label:el}}))},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"task_executed_by")),(function(el){return{value:el,label:el}}))},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"be_name")),(function(el){return{value:el,label:el}}))},{type:"select",values:_.map(_.unique(_.map(taskHistoryTableCtrl.taskHistoryData,"product_name")),(function(el){return{value:el,label:el}}))},{type:"text"},{type:"text"},{type:"text"},{type:"text"}],lightColumnFilter={};columns.forEach((column,index)=>{let temp=angular.copy(column);temp.hidden=taskHistoryTableCtrl.hideColumns.indexOf(index+1)>=0,lightColumnFilter[index+1]=temp}),taskHistoryTableCtrl.dtOptions.withLightColumnFilter(lightColumnFilter)}taskHistoryTableCtrl.dtInstanceCallback=function(dtInstance){angular.isFunction(taskHistoryTableCtrl.dtInstance)?taskHistoryTableCtrl.dtInstance(dtInstance):angular.isDefined(taskHistoryTableCtrl.dtInstance)&&(taskHistoryTableCtrl.dtInstance=dtInstance)},null!=taskHistoryTableCtrl.dtInstance.changeData&&taskHistoryTableCtrl.dtInstance.changeData(getTableData()),$timeout(()=>{taskHistoryTableCtrl.loadingTable=!1})}})),taskHistoryTableCtrl.openBatchMonitor=batchId=>{$window.open(`${location.origin}/app/admin/batches/batch-monitor/${batchId}`,"_blank")}},controllerAs:"taskHistoryTableCtrl"}}angular.module("TDM-FE").directive("taskHistoryDirective",taskHistoryDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
