function taskStatsDirective(){return{restrict:"E",templateUrl:"views/tasks/executionStats.html",scope:{content:"="},link:function(scope,element,attrs){element.on("$destroy",(function(){angular.element("body").on("search.dt",null)}))},controller:function($scope,$filter,TDMService,BreadCrumbsService,$element,$uibModal,toastr,$timeout,AuthService,$state,DTColumnBuilder,DTOptionsBuilder,$q,$compile,$rootScope){var taskStatesCtrl=this;taskStatesCtrl.taskData=$scope.content.taskData,taskStatesCtrl.tab=1,taskStatesCtrl.tasksExecID=$scope.$parent.$parent.tasks.tasksData.taskExecId,taskStatesCtrl.fabricExecID=$scope.$parent.$parent.tasks.tasksData.fabricExecutionId,taskStatesCtrl.type=$scope.$parent.$parent.tasks.tasksData.type,taskStatesCtrl.selectionMethod=$scope.$parent.$parent.tasks.tasksData.selectionMethod,taskStatesCtrl.refcount=$scope.$parent.$parent.tasks.tasksData.refCount,taskStatesCtrl.loadingTableFailedReferences=!0,taskStatesCtrl.loadingTableFailedEntities=!0,taskStatesCtrl.loadingTableCopiedEntities=!0,taskStatesCtrl.loadingTableCopiedReferences=!0,BreadCrumbsService.push({tasksExecID:taskStatesCtrl.tasksExecID},"STATISTICS",(function(){})),$scope.luTreeMenu=[],taskStatesCtrl.makeCopiedReferenceTable=function(isRoot,refreshData){if(refreshData&&taskStatesCtrl.dtInstancecReferences&&taskStatesCtrl.dtInstancecReferences.reloadData)taskStatesCtrl.dtInstancecReferences.reloadData((function(data){}),!1);else{taskStatesCtrl.dtInstancecReferences={},taskStatesCtrl.dtColumnscReferences=[],taskStatesCtrl.dtColumnDefscReferences=[],taskStatesCtrl.headerscReferences=[{column:"RerernceTableName",name:"Reference Table name",clickAble:!1}];for(var i=0;i<taskStatesCtrl.headerscReferences.length;i++)taskStatesCtrl.dtColumnscReferences.push(DTColumnBuilder.newColumn(taskStatesCtrl.headerscReferences[i].column).withTitle(taskStatesCtrl.headerscReferences[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(taskStatesCtrl.cReferences),deferred.promise};taskStatesCtrl.openStatsModal=targetId=>{taskStatesCtrl.popUpTreeMenu=[];var taskExecutionId=taskStatesCtrl.tasksExecID,luName=taskStatesCtrl.selectedLU.lu_name;$uibModal.open({template:'<task-stats-modal-directive\n                                ng-if="targetId"\n                                task-execution-id="taskExecutionId" \n                                target-id="targetId"\n                                close="close"\n                                update-popup="update"\n                                lu-name="luName"></task-stats-modal-directive>',size:"modal-x-lg",windowClass:"staticsModal",resolve:{},controller:function($scope,$uibModalInstance){$scope.taskExecutionId=taskExecutionId,$scope.targetId=targetId,$scope.luName=luName,$scope.update=function(newTargetId,newLU){$scope.targetId=null,$timeout((function(){$scope.targetId=newTargetId,$scope.luName=newLU}),100)},$scope.close=function(){$uibModalInstance.close()}},controllerAs:"staticsModalCtrl"})},taskStatesCtrl.dtOptionscReferences=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!0).withOption("paging",!0).withOption("searching",!0).withOption("info",!0).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),taskStatesCtrl.dtInstanceCallbackcReferences=function(dtInstance){angular.isFunction(taskStatesCtrl.dtInstancecReferences)?taskStatesCtrl.dtInstancecReferences(dtInstance):angular.isDefined(taskStatesCtrl.dtInstancecReferences)&&(taskStatesCtrl.dtInstancecReferences=dtInstance)},null!=taskStatesCtrl.dtInstancecReferences.changeData&&taskStatesCtrl.dtInstancecReferences.changeData(getTableData()),taskStatesCtrl.loadingTableCopiedReferences=!1}},taskStatesCtrl.makeCopiedEntitiesTable=function(isRoot,refreshData){if(refreshData&&taskStatesCtrl.dtInstancecEntities&&taskStatesCtrl.dtInstancecEntities.reloadData)return void taskStatesCtrl.dtInstancecEntities.reloadData((function(data){}),!1);taskStatesCtrl.dtInstancecEntities={},taskStatesCtrl.dtColumnscEntities=[],taskStatesCtrl.dtColumnDefscEntities=[],taskStatesCtrl.headerscEntities=isRoot?[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1}]:[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1},{column:"parentLuName",name:"Parent LU Name",clickAble:!1},{column:"parentSourceId",name:"Parent Source ID",clickAble:!1},{column:"parentTargetId",name:"Parent Target ID",clickAble:!1}];let clickableCol=(data,type,full)=>`<a ng-click="taskStatesCtrl.openStatsModal('${full.targetId}')">  ${data} </a>`;for(var i=0;i<taskStatesCtrl.headerscEntities.length;i++)taskStatesCtrl.headerscEntities[i].clickAble?taskStatesCtrl.dtColumnscEntities.push(DTColumnBuilder.newColumn(taskStatesCtrl.headerscEntities[i].column).withTitle(taskStatesCtrl.headerscEntities[i].name).renderWith(clickableCol)):taskStatesCtrl.dtColumnscEntities.push(DTColumnBuilder.newColumn(taskStatesCtrl.headerscEntities[i].column).withTitle(taskStatesCtrl.headerscEntities[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(taskStatesCtrl.cEntities),deferred.promise};taskStatesCtrl.dtOptionscEntities=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!0).withOption("paging",!0).withOption("searching",!0).withOption("info",!0).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),taskStatesCtrl.dtInstanceCallbackcEntities=function(dtInstance){angular.isFunction(taskStatesCtrl.dtInstancecEntities)?taskStatesCtrl.dtInstancecEntities(dtInstance):angular.isDefined(taskStatesCtrl.dtInstancecEntities)&&(taskStatesCtrl.dtInstancecEntities=dtInstance)},null!=taskStatesCtrl.dtInstancecEntities.changeData&&taskStatesCtrl.dtInstancecEntities.changeData(getTableData()),taskStatesCtrl.loadingTableCopiedEntities=!1,taskStatesCtrl.dtInstancecEntities&&taskStatesCtrl.dtInstancecEntities.reloadData&&taskStatesCtrl.dtInstancecEntities.reloadData((function(data){}),!1)},taskStatesCtrl.makeFailedReferenceTable=function(isRoot,refreshData){if(refreshData&&taskStatesCtrl.dtInstancefReferences&&taskStatesCtrl.dtInstancefReferences.reloadData)taskStatesCtrl.dtInstancefReferences.reloadData((function(data){}),!1);else{taskStatesCtrl.dtInstancefReferences={},taskStatesCtrl.dtColumnsfReferences=[],taskStatesCtrl.dtColumnDefsfReferences=[],taskStatesCtrl.headersfReferences=[{column:"RerernceTableName",name:"Reference Table name",clickAble:!1},{column:"errorMsg",name:"Error Message",clickAble:!1}];for(var i=0;i<taskStatesCtrl.headersfReferences.length;i++)taskStatesCtrl.dtColumnsfReferences.push(DTColumnBuilder.newColumn(taskStatesCtrl.headersfReferences[i].column).withTitle(taskStatesCtrl.headersfReferences[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(taskStatesCtrl.fReferences),deferred.promise};taskStatesCtrl.dtOptionsfReferences=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!0).withOption("paging",!0).withOption("searching",!0).withOption("info",!0).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),taskStatesCtrl.dtInstanceCallbackfReferences=function(dtInstance){angular.isFunction(taskStatesCtrl.dtInstancefReferences)?taskStatesCtrl.dtInstancefReferences(dtInstance):angular.isDefined(taskStatesCtrl.dtInstancefReferences)&&(taskStatesCtrl.dtInstancefReferences=dtInstance)},null!=taskStatesCtrl.dtInstancefReferences.changeData&&taskStatesCtrl.dtInstancefReferences.changeData(getTableData()),taskStatesCtrl.loadingTableFailedReferences=!1}},taskStatesCtrl.makeFailedEntitiesTable=function(isRoot,refreshData){if(refreshData&&taskStatesCtrl.dtInstancefEntities&&taskStatesCtrl.dtInstancefEntities.reloadData)return void taskStatesCtrl.dtInstancefEntities.reloadData((function(data){}),!1);taskStatesCtrl.dtInstancefEntities={},taskStatesCtrl.dtColumnsfEntities=[],taskStatesCtrl.dtColumnDefsfEntities=[],taskStatesCtrl.headersfEntities=isRoot?[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1},{column:"copyEntityStatus",name:"Entity Status",clickAble:!1},{column:"copyHierarchyStatus",name:"Hierarchy Data Status",clickAble:!1}]:[{column:"sourceId",name:"Source id",clickAble:!0},{column:"targetId",name:"Target id",clickAble:!1},{column:"parentLuName",name:"Parent LU Name",clickAble:!1},{column:"parentSourceId",name:"Parent Source ID",clickAble:!1},{column:"parentTargetId",name:"Parent Target ID",clickAble:!1},{column:"copyEntityStatus",name:"Entity Status",clickAble:!1},{column:"copyHierarchyStatus",name:"Hierarchy Data Status",clickAble:!1}];let clickableCol=(data,type,full)=>`<a ng-click="taskStatesCtrl.openStatsModal('${full.targetId}')">  ${data} </a>`;for(var i=0;i<taskStatesCtrl.headersfEntities.length;i++)taskStatesCtrl.headersfEntities[i].clickAble?taskStatesCtrl.dtColumnsfEntities.push(DTColumnBuilder.newColumn(taskStatesCtrl.headersfEntities[i].column).withTitle(taskStatesCtrl.headersfEntities[i].name).renderWith(clickableCol)):taskStatesCtrl.dtColumnsfEntities.push(DTColumnBuilder.newColumn(taskStatesCtrl.headersfEntities[i].column).withTitle(taskStatesCtrl.headersfEntities[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(taskStatesCtrl.fEntities),deferred.promise};taskStatesCtrl.dtOptionsfEntities=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM("lTfgitp").withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!0).withOption("paging",!0).withOption("searching",!0).withOption("info",!0).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1,dt:function(){console.log("search")}}),taskStatesCtrl.dtInstanceCallbackfEntities=function(dtInstance){angular.isFunction(taskStatesCtrl.dtInstancefEntities)?taskStatesCtrl.dtInstancefEntities(dtInstance):angular.isDefined(taskStatesCtrl.dtInstancefEntities)&&(taskStatesCtrl.dtInstancefEntities=dtInstance)},null!=taskStatesCtrl.dtInstancefEntities.changeData&&taskStatesCtrl.dtInstancefEntities.changeData(getTableData()),taskStatesCtrl.loadingTableFailedEntities=!1},taskStatesCtrl.makeTables=function(isRoot,refreshData){taskStatesCtrl.makeCopiedReferenceTable(isRoot,refreshData),taskStatesCtrl.makeCopiedEntitiesTable(isRoot,refreshData),taskStatesCtrl.makeFailedReferenceTable(isRoot,refreshData),taskStatesCtrl.makeFailedEntitiesTable(isRoot,refreshData)};var body={taskExecutionId:taskStatesCtrl.tasksExecID};"EXTRACT"==taskStatesCtrl.type&&(taskStatesCtrl.refcount>0&&"REF"!==taskStatesCtrl.selectionMethod?body.fabricExecutionId=taskStatesCtrl.fabricExecID:0==taskStatesCtrl.refcount&&"REF"!==taskStatesCtrl.selectionMethod&&(body.fabricExecutionId=taskStatesCtrl.fabricExecID,delete body.taskExecutionId)),taskStatesCtrl.collapseNode=item=>{TDMService.getLUChildren({taskExecutionId:taskStatesCtrl.tasksExecID,lu_name:item.lu_name}).then(response=>{response.result.forEach((function(child){_.find(item.children,{lu_name:child.lu_name})||(item.children||(item.children=[]),item.children.push({lu_name:child.lu_name,children:[],collapsed:!0,hasChildren:child.count>0,errorInPath:!1,count:child.count}))}))})};let getTDMStats=(body,isRoot,luName)=>{body.type||(taskStatesCtrl.loadingTablesData=!0),TDMService.getTDMStats(body).then((function(response){if("SUCCESS"==response.errorCode){{let tableData=response.result.data;response.result.luTree&&($scope.luTreeMenu=response.result.luTree,$scope.luTreeMenu[0]&&(taskStatesCtrl.selectedLU=$scope.luTreeMenu[0])),tableData?(tableData["Copied Reference per execution"]&&(body.type||(taskStatesCtrl.totalCopiedReference=tableData["Copied Reference per execution"].NoOfEntities),taskStatesCtrl.cReferences=tableData["Copied Reference per execution"].entitiesList,taskStatesCtrl.cReferencesTitle=""+$filter("translate")("COPIED_REF_TABLES")),tableData["Copied entities per execution"]&&(body.type||(taskStatesCtrl.totalCopiedEntities=tableData["Copied entities per execution"].NoOfEntities),taskStatesCtrl.cEntities=tableData["Copied entities per execution"].entitiesList,taskStatesCtrl.cEntitiesTitle=isRoot?$filter("translate")("COPIED_ENTITIES"):`${$filter("translate")("COPIED")} ${luName} ${$filter("translate")("LIST")}`),tableData["Failed Reference per execution"]&&(body.type||(taskStatesCtrl.totalFailedReference=tableData["Failed Reference per execution"].NoOfEntities),taskStatesCtrl.fReferences=tableData["Failed Reference per execution"].entitiesList,taskStatesCtrl.fReferencesTitle=""+$filter("translate")("FAILED_REF_TABLES")),tableData["Failed entities per execution"]&&(body.type||(taskStatesCtrl.totalFailedEntities=tableData["Failed entities per execution"].NoOfEntities),taskStatesCtrl.fEntities=tableData["Failed entities per execution"].entitiesList,taskStatesCtrl.fEntitiesTitle=isRoot?$filter("translate")("FAILED_ENTITIES"):`${$filter("translate")("FAILED")} ${luName} ${$filter("translate")("LIST")}`)):(taskStatesCtrl.totalCopiedReference=0,taskStatesCtrl.totalCopiedEntities=0,taskStatesCtrl.totalFailedReference=0,taskStatesCtrl.totalFailedEntities=0,taskStatesCtrl.fEntities=[],taskStatesCtrl.fReferences=[],taskStatesCtrl.cEntities=[],taskStatesCtrl.cReferences=[]),taskStatesCtrl.makeTables(isRoot,body.type)}body.type||(taskStatesCtrl.loadingTablesData=!1)}}))};getTDMStats(body,!0),taskStatesCtrl.updateTDMStats=(item,entityId,type)=>{for(i of(getTDMStats({taskExecutionId:taskStatesCtrl.tasksExecID,lu_name:item.lu_name,entityId:entityId,type:type},item.isRoot,item.lu_name),taskStatesCtrl.selectedLU.selected=!1,taskStatesCtrl.selectedLU=item,$scope.luTreeMenu))if(i.selected=!1,i.children)for(child of i.children)child.selected=!1},taskStatesCtrl.openTab=function(tab){taskStatesCtrl.tab=tab},taskStatesCtrl.searchText="",$element.on("search.dt",(function(e,api){taskStatesCtrl.searchText!=api.oPreviousSearch.sSearch&&(taskStatesCtrl.searchText=api.oPreviousSearch.sSearch,taskStatesCtrl.searchTimeout&&$timeout.cancel(taskStatesCtrl.searchTimeout),taskStatesCtrl.searchTimeout=$timeout((function(){taskStatesCtrl.updateTDMStats(taskStatesCtrl.selectedLU,taskStatesCtrl.searchText,{1:"Copied entities per execution",2:"Failed entities per execution",3:"Copied Reference per execution",4:"Failed Reference per execution"}[taskStatesCtrl.tab])}),1e3))}))},controllerAs:"taskStatesCtrl"}}angular.module("TDM-FE").directive("taskStatsDirective",taskStatsDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdGFza3MvdGFza1N0YXRzLmpzIl0sIm5hbWVzIjpbInRhc2tTdGF0c0RpcmVjdGl2ZSIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJzY29wZSIsImNvbnRlbnQiLCJsaW5rIiwiZWxlbWVudCIsImF0dHJzIiwib24iLCJhbmd1bGFyIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRmaWx0ZXIiLCJURE1TZXJ2aWNlIiwiQnJlYWRDcnVtYnNTZXJ2aWNlIiwiJGVsZW1lbnQiLCIkdWliTW9kYWwiLCJ0b2FzdHIiLCIkdGltZW91dCIsIkF1dGhTZXJ2aWNlIiwiJHN0YXRlIiwiRFRDb2x1bW5CdWlsZGVyIiwiRFRPcHRpb25zQnVpbGRlciIsIiRxIiwiJGNvbXBpbGUiLCIkcm9vdFNjb3BlIiwidGFza1N0YXRlc0N0cmwiLCJ0aGlzIiwidGFza0RhdGEiLCJ0YWIiLCJ0YXNrc0V4ZWNJRCIsIiRwYXJlbnQiLCJ0YXNrcyIsInRhc2tzRGF0YSIsInRhc2tFeGVjSWQiLCJmYWJyaWNFeGVjSUQiLCJmYWJyaWNFeGVjdXRpb25JZCIsInR5cGUiLCJzZWxlY3Rpb25NZXRob2QiLCJyZWZjb3VudCIsInJlZkNvdW50IiwibG9hZGluZ1RhYmxlRmFpbGVkUmVmZXJlbmNlcyIsImxvYWRpbmdUYWJsZUZhaWxlZEVudGl0aWVzIiwibG9hZGluZ1RhYmxlQ29waWVkRW50aXRpZXMiLCJsb2FkaW5nVGFibGVDb3BpZWRSZWZlcmVuY2VzIiwicHVzaCIsImx1VHJlZU1lbnUiLCJtYWtlQ29waWVkUmVmZXJlbmNlVGFibGUiLCJpc1Jvb3QiLCJyZWZyZXNoRGF0YSIsImR0SW5zdGFuY2VjUmVmZXJlbmNlcyIsInJlbG9hZERhdGEiLCJkYXRhIiwiZHRDb2x1bW5zY1JlZmVyZW5jZXMiLCJkdENvbHVtbkRlZnNjUmVmZXJlbmNlcyIsImhlYWRlcnNjUmVmZXJlbmNlcyIsImNvbHVtbiIsIm5hbWUiLCJjbGlja0FibGUiLCJpIiwibGVuZ3RoIiwibmV3Q29sdW1uIiwid2l0aFRpdGxlIiwiZ2V0VGFibGVEYXRhIiwiZGVmZXJyZWQiLCJkZWZlciIsInJlc29sdmUiLCJjUmVmZXJlbmNlcyIsInByb21pc2UiLCJvcGVuU3RhdHNNb2RhbCIsInRhcmdldElkIiwicG9wVXBUcmVlTWVudSIsInRhc2tFeGVjdXRpb25JZCIsImx1TmFtZSIsInNlbGVjdGVkTFUiLCJsdV9uYW1lIiwib3BlbiIsInRlbXBsYXRlIiwic2l6ZSIsIndpbmRvd0NsYXNzIiwiJHVpYk1vZGFsSW5zdGFuY2UiLCJ1cGRhdGUiLCJuZXdUYXJnZXRJZCIsIm5ld0xVIiwiY2xvc2UiLCJjb250cm9sbGVyQXMiLCJkdE9wdGlvbnNjUmVmZXJlbmNlcyIsImZyb21GblByb21pc2UiLCJ3aXRoRE9NIiwid2l0aE9wdGlvbiIsInJvdyIsImNvbnRlbnRzIiwiY2FzZUluc2Vuc2l0aXZlIiwiZHRJbnN0YW5jZUNhbGxiYWNrY1JlZmVyZW5jZXMiLCJkdEluc3RhbmNlIiwiaXNGdW5jdGlvbiIsImlzRGVmaW5lZCIsImNoYW5nZURhdGEiLCJtYWtlQ29waWVkRW50aXRpZXNUYWJsZSIsImR0SW5zdGFuY2VjRW50aXRpZXMiLCJkdENvbHVtbnNjRW50aXRpZXMiLCJkdENvbHVtbkRlZnNjRW50aXRpZXMiLCJoZWFkZXJzY0VudGl0aWVzIiwiY2xpY2thYmxlQ29sIiwiZnVsbCIsInJlbmRlcldpdGgiLCJjRW50aXRpZXMiLCJkdE9wdGlvbnNjRW50aXRpZXMiLCJkdEluc3RhbmNlQ2FsbGJhY2tjRW50aXRpZXMiLCJtYWtlRmFpbGVkUmVmZXJlbmNlVGFibGUiLCJkdEluc3RhbmNlZlJlZmVyZW5jZXMiLCJkdENvbHVtbnNmUmVmZXJlbmNlcyIsImR0Q29sdW1uRGVmc2ZSZWZlcmVuY2VzIiwiaGVhZGVyc2ZSZWZlcmVuY2VzIiwiZlJlZmVyZW5jZXMiLCJkdE9wdGlvbnNmUmVmZXJlbmNlcyIsImR0SW5zdGFuY2VDYWxsYmFja2ZSZWZlcmVuY2VzIiwibWFrZUZhaWxlZEVudGl0aWVzVGFibGUiLCJkdEluc3RhbmNlZkVudGl0aWVzIiwiZHRDb2x1bW5zZkVudGl0aWVzIiwiZHRDb2x1bW5EZWZzZkVudGl0aWVzIiwiaGVhZGVyc2ZFbnRpdGllcyIsImZFbnRpdGllcyIsImR0T3B0aW9uc2ZFbnRpdGllcyIsImR0IiwiY29uc29sZSIsImxvZyIsImR0SW5zdGFuY2VDYWxsYmFja2ZFbnRpdGllcyIsIm1ha2VUYWJsZXMiLCJib2R5IiwiY29sbGFwc2VOb2RlIiwiaXRlbSIsImdldExVQ2hpbGRyZW4iLCJ0aGVuIiwicmVzcG9uc2UiLCJyZXN1bHQiLCJmb3JFYWNoIiwiY2hpbGQiLCJfIiwiZmluZCIsImNoaWxkcmVuIiwiY29sbGFwc2VkIiwiaGFzQ2hpbGRyZW4iLCJjb3VudCIsImVycm9ySW5QYXRoIiwiZ2V0VERNU3RhdHMiLCJsb2FkaW5nVGFibGVzRGF0YSIsImVycm9yQ29kZSIsInRhYmxlRGF0YSIsImx1VHJlZSIsInRvdGFsQ29waWVkUmVmZXJlbmNlIiwiTm9PZkVudGl0aWVzIiwiZW50aXRpZXNMaXN0IiwiY1JlZmVyZW5jZXNUaXRsZSIsInRvdGFsQ29waWVkRW50aXRpZXMiLCJjRW50aXRpZXNUaXRsZSIsInRvdGFsRmFpbGVkUmVmZXJlbmNlIiwiZlJlZmVyZW5jZXNUaXRsZSIsInRvdGFsRmFpbGVkRW50aXRpZXMiLCJmRW50aXRpZXNUaXRsZSIsInVwZGF0ZVRETVN0YXRzIiwiZW50aXR5SWQiLCJzZWxlY3RlZCIsIm9wZW5UYWIiLCJzZWFyY2hUZXh0IiwiZSIsImFwaSIsIm9QcmV2aW91c1NlYXJjaCIsInNTZWFyY2giLCJzZWFyY2hUaW1lb3V0IiwiY2FuY2VsIiwiMSIsIjIiLCIzIiwiNCIsIm1vZHVsZSIsImRpcmVjdGl2ZSJdLCJtYXBwaW5ncyI6IkFBS0EsU0FBU0EscUJBK2tCTCxNQUFPLENBQ0hDLFNBQVUsSUFDVkMsWUFobEJXLGtDQWlsQlhDLE1BQU8sQ0FDSEMsUUFBUyxLQUViQyxLQUFNLFNBQVNGLE1BQU1HLFFBQVFDLE9BQ3pCRCxRQUFRRSxHQUFHLFlBQVks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eUMsWUFBYyxJQUdqQ3pDLGVBQWVzRyxXQUFXaEYsT0FBUWlGLEtBQUs1RixNQUd0QzRGLEtBQUs1RixPQUNOWCxlQUFld0gsbUJBQW9CLFFBTS9DRCxZQUFZaEIsTUFBTSxHQUdsQnZHLGVBQWVzSSxlQUFrQixDQUFDN0IsS0FBTThCLFNBQVU1SCxRQVU5QyxJQUFLc0IsS0FUTHNGLFlBQVksQ0FDUnpFLGdCQUFpQjlDLGVBQWVJLFlBQ2hDNkMsUUFBU3dELEtBQUt4RCxRQUNkc0YsU0FBV0EsU0FDWDVILEtBQU1BLE1BQ1A4RixLQUFLbkYsT0FBUW1GLEtBQUt4RCxTQUNyQmpELGVBQWVnRCxXQUFXd0YsVUFBVyxFQUNyQ3hJLGVBQWVnRCxXQUFheUQsS0FFbEJ4SCxPQUFPbUMsWUFFYixHQURBYSxFQUFFdUcsVUFBVyxFQUNUdkcsRUFBRWlGLFNBQ0YsSUFBS0gsU0FBUzlFLEVBQUVpRixTQUNaSCxNQUFNeUIsVUFBVyxHQUtqQ3hJLGVBQWV5SSxRQUFVLFNBQVV0SSxLQUMvQkgsZUFBZUcsSUFBTUEsS0FFekJILGVBQWUwSSxXQUFhLEdBQzVCckosU0FBU1AsR0FBRyxhQUFhLFNBQVM2SixFQUFHQyxLQUM3QjVJLGVBQWUwSSxZQUFjRSxJQUFJQyxnQkFBZ0JDLFVBQ2pEOUksZUFBZTBJLFdBQWFFLElBQUlDLGdCQUFnQkMsUUFDNUM5SSxlQUFlK0ksZUFDZnZKLFNBQVN3SixPQUFPaEosZUFBZStJLGVBRW5DL0ksZUFBZStJLGNBQWdCdkosVUFBUyxXQU9wQ1EsZUFBZXNJLGVBQWV0SSxlQUFlZ0QsV0FBV2hELGVBQWUwSSxXQU52RCxDQUNaTyxFQUFHLGdDQUNIQyxFQUFHLGdDQUNIQyxFQUFHLGlDQUNIQyxFQUFHLGtDQUVtRnBKLGVBQWVHLFFBQzNHLFVBZ0JWd0QsYUFBYyxrQkFLdEI1RSxRQUNLc0ssT0FBTyxVQUNQQyxVQUFVLHFCQUFzQmhMIiwiZmlsZSI6ImRpcmVjdGl2ZXMvdGFza3MvdGFza1N0YXRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHdhZWwgb24gMDIvMDYvMjAxNy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHRhc2tTdGF0c0RpcmVjdGl2ZSgpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBcInZpZXdzL3Rhc2tzL2V4ZWN1dGlvblN0YXRzLmh0bWxcIjtcblxuICAgIHZhciBjb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJGZpbHRlciwgVERNU2VydmljZSwgQnJlYWRDcnVtYnNTZXJ2aWNlLCAkZWxlbWVudCwgJHVpYk1vZGFsLCB0b2FzdHIsICR0aW1lb3V0LCBBdXRoU2VydmljZSwgJHN0YXRlLCBEVENvbHVtbkJ1aWxkZXIsIERUT3B0aW9uc0J1aWxkZXIsICRxLCAkY29tcGlsZSwgJHJvb3RTY29wZSkge1xuICAgICAgICB2YXIgdGFza1N0YXRlc0N0cmwgPSB0aGlzO1xuICAgICAgICB0YXNrU3RhdGVzQ3RybC50YXNrRGF0YSA9ICRzY29wZS5jb250ZW50LnRhc2tEYXRhO1xuICAgICAgICB0YXNrU3RhdGVzQ3RybC50YWIgPSAxO1xuICAgICAgICB0YXNrU3RhdGVzQ3RybC50YXNrc0V4ZWNJRCA9ICRzY29wZS4kcGFyZW50LiRwYXJlbnQudGFza3MudGFza3NEYXRhLnRhc2tFeGVjSWQ7XG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLmZhYnJpY0V4ZWNJRCA9ICRzY29wZS4kcGFyZW50LiRwYXJlbnQudGFza3MudGFza3NEYXRhLmZhYnJpY0V4ZWN1dGlvbklkO1xuXG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLnR5cGUgPSAkc2NvcGUuJHBhcmVudC4kcGFyZW50LnRhc2tzLnRhc2tzRGF0YS50eXBlO1xuICAgICAgICB0YXNrU3RhdGVzQ3RybC5zZWxlY3Rpb25NZXRob2QgPSAkc2NvcGUuJHBhcmVudC4kcGFyZW50LnRhc2tzLnRhc2tzRGF0YS5zZWxlY3Rpb25NZXRob2Q7XG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLnJlZmNvdW50ID0gJHNjb3BlLiRwYXJlbnQuJHBhcmVudC50YXNrcy50YXNrc0RhdGEucmVmQ291bnQ7XG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLmxvYWRpbmdUYWJsZUZhaWxlZFJlZmVyZW5jZXMgPSB0cnVlO1xuICAgICAgICB0YXNrU3RhdGVzQ3RybC5sb2FkaW5nVGFibGVGYWlsZWRFbnRpdGllcyA9IHRydWU7XG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLmxvYWRpbmdUYWJsZUNvcGllZEVudGl0aWVzID0gdHJ1ZTtcbiAgICAgICAgdGFza1N0YXRlc0N0cmwubG9hZGluZ1RhYmxlQ29waWVkUmVmZXJlbmNlcyA9IHRydWU7XG4gICAgICAgIEJyZWFkQ3J1bWJzU2VydmljZS5wdXNoKHt0YXNrc0V4ZWNJRDogdGFza1N0YXRlc0N0cmwudGFza3NFeGVjSUR9LCAnU1RBVElTVElDUycsIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUubHVUcmVlTWVudSA9IFtdO1xuXG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLm1ha2VDb3BpZWRSZWZlcmVuY2VUYWJsZSA9IGZ1bmN0aW9uIChpc1Jvb3QscmVmcmVzaERhdGEpIHtcbiAgICAgICAgICAgIGlmIChyZWZyZXNoRGF0YSl7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjUmVmZXJlbmNlcyAmJiB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlY1JlZmVyZW5jZXMucmVsb2FkRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlY1JlZmVyZW5jZXMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlY1JlZmVyZW5jZXMgPSB7fTtcbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0Q29sdW1uc2NSZWZlcmVuY2VzID0gW107XG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdENvbHVtbkRlZnNjUmVmZXJlbmNlcyA9IFtdO1xuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuaGVhZGVyc2NSZWZlcmVuY2VzID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnUmVyZXJuY2VUYWJsZU5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUmVmZXJlbmNlIFRhYmxlIG5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXNrU3RhdGVzQ3RybC5oZWFkZXJzY1JlZmVyZW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdENvbHVtbnNjUmVmZXJlbmNlcy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4odGFza1N0YXRlc0N0cmwuaGVhZGVyc2NSZWZlcmVuY2VzW2ldLmNvbHVtbikud2l0aFRpdGxlKHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNjUmVmZXJlbmNlc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBnZXRUYWJsZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRhc2tTdGF0ZXNDdHJsLmNSZWZlcmVuY2VzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLm9wZW5TdGF0c01vZGFsID0gKHRhcmdldElkKSA9PiB7XG4gICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwucG9wVXBUcmVlTWVudSA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciB0YXNrRXhlY3V0aW9uSWQgPSB0YXNrU3RhdGVzQ3RybC50YXNrc0V4ZWNJRDtcbiAgICAgICAgICAgICAgICB2YXIgbHVOYW1lID0gdGFza1N0YXRlc0N0cmwuc2VsZWN0ZWRMVS5sdV9uYW1lO1xuICAgICAgICAgICAgICAgIHZhciBsb2dpY2FsVW5pdE1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBgPHRhc2stc3RhdHMtbW9kYWwtZGlyZWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nLWlmPVwidGFyZ2V0SWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrLWV4ZWN1dGlvbi1pZD1cInRhc2tFeGVjdXRpb25JZFwiIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQtaWQ9XCJ0YXJnZXRJZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlPVwiY2xvc2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUtcG9wdXA9XCJ1cGRhdGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdS1uYW1lPVwibHVOYW1lXCI+PC90YXNrLXN0YXRzLW1vZGFsLWRpcmVjdGl2ZT5gLFxuICAgICAgICAgICAgICAgICAgICBzaXplOiBcIm1vZGFsLXgtbGdcIixcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdzdGF0aWNzTW9kYWwnLFxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7fSxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXNrRXhlY3V0aW9uSWQgPSB0YXNrRXhlY3V0aW9uSWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFyZ2V0SWQgPSB0YXJnZXRJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sdU5hbWUgPSBsdU5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbihuZXdUYXJnZXRJZCwgbmV3TFUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXJnZXRJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcmdldElkID0gbmV3VGFyZ2V0SWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sdU5hbWUgPSBuZXdMVTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LDEwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICdzdGF0aWNzTW9kYWxDdHJsJ1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRPcHRpb25zY1JlZmVyZW5jZXMgPSBEVE9wdGlvbnNCdWlsZGVyLmZyb21GblByb21pc2UoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXRUYWJsZURhdGEoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLndpdGhET00oJ2xUZmdpdHAnKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdjcmVhdGVkUm93JywgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZWNvbXBpbGluZyBzbyB3ZSBjYW4gYmluZCBBbmd1bGFyIGRpcmVjdGl2ZSB0byB0aGUgRFRcbiAgICAgICAgICAgICAgICAgICAgJGNvbXBpbGUoYW5ndWxhci5lbGVtZW50KHJvdykuY29udGVudHMoKSkoJHNjb3BlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzY3JvbGxYJywgZmFsc2UpXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2xlbmd0aENoYW5nZScsIHRydWUpXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3BhZ2luZycsIHRydWUpXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3NlYXJjaGluZycsIHRydWUpXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2luZm8nLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKFwiY2FzZUluc2Vuc2l0aXZlXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3NlYXJjaCcsIHtcbiAgICAgICAgICAgICAgICAgICAgXCJjYXNlSW5zZW5zaXRpdmVcIjogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZUNhbGxiYWNrY1JlZmVyZW5jZXMgPSBmdW5jdGlvbiAoZHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24odGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNSZWZlcmVuY2VzKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlY1JlZmVyZW5jZXMoZHRJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzRGVmaW5lZCh0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlY1JlZmVyZW5jZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjUmVmZXJlbmNlcyA9IGR0SW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlY1JlZmVyZW5jZXMuY2hhbmdlRGF0YSAhPSBudWxsKVxuICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjUmVmZXJlbmNlcy5jaGFuZ2VEYXRhKGdldFRhYmxlRGF0YSgpKTtcblxuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwubG9hZGluZ1RhYmxlQ29waWVkUmVmZXJlbmNlcyA9IGZhbHNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLm1ha2VDb3BpZWRFbnRpdGllc1RhYmxlID0gZnVuY3Rpb24gKGlzUm9vdCwgcmVmcmVzaERhdGEpIHtcbiAgICAgICAgICAgIGlmIChyZWZyZXNoRGF0YSl7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjRW50aXRpZXMgJiYgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNFbnRpdGllcy5yZWxvYWREYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjRW50aXRpZXMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlY0VudGl0aWVzID0ge307XG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdENvbHVtbnNjRW50aXRpZXMgPSBbXTtcbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0Q29sdW1uRGVmc2NFbnRpdGllcyA9IFtdO1xuICAgICAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNjRW50aXRpZXMgPSBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3NvdXJjZUlkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdTb3VyY2UgaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3RhcmdldElkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdUYXJnZXQgaWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuaGVhZGVyc2NFbnRpdGllcyA9IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnc291cmNlSWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NvdXJjZSBpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAndGFyZ2V0SWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RhcmdldCBpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3BhcmVudEx1TmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUGFyZW50IExVIE5hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdwYXJlbnRTb3VyY2VJZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUGFyZW50IFNvdXJjZSBJRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3BhcmVudFRhcmdldElkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdQYXJlbnQgVGFyZ2V0IElEJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjbGlja2FibGVDb2wgPSAoZGF0YSwgdHlwZSwgZnVsbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPGEgbmctY2xpY2s9XCJ0YXNrU3RhdGVzQ3RybC5vcGVuU3RhdHNNb2RhbCgnJHtmdWxsLnRhcmdldElkfScpXCI+ICAke2RhdGF9IDwvYT5gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXNrU3RhdGVzQ3RybC5oZWFkZXJzY0VudGl0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNjRW50aXRpZXNbaV0uY2xpY2tBYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0Q29sdW1uc2NFbnRpdGllcy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4odGFza1N0YXRlc0N0cmwuaGVhZGVyc2NFbnRpdGllc1tpXS5jb2x1bW4pLndpdGhUaXRsZSh0YXNrU3RhdGVzQ3RybC5oZWFkZXJzY0VudGl0aWVzW2ldLm5hbWUpLnJlbmRlcldpdGgoY2xpY2thYmxlQ29sKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRDb2x1bW5zY0VudGl0aWVzLnB1c2goRFRDb2x1bW5CdWlsZGVyLm5ld0NvbHVtbih0YXNrU3RhdGVzQ3RybC5oZWFkZXJzY0VudGl0aWVzW2ldLmNvbHVtbikud2l0aFRpdGxlKHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNjRW50aXRpZXNbaV0ubmFtZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGdldFRhYmxlRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodGFza1N0YXRlc0N0cmwuY0VudGl0aWVzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0T3B0aW9uc2NFbnRpdGllcyA9IERUT3B0aW9uc0J1aWxkZXIuZnJvbUZuUHJvbWlzZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFRhYmxlRGF0YSgpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAud2l0aERPTSgnbFRmZ2l0cCcpXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ2NyZWF0ZWRSb3cnLCBmdW5jdGlvbiAocm93KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlY29tcGlsaW5nIHNvIHdlIGNhbiBiaW5kIEFuZ3VsYXIgZGlyZWN0aXZlIHRvIHRoZSBEVFxuICAgICAgICAgICAgICAgICAgICAkY29tcGlsZShhbmd1bGFyLmVsZW1lbnQocm93KS5jb250ZW50cygpKSgkc2NvcGUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oJ3Njcm9sbFgnLCBmYWxzZSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignbGVuZ3RoQ2hhbmdlJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbigncGFnaW5nJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignc2VhcmNoaW5nJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignaW5mbycsIHRydWUpXG4gICAgICAgICAgICAgICAgLndpdGhPcHRpb24oXCJjYXNlSW5zZW5zaXRpdmVcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignc2VhcmNoJywge1xuICAgICAgICAgICAgICAgICAgICBcImNhc2VJbnNlbnNpdGl2ZVwiOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlQ2FsbGJhY2tjRW50aXRpZXMgPSBmdW5jdGlvbiAoZHRJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24odGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNFbnRpdGllcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNFbnRpdGllcyhkdEluc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjRW50aXRpZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjRW50aXRpZXMgPSBkdEluc3RhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNFbnRpdGllcy5jaGFuZ2VEYXRhICE9IG51bGwpXG4gICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNFbnRpdGllcy5jaGFuZ2VEYXRhKGdldFRhYmxlRGF0YSgpKTtcblxuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwubG9hZGluZ1RhYmxlQ29waWVkRW50aXRpZXMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VjRW50aXRpZXMgJiYgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNFbnRpdGllcy5yZWxvYWREYXRhKSB7XG4gICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWNFbnRpdGllcy5yZWxvYWREYXRhKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGFza1N0YXRlc0N0cmwubWFrZUZhaWxlZFJlZmVyZW5jZVRhYmxlID0gZnVuY3Rpb24gKGlzUm9vdCwgcmVmcmVzaERhdGEpIHtcbiAgICAgICAgICAgIGlmIChyZWZyZXNoRGF0YSl7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VmUmVmZXJlbmNlcyAmJiB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZlJlZmVyZW5jZXMucmVsb2FkRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZlJlZmVyZW5jZXMucmVsb2FkRGF0YShmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB9LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZlJlZmVyZW5jZXMgPSB7fTtcbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0Q29sdW1uc2ZSZWZlcmVuY2VzID0gW107XG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdENvbHVtbkRlZnNmUmVmZXJlbmNlcyA9IFtdO1xuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuaGVhZGVyc2ZSZWZlcmVuY2VzID0gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnUmVyZXJuY2VUYWJsZU5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUmVmZXJlbmNlIFRhYmxlIG5hbWUnLFxuICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ2Vycm9yTXNnJyxcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0Vycm9yIE1lc3NhZ2UnLFxuICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YXNrU3RhdGVzQ3RybC5oZWFkZXJzZlJlZmVyZW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdENvbHVtbnNmUmVmZXJlbmNlcy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4odGFza1N0YXRlc0N0cmwuaGVhZGVyc2ZSZWZlcmVuY2VzW2ldLmNvbHVtbikud2l0aFRpdGxlKHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNmUmVmZXJlbmNlc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBnZXRUYWJsZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRhc2tTdGF0ZXNDdHJsLmZSZWZlcmVuY2VzKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0T3B0aW9uc2ZSZWZlcmVuY2VzID0gRFRPcHRpb25zQnVpbGRlci5mcm9tRm5Qcm9taXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGFibGVEYXRhKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC53aXRoRE9NKCdsVGZnaXRwJylcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignY3JlYXRlZFJvdycsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjb21waWxpbmcgc28gd2UgY2FuIGJpbmQgQW5ndWxhciBkaXJlY3RpdmUgdG8gdGhlIERUXG4gICAgICAgICAgICAgICAgICAgICRjb21waWxlKGFuZ3VsYXIuZWxlbWVudChyb3cpLmNvbnRlbnRzKCkpKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignc2Nyb2xsWCcsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdsZW5ndGhDaGFuZ2UnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdwYWdpbmcnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2hpbmcnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdpbmZvJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbihcImNhc2VJbnNlbnNpdGl2ZVwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2gnLCB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2FzZUluc2Vuc2l0aXZlXCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VDYWxsYmFja2ZSZWZlcmVuY2VzID0gZnVuY3Rpb24gKGR0SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VmUmVmZXJlbmNlcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWZSZWZlcmVuY2VzKGR0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0RlZmluZWQodGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWZSZWZlcmVuY2VzKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZlJlZmVyZW5jZXMgPSBkdEluc3RhbmNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWZSZWZlcmVuY2VzLmNoYW5nZURhdGEgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZlJlZmVyZW5jZXMuY2hhbmdlRGF0YShnZXRUYWJsZURhdGEoKSk7XG5cbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmxvYWRpbmdUYWJsZUZhaWxlZFJlZmVyZW5jZXMgPSBmYWxzZTtcblxuXG4gICAgICAgIH1cblxuICAgICAgICB0YXNrU3RhdGVzQ3RybC5tYWtlRmFpbGVkRW50aXRpZXNUYWJsZSA9IGZ1bmN0aW9uIChpc1Jvb3QsIHJlZnJlc2hEYXRhKSB7XG4gICAgICAgICAgICBpZiAocmVmcmVzaERhdGEpe1xuICAgICAgICAgICAgICAgIGlmICh0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZkVudGl0aWVzICYmIHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VmRW50aXRpZXMucmVsb2FkRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZkVudGl0aWVzLnJlbG9hZERhdGEoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWZFbnRpdGllcyA9IHt9O1xuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRDb2x1bW5zZkVudGl0aWVzID0gW107XG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdENvbHVtbkRlZnNmRW50aXRpZXMgPSBbXTtcbiAgICAgICAgICAgIGlmICghaXNSb290KSB7XG4gICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuaGVhZGVyc2ZFbnRpdGllcyA9IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnc291cmNlSWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NvdXJjZSBpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAndGFyZ2V0SWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RhcmdldCBpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3BhcmVudEx1TmFtZScsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUGFyZW50IExVIE5hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdwYXJlbnRTb3VyY2VJZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnUGFyZW50IFNvdXJjZSBJRCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ3BhcmVudFRhcmdldElkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdQYXJlbnQgVGFyZ2V0IElEJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrQWJsZTogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnY29weUVudGl0eVN0YXR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnRW50aXR5IFN0YXR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ2NvcHlIaWVyYXJjaHlTdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0hpZXJhcmNoeSBEYXRhIFN0YXR1cycsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuaGVhZGVyc2ZFbnRpdGllcyA9IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAnc291cmNlSWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NvdXJjZSBpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uOiAndGFyZ2V0SWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1RhcmdldCBpZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlja0FibGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogJ2NvcHlFbnRpdHlTdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0VudGl0eSBTdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46ICdjb3B5SGllcmFyY2h5U3RhdHVzJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdIaWVyYXJjaHkgRGF0YSBTdGF0dXMnLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tBYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgIFxuICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBjbGlja2FibGVDb2wgPSAoZGF0YSwgdHlwZSwgZnVsbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBgPGEgbmctY2xpY2s9XCJ0YXNrU3RhdGVzQ3RybC5vcGVuU3RhdHNNb2RhbCgnJHtmdWxsLnRhcmdldElkfScpXCI+ICAke2RhdGF9IDwvYT5gO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNmRW50aXRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAodGFza1N0YXRlc0N0cmwuaGVhZGVyc2ZFbnRpdGllc1tpXS5jbGlja0FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRDb2x1bW5zZkVudGl0aWVzLnB1c2goRFRDb2x1bW5CdWlsZGVyLm5ld0NvbHVtbih0YXNrU3RhdGVzQ3RybC5oZWFkZXJzZkVudGl0aWVzW2ldLmNvbHVtbikud2l0aFRpdGxlKHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNmRW50aXRpZXNbaV0ubmFtZSkucmVuZGVyV2l0aChjbGlja2FibGVDb2wpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdENvbHVtbnNmRW50aXRpZXMucHVzaChEVENvbHVtbkJ1aWxkZXIubmV3Q29sdW1uKHRhc2tTdGF0ZXNDdHJsLmhlYWRlcnNmRW50aXRpZXNbaV0uY29sdW1uKS53aXRoVGl0bGUodGFza1N0YXRlc0N0cmwuaGVhZGVyc2ZFbnRpdGllc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZ2V0VGFibGVEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0YXNrU3RhdGVzQ3RybC5mRW50aXRpZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRPcHRpb25zZkVudGl0aWVzID0gRFRPcHRpb25zQnVpbGRlci5mcm9tRm5Qcm9taXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGFibGVEYXRhKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC53aXRoRE9NKCdsVGZnaXRwJylcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignY3JlYXRlZFJvdycsIGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVjb21waWxpbmcgc28gd2UgY2FuIGJpbmQgQW5ndWxhciBkaXJlY3RpdmUgdG8gdGhlIERUXG4gICAgICAgICAgICAgICAgICAgICRjb21waWxlKGFuZ3VsYXIuZWxlbWVudChyb3cpLmNvbnRlbnRzKCkpKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbignc2Nyb2xsWCcsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdsZW5ndGhDaGFuZ2UnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdwYWdpbmcnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2hpbmcnLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdpbmZvJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAud2l0aE9wdGlvbihcImNhc2VJbnNlbnNpdGl2ZVwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC53aXRoT3B0aW9uKCdzZWFyY2gnLCB7XG4gICAgICAgICAgICAgICAgICAgIFwiY2FzZUluc2Vuc2l0aXZlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImR0XCIgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzZWFyY2hcIik7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmR0SW5zdGFuY2VDYWxsYmFja2ZFbnRpdGllcyA9IGZ1bmN0aW9uIChkdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbih0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZkVudGl0aWVzKSkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZkVudGl0aWVzKGR0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0RlZmluZWQodGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWZFbnRpdGllcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZHRJbnN0YW5jZWZFbnRpdGllcyA9IGR0SW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZkVudGl0aWVzLmNoYW5nZURhdGEgIT0gbnVsbClcbiAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5kdEluc3RhbmNlZkVudGl0aWVzLmNoYW5nZURhdGEoZ2V0VGFibGVEYXRhKCkpO1xuXG4gICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5sb2FkaW5nVGFibGVGYWlsZWRFbnRpdGllcyA9IGZhbHNlO1xuXG4gICAgICAgIH07XG5cbiAgICAgICAgdGFza1N0YXRlc0N0cmwubWFrZVRhYmxlcyA9IGZ1bmN0aW9uIChpc1Jvb3QscmVmcmVzaERhdGEpIHtcblxuICAgICAgICAgICAgLy8gdGFza0hpc3RvcnlUYWJsZUN0cmwuZHRJbnN0YW5jZS5yZWxvYWREYXRhKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAvLyB9LCBmYWxzZSk7XG5cbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLm1ha2VDb3BpZWRSZWZlcmVuY2VUYWJsZShpc1Jvb3QsIHJlZnJlc2hEYXRhKTtcbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLm1ha2VDb3BpZWRFbnRpdGllc1RhYmxlKGlzUm9vdCwgcmVmcmVzaERhdGEpO1xuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwubWFrZUZhaWxlZFJlZmVyZW5jZVRhYmxlKGlzUm9vdCwgcmVmcmVzaERhdGEpO1xuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwubWFrZUZhaWxlZEVudGl0aWVzVGFibGUoaXNSb290LCByZWZyZXNoRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYm9keSA9IHtcbiAgICAgICAgICAgIHRhc2tFeGVjdXRpb25JZDogdGFza1N0YXRlc0N0cmwudGFza3NFeGVjSURcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGFza1N0YXRlc0N0cmwudHlwZSA9PSBcIkVYVFJBQ1RcIikge1xuICAgICAgICAgICAgaWYgKHRhc2tTdGF0ZXNDdHJsLnJlZmNvdW50ID4gMCAmJiB0YXNrU3RhdGVzQ3RybC5zZWxlY3Rpb25NZXRob2QgIT09IFwiUkVGXCIpIHtcbiAgICAgICAgICAgICAgICBib2R5LmZhYnJpY0V4ZWN1dGlvbklkID0gdGFza1N0YXRlc0N0cmwuZmFicmljRXhlY0lEO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXNrU3RhdGVzQ3RybC5yZWZjb3VudCA9PSAwICYmIHRhc2tTdGF0ZXNDdHJsLnNlbGVjdGlvbk1ldGhvZCAhPT0gXCJSRUZcIikge1xuICAgICAgICAgICAgICAgIGJvZHkuZmFicmljRXhlY3V0aW9uSWQgPSB0YXNrU3RhdGVzQ3RybC5mYWJyaWNFeGVjSUQ7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGJvZHkudGFza0V4ZWN1dGlvbklkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGFza1N0YXRlc0N0cmwuY29sbGFwc2VOb2RlID0gKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIFRETVNlcnZpY2UuZ2V0TFVDaGlsZHJlbih7XG4gICAgICAgICAgICAgICAgdGFza0V4ZWN1dGlvbklkOiB0YXNrU3RhdGVzQ3RybC50YXNrc0V4ZWNJRCxcbiAgICAgICAgICAgICAgICBsdV9uYW1lOiBpdGVtLmx1X25hbWVcbiAgICAgICAgICAgIH0pLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IF8uZmluZChpdGVtLmNoaWxkcmVuLHtsdV9uYW1lIDogY2hpbGQubHVfbmFtZX0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZvdW5kKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXRlbS5jaGlsZHJlbil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsdV9uYW1lOiBjaGlsZC5sdV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQ2hpbGRyZW46IGNoaWxkLmNvdW50ID4gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckluUGF0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IGNoaWxkLmNvdW50XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGdldFRETVN0YXRzID0gKGJvZHksIGlzUm9vdCwgbHVOYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWJvZHkudHlwZSl7XG4gICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwubG9hZGluZ1RhYmxlc0RhdGEgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICBURE1TZXJ2aWNlLmdldFRETVN0YXRzKGJvZHkpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3JDb2RlICE9ICdTVUNDRVNTJykge1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE8gc2hvdyBFcnJvclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhYmxlRGF0YSA9IHJlc3BvbnNlLnJlc3VsdC5kYXRhO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQubHVUcmVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubHVUcmVlTWVudSA9IHJlc3BvbnNlLnJlc3VsdC5sdVRyZWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubHVUcmVlTWVudVswXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLnNlbGVjdGVkTFUgPSAkc2NvcGUubHVUcmVlTWVudVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZURhdGFbXCJDb3BpZWQgUmVmZXJlbmNlIHBlciBleGVjdXRpb25cIl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWJvZHkudHlwZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLnRvdGFsQ29waWVkUmVmZXJlbmNlID0gdGFibGVEYXRhW1wiQ29waWVkIFJlZmVyZW5jZSBwZXIgZXhlY3V0aW9uXCJdLk5vT2ZFbnRpdGllcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuY1JlZmVyZW5jZXMgPSB0YWJsZURhdGFbXCJDb3BpZWQgUmVmZXJlbmNlIHBlciBleGVjdXRpb25cIl0uZW50aXRpZXNMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmNSZWZlcmVuY2VzVGl0bGUgPSBgJHskZmlsdGVyKCd0cmFuc2xhdGUnKSgnQ09QSUVEX1JFRl9UQUJMRVMnKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlRGF0YVtcIkNvcGllZCBlbnRpdGllcyBwZXIgZXhlY3V0aW9uXCJdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFib2R5LnR5cGUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC50b3RhbENvcGllZEVudGl0aWVzID0gdGFibGVEYXRhW1wiQ29waWVkIGVudGl0aWVzIHBlciBleGVjdXRpb25cIl0uTm9PZkVudGl0aWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5jRW50aXRpZXMgPSB0YWJsZURhdGFbXCJDb3BpZWQgZW50aXRpZXMgcGVyIGV4ZWN1dGlvblwiXS5lbnRpdGllc0xpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuY0VudGl0aWVzVGl0bGUgPSBpc1Jvb3QgPyAkZmlsdGVyKCd0cmFuc2xhdGUnKSgnQ09QSUVEX0VOVElUSUVTJykgOiBgJHskZmlsdGVyKCd0cmFuc2xhdGUnKSgnQ09QSUVEJyl9ICR7bHVOYW1lfSAkeyRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdMSVNUJyl9YDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlRGF0YVtcIkZhaWxlZCBSZWZlcmVuY2UgcGVyIGV4ZWN1dGlvblwiXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYm9keS50eXBlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwudG90YWxGYWlsZWRSZWZlcmVuY2UgPSB0YWJsZURhdGFbXCJGYWlsZWQgUmVmZXJlbmNlIHBlciBleGVjdXRpb25cIl0uTm9PZkVudGl0aWVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5mUmVmZXJlbmNlcyA9IHRhYmxlRGF0YVtcIkZhaWxlZCBSZWZlcmVuY2UgcGVyIGV4ZWN1dGlvblwiXS5lbnRpdGllc0xpc3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZlJlZmVyZW5jZXNUaXRsZSA9IGAkeyRmaWx0ZXIoJ3RyYW5zbGF0ZScpKCdGQUlMRURfUkVGX1RBQkxFUycpfWA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZURhdGFbXCJGYWlsZWQgZW50aXRpZXMgcGVyIGV4ZWN1dGlvblwiXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYm9keS50eXBlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwudG90YWxGYWlsZWRFbnRpdGllcyA9IHRhYmxlRGF0YVtcIkZhaWxlZCBlbnRpdGllcyBwZXIgZXhlY3V0aW9uXCJdLk5vT2ZFbnRpdGllcztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZkVudGl0aWVzID0gdGFibGVEYXRhW1wiRmFpbGVkIGVudGl0aWVzIHBlciBleGVjdXRpb25cIl0uZW50aXRpZXNMaXN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLmZFbnRpdGllc1RpdGxlID0gaXNSb290ID8gJGZpbHRlcigndHJhbnNsYXRlJykoJ0ZBSUxFRF9FTlRJVElFUycpIDogYCR7JGZpbHRlcigndHJhbnNsYXRlJykoJ0ZBSUxFRCcpfSAke2x1TmFtZX0gJHskZmlsdGVyKCd0cmFuc2xhdGUnKSgnTElTVCcpfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwudG90YWxDb3BpZWRSZWZlcmVuY2UgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwudG90YWxDb3BpZWRFbnRpdGllcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC50b3RhbEZhaWxlZFJlZmVyZW5jZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC50b3RhbEZhaWxlZEVudGl0aWVzID0gMDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuZkVudGl0aWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5mUmVmZXJlbmNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuY0VudGl0aWVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrU3RhdGVzQ3RybC5jUmVmZXJlbmNlcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwubWFrZVRhYmxlcyhpc1Jvb3QsIGJvZHkudHlwZSk7XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFib2R5LnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwubG9hZGluZ1RhYmxlc0RhdGEgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgZ2V0VERNU3RhdHMoYm9keSwgdHJ1ZSk7XG4gICAgICAgIFxuXG4gICAgICAgIHRhc2tTdGF0ZXNDdHJsLnVwZGF0ZVRETVN0YXRzICA9IChpdGVtLCBlbnRpdHlJZCwgdHlwZSkgPT4ge1xuICAgICAgICAgICAgZ2V0VERNU3RhdHMoe1xuICAgICAgICAgICAgICAgIHRhc2tFeGVjdXRpb25JZDogdGFza1N0YXRlc0N0cmwudGFza3NFeGVjSUQsXG4gICAgICAgICAgICAgICAgbHVfbmFtZTogaXRlbS5sdV9uYW1lLFxuICAgICAgICAgICAgICAgIGVudGl0eUlkIDogZW50aXR5SWQsXG4gICAgICAgICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICAgIH0sIGl0ZW0uaXNSb290LCBpdGVtLmx1X25hbWUpO1xuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuc2VsZWN0ZWRMVS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGFza1N0YXRlc0N0cmwuc2VsZWN0ZWRMVSA9IGl0ZW07XG5cbiAgICAgICAgICAgIGZvciAoaSBvZiAkc2NvcGUubHVUcmVlTWVudSkge1xuICAgICAgICAgICAgICAgIGkuc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoaS5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNoaWxkIG9mIGkuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnNlbGVjdGVkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgdGFza1N0YXRlc0N0cmwub3BlblRhYiA9IGZ1bmN0aW9uICh0YWIpIHtcbiAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLnRhYiA9IHRhYjtcbiAgICAgICAgfTtcbiAgICAgICAgdGFza1N0YXRlc0N0cmwuc2VhcmNoVGV4dCA9ICcnO1xuICAgICAgICAkZWxlbWVudC5vbignc2VhcmNoLmR0JywgZnVuY3Rpb24oZSwgYXBpKSB7XG4gICAgICAgICAgICBpZiAodGFza1N0YXRlc0N0cmwuc2VhcmNoVGV4dCAhPSBhcGkub1ByZXZpb3VzU2VhcmNoLnNTZWFyY2gpe1xuICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLnNlYXJjaFRleHQgPSBhcGkub1ByZXZpb3VzU2VhcmNoLnNTZWFyY2g7XG4gICAgICAgICAgICAgICAgaWYgKHRhc2tTdGF0ZXNDdHJsLnNlYXJjaFRpbWVvdXQpe1xuICAgICAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGFza1N0YXRlc0N0cmwuc2VhcmNoVGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLnNlYXJjaFRpbWVvdXQgPSAkdGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhTWFwID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgMTogJ0NvcGllZCBlbnRpdGllcyBwZXIgZXhlY3V0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIDI6ICdGYWlsZWQgZW50aXRpZXMgcGVyIGV4ZWN1dGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAzOiAnQ29waWVkIFJlZmVyZW5jZSBwZXIgZXhlY3V0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIDQ6ICdGYWlsZWQgUmVmZXJlbmNlIHBlciBleGVjdXRpb24nLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhc2tTdGF0ZXNDdHJsLnVwZGF0ZVRETVN0YXRzKHRhc2tTdGF0ZXNDdHJsLnNlbGVjdGVkTFUsdGFza1N0YXRlc0N0cmwuc2VhcmNoVGV4dCxkYXRhTWFwW3Rhc2tTdGF0ZXNDdHJsLnRhYl0pO1xuICAgICAgICAgICAgICAgIH0sMTAwMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogXCJFXCIsXG4gICAgICAgIHRlbXBsYXRlVXJsOiB0ZW1wbGF0ZSxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6ICc9J1xuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSxlbGVtZW50LGF0dHJzKXtcbiAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJ2JvZHknKS5vbignc2VhcmNoLmR0JyxudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6ICd0YXNrU3RhdGVzQ3RybCdcbiAgICB9O1xuXG59XG5cbmFuZ3VsYXJcbiAgICAubW9kdWxlKCdURE0tRkUnKVxuICAgIC5kaXJlY3RpdmUoJ3Rhc2tTdGF0c0RpcmVjdGl2ZScsIHRhc2tTdGF0c0RpcmVjdGl2ZSk7Il19
