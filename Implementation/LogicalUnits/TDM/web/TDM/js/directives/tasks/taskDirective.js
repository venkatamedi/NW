function taskDirective(){return{restrict:"E",templateUrl:"views/tasks/task.html",scope:{content:"="},controller:function($scope,TDMService,BreadCrumbsService,SweetAlert,$uibModal,toastr,$timeout,AuthService,$state,DTOptionsBuilder,DTColumnBuilder,$q,$compile){var taskCtrl=this;if(taskCtrl.minDate=new Date,taskCtrl.minDate=moment(taskCtrl.minDate),taskCtrl.minDate.milliseconds(0),taskCtrl.minDate.seconds(0),taskCtrl.minDate.minutes(0),taskCtrl.minDate.hours(0),taskCtrl.minDate.add(1,"days"),taskCtrl.schedulerOptions={formInputClass:"form-control1 cron-gen-input",formSelectClass:"form-control1 cron-gen-select",formRadioClass:"cron-gen-radio",formCheckboxClass:"cron-gen-checkbox",hideMinutesTab:!1,hideHourlyTab:!1,hideDailyTab:!1,hideWeeklyTab:!1,hideMonthlyTab:!1,hideYearlyTab:!1,hideAdvancedTab:!1,use24HourTime:!0,hideSeconds:!1},taskCtrl.taskData=angular.copy($scope.content.task),taskCtrl.copyTask=$scope.content.copy,taskCtrl.copyTask&&(taskCtrl.taskData.task_title=taskCtrl.taskData.task_title+" Copy"),taskCtrl.isFluxMode=AuthService.isFluxMode(),taskCtrl.retentionPeriod=AuthService.getRetentionPeriod(),taskCtrl.taskData.reference=null,taskCtrl.taskData.sync_mode&&(taskCtrl.taskData.request_of_fresh_data=!0),"EXTRACT"!==taskCtrl.taskData.task_type||taskCtrl.taskData.version_ind||taskCtrl.taskData.retention_period_value||(taskCtrl.taskData.retention_period_value=0),"REF"==taskCtrl.taskData.selection_method?taskCtrl.taskData.reference="refernceOnly":taskCtrl.taskData.refcount>0&&(taskCtrl.taskData.reference="both"),taskCtrl.taskData.reference&&TDMService.getGenericAPI("task/refsTable/"+taskCtrl.taskData.task_id).then((function(response){taskCtrl.taskData.refList=_.map(response.result,(function(ref){return ref.selected=!0,ref}))})),taskCtrl.referenceDropDown=[{text:"None",value:null},{text:"Reference Only",value:"refernceOnly"},{text:"Both - reference and entities",value:"both"}],taskCtrl.timeZoneOffset=AuthService.getTimeZone(),_.remove(taskCtrl.retentionPeriod.availableOptions,(function(period){if(period.units>taskCtrl.retentionPeriod.maxRetentionPeriod)return!0})),TDMService.getGenericAPI("task/"+taskCtrl.taskData.task_id+"/globals").then((function(response){taskCtrl.taskData.globals=response.result})),taskCtrl.referenceChange=function(){"refernceOnly"==taskCtrl.taskData.reference&&(taskCtrl.taskData.selectAllEntites=!1)},taskCtrl.taskData.scheduling_end_date?(taskCtrl.taskData.scheduling_end_date=moment(new Date(taskCtrl.taskData.scheduling_end_date)),taskCtrl.scheduleEndBy="endBy"):taskCtrl.scheduleEndBy="noEndBy",taskCtrl.versionForLoadTo=new Date,taskCtrl.versionForLoadFrom=new Date,taskCtrl.versionForLoadFrom.setDate(taskCtrl.versionForLoadFrom.getDate()-30),taskCtrl.taskData.retention_period_value)taskCtrl.retention_period_type=_.find(taskCtrl.retentionPeriod.availableOptions,{name:taskCtrl.taskData.retention_period_type}),taskCtrl.taskData.retention_period_value=parseFloat(taskCtrl.taskData.retention_period_value);else if(taskCtrl.retentionPeriod&&taskCtrl.retentionPeriod.defaultPeriod&&taskCtrl.retentionPeriod.defaultPeriod.unit){var defaultRetintion=_.find(taskCtrl.retentionPeriod.availableOptions,{name:taskCtrl.retentionPeriod.defaultPeriod.unit});defaultRetintion&&(taskCtrl.retention_period_type=defaultRetintion,taskCtrl.taskData.retention_period_type=taskCtrl.retention_period_type.name,"EXTRACT"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind&&(taskCtrl.taskData.retention_period_value=taskCtrl.retentionPeriod.defaultPeriod.value))}taskCtrl.retentionPeriodTypeChanged=function(){taskCtrl.taskData.retention_period_type=taskCtrl.retention_period_type.name},taskCtrl.taskData.delete_before_load&&taskCtrl.taskData.load_entity?taskCtrl.taskData.operationMode="delete_and_load_entity":!taskCtrl.taskData.delete_before_load&&taskCtrl.taskData.load_entity?taskCtrl.taskData.operationMode="insert_entity_without_delete":taskCtrl.taskData.delete_before_load&&!taskCtrl.taskData.load_entity?taskCtrl.taskData.operationMode="delete_without_load_entity":taskCtrl.taskData.operationMode="insert_entity_without_delete",taskCtrl.taskTitlePattern="^((?!_).)*$",taskCtrl.step=1;var userRole=AuthService.getRole(),username=AuthService.getUsername();if(TDMService.getFabricRolesforUser(AuthService.getUserId()).then(response=>{taskCtrl.userFabricRoles=response.result||[]}),taskCtrl.userRoleType=userRole.type,taskCtrl.entitiesPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){"+(taskCtrl.taskData.number_of_entities_to_copy-1)+"})?$"),taskCtrl.excultionPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,})?$"),taskCtrl.syntheticPattern="^[a-zA-Z0-9._-]+$",taskCtrl.updateEntitiesPattern=function(){taskCtrl.taskData.number_of_entities_to_copy&&(taskCtrl.entitiesPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){"+(taskCtrl.taskData.number_of_entities_to_copy-1)+"})?$"))},TDMService.getTimeZone().then((function(response){"SUCCESS"==response.errorCode?taskCtrl.timeZoneMessage="Task execution time will be based on "+response.result.current_setting+" time zone":taskCtrl.timeZoneMessage="Task execution time will be based on DB time zone"})),taskCtrl.disableChange="Inactive"==taskCtrl.taskData.task_status||username!=taskCtrl.taskData.task_created_by,"Active"==taskCtrl.taskData.task_status&&(taskCtrl.taskData.owners.indexOf(username)>=0||"admin"==userRole.type)&&(taskCtrl.disableChange=!1),taskCtrl.copyTask&&(taskCtrl.disableChange=!1),"admin"==userRole.type||taskCtrl.disableChange?TDMService.getEnvironments().then((function(response){"SUCCESS"==response.errorCode?(taskCtrl.allEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_write||"Active"!==env.environment_status)})),taskCtrl.allSourceEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_read||"Active"!==env.environment_status)})),taskCtrl.allSourceEnvironments=_.unique(taskCtrl.allSourceEnvironments,"environment_name")):toastr.error("Task # "+taskCtrl.taskData.task_id,"Faild to get Environments for user")})):TDMService.getEnvironmentsForUser().then((function(response){"SUCCESS"==response.errorCode?(taskCtrl.allEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_write||"Active"!==env.environment_status)})),taskCtrl.allSourceEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_read||"Active"!==env.environment_status)})),taskCtrl.allSourceEnvironments=_.unique(taskCtrl.allSourceEnvironments,"environment_name")):toastr.error("Task # "+taskCtrl.taskData.task_id,"Faild to get Environments for user")})),taskCtrl.entitiesListChange=function(){taskCtrl.entitiesListChangeTimeout&&$timeout.cancel(taskCtrl.entitiesListChangeTimeout),"LOAD"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind&&!taskCtrl.taskData.selectAllEntites&&(taskCtrl.entitiesListChangeTimeout=$timeout((function(){taskCtrl.getVersionsForLoad()}),1e3))},taskCtrl.taskModeChange=function(init,task_type){if(taskCtrl.taskData.version_ind&&(taskCtrl.taskData.number_of_entities_to_copy=void 0),task_type&&(taskCtrl.taskData.source_environment_id=null,taskCtrl.taskData.environment_id=null,taskCtrl.taskData.source_env_name=null,taskCtrl.maxToCopy=null),taskCtrl.taskData.version_ind&&"LOAD"==taskCtrl.taskData.task_type)taskCtrl.logicalUnits=[],taskCtrl.logicalUnit=null,init||(taskCtrl.taskData.be_id=null);else if("EXTRACT"==taskCtrl.taskData.task_type){if(taskCtrl.logicalUnits=[],taskCtrl.logicalUnit=null,init||(taskCtrl.taskData.be_id=null),task_type&&!taskCtrl.taskData.version_ind)taskCtrl.taskData.retention_period_value=0;else if(taskCtrl.taskData.version_ind&&!taskCtrl.taskData.retention_period_value&&taskCtrl.retentionPeriod&&taskCtrl.retentionPeriod.defaultPeriod&&taskCtrl.retentionPeriod.defaultPeriod.unit){var defaultRetintion=_.find(taskCtrl.retentionPeriod.availableOptions,{name:taskCtrl.retentionPeriod.defaultPeriod.unit});defaultRetintion&&(taskCtrl.retention_period_type=defaultRetintion,taskCtrl.taskData.retention_period_type=taskCtrl.retention_period_type.name,"EXTRACT"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind&&(taskCtrl.taskData.retention_period_value=taskCtrl.retentionPeriod.defaultPeriod.value))}}else taskCtrl.taskData.selectAllEntites=!1,taskCtrl.logicalUnit=null;taskCtrl.taskData.selectAllEntites||(taskCtrl.selectFieldType="given")},taskCtrl.getAllLogicalUnitsForEnv=function(source_environment_id,environment_id,init){source_environment_id&&environment_id&&(taskCtrl.allSingleLogicalUnits=[],TDMService.getGenericAPI("sourceenvid/"+source_environment_id+"/targetendid/"+environment_id+"/logicalUnits").then((function(response){"SUCCESS"==response.errorCode?(taskCtrl.allSingleLogicalUnits=response.result,init&&taskCtrl.logicalUnits&&taskCtrl.logicalUnits[0]&&(taskCtrl.logicalUnit=_.find(taskCtrl.allSingleLogicalUnits,{lu_id:taskCtrl.logicalUnits[0].lu_id}))):toastr.error("Faild to get Logical units")})))},taskCtrl.sourceEnvironmentChange=function(getRoles,init){var sourceEnv=_.find(taskCtrl.allSourceEnvironments,{environment_id:taskCtrl.taskData.source_environment_id});sourceEnv&&(taskCtrl.taskData.source_env_name=sourceEnv.environment_name),getRoles&&taskCtrl.environmentChange(init,taskCtrl.taskData.source_environment_id,!0)},taskCtrl.checkReferenceIfAllowed=function(){taskCtrl.userRole&&taskCtrl.userRole.allowed_refresh_reference_data||taskCtrl.sourceUserRole&&taskCtrl.sourceUserRole.allowed_refresh_reference_data||(taskCtrl.taskData.reference=null)},taskCtrl.environmentChange=function(init,environment_id,source){"admin"==userRole.type?(taskCtrl.userRole={},taskCtrl.userRole.allowed_random_entity_selection=!0,taskCtrl.userRole.allowed_creation_of_synthetic_data=!0,taskCtrl.userRole.allowed_refresh_reference_data=!0,taskCtrl.userRole.allowed_request_of_fresh_data=!0,taskCtrl.userRole.allowed_delete_before_load=!0,taskCtrl.userRole.allowed_task_scheduling=!0,taskCtrl.userRole.allowed_replace_sequences=!0,taskCtrl.maxToCopy=null,taskCtrl.taskData.number_of_entities_to_copy=parseInt(taskCtrl.taskData.number_of_entities_to_copy)):TDMService.getEnvironmentOwners(environment_id||taskCtrl.taskData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){var ownerFound=_.find(response.result,{user_id:AuthService.getUserId()});if(!ownerFound)for(let i=0;i<taskCtrl.userFabricRoles.length&&!(ownerFound=_.find(response.result,{user_type:"GROUP",user_id:taskCtrl.userFabricRoles[i]}));i++);ownerFound?(taskCtrl.userRole={},taskCtrl.userRole.allowed_random_entity_selection=!0,taskCtrl.userRole.allowed_creation_of_synthetic_data=!0,taskCtrl.userRole.allowed_refresh_reference_data=!0,taskCtrl.userRole.allowed_request_of_fresh_data=!0,taskCtrl.userRole.allowed_delete_before_load=!0,taskCtrl.userRole.allowed_task_scheduling=!0,taskCtrl.userRole.allowed_replace_sequences=!0,taskCtrl.taskData.number_of_entities_to_copy=parseInt(taskCtrl.taskData.number_of_entities_to_copy),environment_id?taskCtrl.sourceEnvOwner=!0:taskCtrl.targetEnvOwner=!0):(environment_id?taskCtrl.sourceEnvOwner=!1:taskCtrl.targetEnvOwner=!1,TDMService.getRoleForUserInEnv(environment_id||taskCtrl.taskData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){environment_id?taskCtrl.sourceUserRole=response.result.userRole:taskCtrl.userRole=response.result.userRole,"LOAD"==taskCtrl.taskData.task_type&&taskCtrl.userRole.allowed_entity_versioning&&taskCtrl.sourceUserRole.allowed_entity_versioning||"EXTRACT"==taskCtrl.taskData.task_type&&taskCtrl.sourceUserRole.allowed_entity_versioning?taskCtrl.allowed_entity_versioning=!0:(taskCtrl.allowed_entity_versioning=!1,taskCtrl.taskData.version_ind=!1),taskCtrl.checkReferenceIfAllowed();var minRead=response.result.minRead,minWrite=response.result.minWrite;(minRead>-1||minWrite>-1)&&(minWrite=parseInt(minWrite||"0"),minRead=parseInt(minRead||"0"),environment_id?(taskCtrl.sourceMaxToCopy=minRead,taskCtrl.maxToCopy>minRead?taskCtrl.maxToCopy=minRead:taskCtrl.maxToCopy||(taskCtrl.maxToCopy=minRead)):(taskCtrl.targetMaxToCopy=minWrite,taskCtrl.maxToCopy>minWrite?taskCtrl.maxToCopy=minWrite:taskCtrl.maxToCopy||(taskCtrl.maxToCopy=minWrite)))}else toastr.error("Task # "+taskCtrl.taskData.task_id,"Faild to get Role for user ")})))}else toastr.error("Environment # "+environment_id||taskCtrl.taskData.environment_id,"failed to get owners : "+response.message)})),source&&"EXTRACT"!==taskCtrl.taskData.task_type&&(!init||source)||!environment_id&&!taskCtrl.taskData.environment_id||TDMService.getBusinessEntitiesForEnvProducts(environment_id||taskCtrl.taskData.environment_id).then((function(response){"SUCCESS"==response.errorCode?taskCtrl.businessEntities=response.result:toastr.error("Task # "+taskCtrl.taskData.task_id,"Faild to get Business Entities")})),init||(taskCtrl.taskData.be_id=void 0,taskCtrl.taskData.logicalUnits=[],taskCtrl.allLogicalUnits=[],taskCtrl.products=[])},taskCtrl.updateParams=cb=>{TDMService.getGenericAPI("businessentity/"+taskCtrl.taskData.be_id+"/sourceEnv/"+taskCtrl.taskData.source_env_name+"/parameters").then((function(response){if("SUCCESS"==response.errorCode){taskCtrl.parameters=response.result;let parametersKeys=Object.keys(taskCtrl.parameters);var chosenLUs=_.map(taskCtrl.logicalUnits,(function(lu){return lu.lu_name.toLowerCase()}));for(let i=0;i<parametersKeys.length;i++)chosenLUs.indexOf(parametersKeys[i].split(".")[0].toLowerCase())<0&&delete taskCtrl.parameters[parametersKeys[i]];taskCtrl.parameters=_.map(taskCtrl.parameters,(function(value,key){return{param_name:key,name:value.PARAM_NAME,param_type:value.PARAM_TYPE,valid_values:value.VALID_VALUES,min_value:"number"==value.PARAM_TYPE?parseFloat(value.MIN_VALUE):0,max_value:"number"==value.PARAM_TYPE?parseFloat(value.MAX_VALUE):0}})),cb&&cb.apply()}else toastr.error("Business entity # "+taskCtrl.taskData.be_id,"Failed to get business entity parameters")}))},taskCtrl.businessEntityChange=function(init){init||(taskCtrl.filter&&taskCtrl.filter.group&&(taskCtrl.filter.group.rules=[]),taskCtrl.taskData.selection_param_value=null,taskCtrl.taskData.parameters=null);var be=_.find(taskCtrl.businessEntities,{be_id:taskCtrl.taskData.be_id});be&&(taskCtrl.taskData.be_name=be.be_name);var environment_id="EXTRACT"===taskCtrl.taskData.task_type?taskCtrl.taskData.source_environment_id:taskCtrl.taskData.environment_id;environment_id&&taskCtrl.taskData.be_id&&TDMService.getLogicalUnitsForBusinessEntityAndEnv(taskCtrl.taskData.be_id,environment_id).then((function(response){if("SUCCESS"==response.errorCode)if(taskCtrl.allLogicalUnits=response.result,init){var tempLus=[];for(i=0;i<taskCtrl.logicalUnits.length;i++){var lu=_.find(taskCtrl.allLogicalUnits,{lu_name:taskCtrl.logicalUnits[i].lu_name});lu&&tempLus.push(lu)}taskCtrl.logicalUnits=tempLus}else{taskCtrl.logicalUnits=[];for(var i=0;i<taskCtrl.allLogicalUnits.length;i++)taskCtrl.logicalUnits.push(taskCtrl.allLogicalUnits[i])}else toastr.error("Business entity # "+taskCtrl.taskData.be_id,"Failed to get Logical units")})),taskCtrl.taskData.be_id&&TDMService.getBEPostExecutionProcess(taskCtrl.taskData.be_id).then((function(response){"SUCCESS"==response.errorCode?(taskCtrl.allPostExecutionProcess=response.result,taskCtrl.allPostExecutionProcessIds=_.map(response.result,"process_id"),init||(taskCtrl.postExecutionProcesses=taskCtrl.allPostExecutionProcessIds)):toastr.error("Business entity # "+taskCtrl.taskData.be_id,"Failed to get Post Execution Processes")}))},TDMService.getTaskLogicalUnits(taskCtrl.taskData.task_id).then((function(response){taskCtrl.businessEntityChange(!0),"SUCCESS"==response.errorCode?(taskCtrl.logicalUnits=response.result,taskCtrl.allSingleLogicalUnits=response.result,taskCtrl.allSingleLogicalUnits&&("LOAD"!=taskCtrl.taskData.task_type||taskCtrl.taskData.version_ind)&&taskCtrl.logicalUnits[0]&&(taskCtrl.logicalUnit=_.find(taskCtrl.allSingleLogicalUnits,{lu_id:taskCtrl.logicalUnits[0].lu_id}))):toastr.error("Systems # "+taskCtrl.taskData.task_id,"Failed to get Task Systems")})),TDMService.getTaskPostExecutionProcesses(taskCtrl.taskData.task_id).then((function(response){"SUCCESS"==response.errorCode?taskCtrl.postExecutionProcesses=_.map(response.result,v=>parseInt(v.process_id)):toastr.error("Task # "+taskCtrl.taskData.task_id,"Failed to get Task Post Execution Processes")})),taskCtrl.environmentChange(!0),taskCtrl.requestedEntities={},"ALL"!=taskCtrl.taskData.selection_method?"L"==taskCtrl.taskData.selection_method?(taskCtrl.selectFieldType="given",taskCtrl.requestedEntities.entities_list=taskCtrl.taskData.selection_param_value):"R"==taskCtrl.taskData.selection_method?taskCtrl.selectFieldType="random":"S"==taskCtrl.taskData.selection_method?(taskCtrl.selectFieldType="synthetic",taskCtrl.requestedEntities.synthetic=taskCtrl.taskData.selection_param_value):"P"!=taskCtrl.taskData.selection_method&&"PR"!=taskCtrl.taskData.selection_method||(taskCtrl.selectFieldType="parameters",taskCtrl.filter=JSON.parse(taskCtrl.taskData.parameters),taskCtrl.requestedEntities.query_parameters=taskCtrl.taskData.selection_param_value,taskCtrl.requestedEntities.parameters=taskCtrl.taskData.parameters,"PR"==taskCtrl.taskData.selection_method?taskCtrl.parametersRandom=!0:taskCtrl.parametersRandom=!1):(taskCtrl.taskData.selectAllEntites=!0,taskCtrl.selectFieldType="given"),!taskCtrl.filter){taskCtrl.filter=JSON.parse('{"group": {"operator": "AND","rules": []}}')}function buildSubQuery(rule){var field='"'+rule.field+'"';let condition=rule.condition;var data="'"+rule.data+"'";return"number"==rule.type&&(field+="::numeric[] ",data=rule.data),"Is null"===rule.condition||"Is not null"===rule.condition?"( "+field+" "+condition+" )":"( "+data+" "+condition+" ANY("+field+") )"}function computed(group){if(!group)return"";for(var str="(",i=0;i<group.rules.length;i++)if(group.rules[i].group)i==group.rules.length-1?str+=computed(group.rules[i].group):str+=computed(group.rules[i].group)+" "+group.rules[i].group.operator+" ";else{var data;if(void 0===group.rules[i].data&&"Is null"!=group.rules[i].condition&&"Is not null"!=group.rules[i].condition)return;if("real"==group.rules[i].type)data=group.rules[i].data.toLocaleString().indexOf(".")<=0?group.rules[i].data.toFixed(1):group.rules[i].data;else if("integer"==group.rules[i].type)data=Math.floor(group.rules[i].data);else if("combo"==group.rules[i].type){if(group.rules[i].validValues.indexOf(group.rules[i].data)<0&&"Is null"!=group.rules[i].condition&&"Is not null"!=group.rules[i].condition)return;data=group.rules[i].data}else data=group.rules[i].data;null==data&&(data=""),i==group.rules.length-1?str+=buildSubQuery(group.rules[i]):(str+=buildSubQuery(group.rules[i]),str+=" "+group.rules[i].operator+" ")}return str+")"}"immediate"==taskCtrl.taskData.scheduler?taskCtrl.selectSchedule="immediate":(taskCtrl.selectSchedule="schedule",taskCtrl.scheduleData=taskCtrl.taskData.scheduler),taskCtrl.saveTask=function(){if(!taskCtrl.taskData.selectAllEntites&&"refernceOnly"!==taskCtrl.taskData.reference)if("given"==taskCtrl.selectFieldType){if(taskCtrl.requestedEntities&&taskCtrl.taskData.entity_exclusion_list==taskCtrl.requestedEntities.entities_list)return taskCtrl.errorList=!0,taskCtrl.step=2,void(taskCtrl.createTaskInProgress=!1);taskCtrl.taskData.selection_method="L",taskCtrl.taskData.selection_param_value=taskCtrl.requestedEntities.entities_list}else if("random"==taskCtrl.selectFieldType)taskCtrl.taskData.selection_method="R",taskCtrl.taskData.selection_param_value=null;else if("synthetic"==taskCtrl.selectFieldType)taskCtrl.taskData.selection_method="S",taskCtrl.taskData.selection_param_value=taskCtrl.requestedEntities.synthetic;else{if(!taskCtrl.requestedEntities.query_parameters||"()"==taskCtrl.requestedEntities.query_parameters)return taskCtrl.parametersError=!0,void(taskCtrl.step=2);1==taskCtrl.parametersRandom?taskCtrl.taskData.selection_method="PR":taskCtrl.taskData.selection_method="P",taskCtrl.taskData.selection_param_value=taskCtrl.requestedEntities.query_parameters,taskCtrl.taskData.parameters=taskCtrl.requestedEntities.parameters}if("immediate"==taskCtrl.selectSchedule?taskCtrl.taskData.scheduler=taskCtrl.selectSchedule:(taskCtrl.taskData.scheduler=taskCtrl.scheduleData,"endBy"!==taskCtrl.scheduleEndBy?taskCtrl.taskData.scheduling_end_date=null:taskCtrl.taskData.scheduling_end_date.hours(12)),"LOAD"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind&&(taskCtrl.taskData.operationMode="delete_and_load_entity"),"delete_and_load_entity"==taskCtrl.taskData.operationMode?(taskCtrl.taskData.replace_sequences=!1,taskCtrl.taskData.load_entity=!0,taskCtrl.taskData.delete_before_load=!0):"insert_entity_without_delete"==taskCtrl.taskData.operationMode?(taskCtrl.taskData.load_entity=!0,taskCtrl.taskData.delete_before_load=!1):"delete_without_load_entity"==taskCtrl.taskData.operationMode?(taskCtrl.taskData.replace_sequences=!1,taskCtrl.taskData.load_entity=!1,taskCtrl.taskData.delete_before_load=!0):(taskCtrl.taskData.load_entity=!0,taskCtrl.taskData.delete_before_load=!1),"LOAD"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind&&"refernceOnly"!==taskCtrl.taskData.reference&&taskCtrl.selectedVersionToLoad){if(!(selectedVersionToLoad=_.find(taskCtrl.versionsForLoad,{fabric_execution_id:taskCtrl.selectedVersionToLoad})))return taskCtrl.step=2,void(taskCtrl.createTaskInProgress=!1);taskCtrl.taskData.selected_version_task_name=selectedVersionToLoad.version_name;var localTimeZone=(version_datetime=new Date(selectedVersionToLoad.version_datetime)).getTimezoneOffset();version_datetime=version_datetime.getTime(),taskCtrl.taskData.selected_version_datetime=moment(version_datetime).format("YYYYMMDDHHmmss"),taskCtrl.taskData.selected_version_task_exe_id=selectedVersionToLoad.task_execution_id}if("LOAD"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind&&("refernceOnly"==taskCtrl.taskData.reference||"both"==taskCtrl.taskData.reference)){if(!taskCtrl.taskData.refLoadVersions)return taskCtrl.step=6,void(taskCtrl.createTaskInProgress=!1);var selectedVersionToLoad;if(selectedVersionToLoad=_.find(taskCtrl.taskData.refLoadVersions,{task_execution_id:parseInt(taskCtrl.taskData.selectedRefVersionToLoad)})){taskCtrl.taskData.selected_ref_version_task_name=selectedVersionToLoad.version_name;var version_datetime;localTimeZone=(version_datetime=new Date(selectedVersionToLoad.version_datetime)).getTimezoneOffset();version_datetime=version_datetime.getTime()+6e4*localTimeZone,taskCtrl.taskData.selected_ref_version_datetime=moment(version_datetime-6e4*taskCtrl.timeZoneOffset).format("YYYYMMDDHHmmss"),taskCtrl.taskData.selected_ref_version_task_exe_id=selectedVersionToLoad.task_execution_id}}taskCtrl.taskData.request_of_fresh_data||(taskCtrl.taskData.sync_mode=null),"EXTRACT"===taskCtrl.taskData.task_type&&(taskCtrl.taskData.load_entity=!1,taskCtrl.taskData.environment_id=taskCtrl.taskData.source_environment_id,!taskCtrl.taskData.version_ind&&taskCtrl.taskData.request_of_fresh_data?taskCtrl.taskData.sync_mode="FORCE":delete taskCtrl.taskData.sync_mode),"EXTRACT"===taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind||taskCtrl.taskData.retention_period_value||(delete taskCtrl.taskData.retention_period_type,delete taskCtrl.taskData.retention_period_value),taskCtrl.taskData.selectAllEntites&&(taskCtrl.taskData.selection_param_value=null),taskCtrl.taskData.selectAllEntites||"LOAD"===taskCtrl.taskData.task_type&&!taskCtrl.taskData.version_ind||"refernceOnly"===taskCtrl.taskData.reference||(taskCtrl.taskData.number_of_entities_to_copy=taskCtrl.requestedEntities.entities_list.split(",").length),taskCtrl.taskData.globals&&0==taskCtrl.taskData.globals.length&&(taskCtrl.taskData.task_globals=!1),taskCtrl.taskData.reference||(taskCtrl.taskData.refList=[]),taskCtrl.taskData.refList&&taskCtrl.taskData.refList.length>0&&(taskCtrl.taskData.refresh_reference_data=!1),taskCtrl.copyTask&&(taskCtrl.taskData.copy=!0),taskCtrl.taskData.version_ind||(taskCtrl.taskData.selected_version_task_name=null,taskCtrl.taskData.selected_version_datetime=null,taskCtrl.taskData.selected_version_task_exe_id=null,taskCtrl.taskData.selected_ref_version_task_name=null,taskCtrl.taskData.selected_ref_version_datetime=null,taskCtrl.taskData.selected_ref_version_task_exe_id=null),TDMService.updateTask(taskCtrl.taskData).then((function(response){taskCtrl.taskData.copy=!1,"SUCCESS"==response.errorCode?(TDMService.postTaskLogicalUnits(response.result.id,taskCtrl.taskData.task_title,{logicalUnits:taskCtrl.logicalUnits}).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Task # "+taskCtrl.taskData.task_title," Is Updated Successfully"),$timeout((function(){$state.go("tasks",{},{reload:!0})}),300)):toastr.error("Task # "+taskCtrl.taskData.task_id," Failed to Update : "+response.message)})),taskCtrl.postExecutionProcesses.length>0&&TDMService.postTaskPostExecutionProcess(response.result.id,taskCtrl.taskData.task_title,{postexecutionprocesses:_.filter(taskCtrl.allPostExecutionProcess,v=>taskCtrl.postExecutionProcesses.indexOf(v.process_id)>=0)}).then((function(response){"SUCCESS"!==response.errorCode&&toastr.error("Task # "+createTaskResult.id," Failed to Update Post Execution Processes: "+response.message)}))):toastr.error("Task # "+taskCtrl.taskData.task_id," Failed to Update : "+response.message)}))},taskCtrl.deleteTask=function(){TDMService.deleteTask(taskCtrl.taskData).then((function(response){"SUCCESS"==response.errorCode?(toastr.success("Task # "+taskCtrl.taskData.task_id,"deleted Successfully"),$timeout((function(){$scope.content.openTasks(!0)}),400)):toastr.error("Task # "+taskCtrl.taskData.task_id,"failed to delete")}))},taskCtrl.parametersCount=0,$scope.getEntitesCount=function(force){if("()"!=taskCtrl.requestedEntities.query_parameters)if(taskCtrl.requestedEntities.query_parameters){if(force||taskCtrl.requestedEntities.query_parameters!==taskCtrl.perviousQueryParams){taskCtrl.parametersError=!1;taskCtrl.requestedEntities.query_parameters,taskCtrl.taskData.environment_id,taskCtrl.taskData.be_id;taskCtrl.taskData.source_env_name&&(taskCtrl.parametersCount="inprogress",TDMService.postGenericAPI("businessentity/"+taskCtrl.taskData.be_id+"/sourceEnv/"+taskCtrl.taskData.source_env_name+"/analysiscount",{where:taskCtrl.requestedEntities.query_parameters}).then((function(response){"SUCCESS"==response.errorCode?taskCtrl.parametersCount=response.result:taskCtrl.parametersCount=0})))}}else taskCtrl.parametersCount=0;else taskCtrl.parametersCount=0},$scope.$watch("taskCtrl.filter",(function(newValue){taskCtrl.analysisCountTimeout&&$timeout.cancel(taskCtrl.analysisCountTimeout),taskCtrl.analysisCountTimeout=$timeout((function(){if(taskCtrl.taskData.be_id){var checkGroup=function(group){if(""==group.operator)return!1;for(var i=0;i<group.rules.length;i++)if(0==((rule=group.rules[i]).group?checkGroup(rule.group):""!==rule.condition&&""!==rule.data&&""!==rule.field))return!1;var rule;return!0};if(newValue&&1==checkGroup(newValue.group)){taskCtrl.requestedEntities.parameters=JSON.stringify(newValue);var query={query:computed(newValue.group)};taskCtrl.requestedEntities.query_parameters=query.query}$scope.getEntitesCount()}}),500)}),!0),taskCtrl.checkMigrateStatus=function(){if(!taskCtrl.requestedEntities.entities_list||!taskCtrl.selectedVersionToLoad)return taskCtrl.requestedEntitiesForm=$scope.requestedEntitiesForm,void($scope.requestedEntitiesForm.submitted=!0);var selectedVersionToLoad=_.find(taskCtrl.versionsForLoad,{fabric_execution_id:taskCtrl.selectedVersionToLoad}),taskExecutionId="",luNames="";selectedVersionToLoad&&(taskExecutionId=selectedVersionToLoad.task_execution_id,luNames=selectedVersionToLoad.lu_name);var version_datetime=new Date(selectedVersionToLoad.version_datetime),localTimeZone=version_datetime.getTimezoneOffset();version_datetime=version_datetime.getTime()+6e4*localTimeZone,TDMService.postGenericAPI("checkMigrateStatusForEntitiesList",{entitlesList:taskCtrl.requestedEntities.entities_list,taskExecutionId:taskExecutionId,luList:luNames}).then((function(response){if("SUCCESS"==response.errorCode){var failedEntities=[];for(var key in response.result)"false"==response.result[key]&&failedEntities.push(key);failedEntities.length>0?toastr.error("Entities "+failedEntities+" were not migrated successfully into the TDM storage by the selected version. Please remove them from the Entities List or select another version "):taskCtrl.requestedEntitiesNext($scope.requestedEntitiesForm,!0)}else toastr.error("Failed to check Migrate Status For Entites List")}))},taskCtrl.getStepsArray=function(){var stepsArray=[];return stepsArray.push(1),null!=taskCtrl.taskData.reference&&stepsArray.push(6),"EXTRACT"==taskCtrl.taskData.task_type&&taskCtrl.taskData.selectAllEntites||"refernceOnly"===taskCtrl.taskData.reference||stepsArray.push(2),taskCtrl.taskData.task_globals&&stepsArray.push(5),("LOAD"==taskCtrl.taskData.task_type&&!taskCtrl.taskData.version_ind||"EXTRACT"==taskCtrl.taskData.task_type&&!taskCtrl.taskData.version_ind&&(taskCtrl.sourceUserRole&&taskCtrl.sourceUserRole.allowed_request_of_fresh_data||taskCtrl.userRole&&taskCtrl.userRole.allowed_request_of_fresh_data))&&"refernceOnly"!==taskCtrl.taskData.reference&&stepsArray.push(3),stepsArray.push(4),stepsArray},taskCtrl.openStep=function(step,type){if("admin"==taskCtrl.userRoleType||taskCtrl.sourceEnvOwner&&taskCtrl.targetEnvOwner||(taskCtrl.taskData.selectAllEntites=!1),2==taskCtrl.step&&"LOAD"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind&&!taskCtrl.taskData.selectAllEntites)return"back"==type&&null!=taskCtrl.taskData.reference?taskCtrl.step=6:1==step?taskCtrl.step=1:void taskCtrl.checkMigrateStatus();var arraySteps=taskCtrl.getStepsArray(),nextStep=step,currentIndex=arraySteps.indexOf(taskCtrl.step),nextIndex=arraySteps.indexOf(step);if(nextIndex<currentIndex&&nextIndex>=0)return nextStep=arraySteps[nextIndex],void(taskCtrl.step=nextStep);if("next"==type){if(currentIndex==arraySteps.length-1)return void console.log("there is no next");nextStep=arraySteps[currentIndex+1]}else if("back"==type)return 0==currentIndex?void console.log("there is no back"):(nextStep=arraySteps[currentIndex-1],void(taskCtrl.step=nextStep));return 1==taskCtrl.step?$scope.generalForm.$valid?void taskCtrl.generalNext($scope.generalForm,nextStep):(taskCtrl.generalForm=$scope.generalForm,void($scope.generalForm.submitted=!0)):2==taskCtrl.step?$scope.requestedEntitiesForm.$valid?(taskCtrl.requestedEntitiesNext($scope.requestedEntitiesForm,!1,nextStep),void($scope.requestedEntitiesForm.submitted=!0)):(taskCtrl.requestedEntitiesForm=$scope.requestedEntitiesForm,void($scope.requestedEntitiesForm.submitted=!0)):3!=taskCtrl.step||$scope.requestParametersForm.$valid?4!=taskCtrl.step||$scope.executionTimingForm.$valid?6!=taskCtrl.step||$scope.ReferenceForm.$valid?void(5!=taskCtrl.step?(taskCtrl.step=nextStep,1==taskCtrl.step?$scope.generalForm.submitted=!0:2==taskCtrl.step?($scope.getEntitesCount(),taskCtrl.updateParams(()=>{console.log("parameters loaded")}),$scope.requestedEntitiesForm.submitted=!0):3==taskCtrl.step?$scope.requestParametersForm.submitted=!0:4==taskCtrl.step&&($scope.executionTimingForm.submitted=!0)):taskCtrl.globalsNext(nextStep)):($scope.ReferenceForm.submitted=!0,void taskCtrl.referenceNext(nextStep)):(taskCtrl.executionTimingForm=$scope.executionTimingForm,void($scope.executionTimingForm.submitted=!0)):(taskCtrl.requestParametersForm=$scope.requestParametersForm,void($scope.requestParametersForm.submitted=!0))},taskCtrl.generalNext=function(form,nextStep){if(taskCtrl.isFluxMode){$scope.generalForm.taskLogicalUnit.$setValidity("gap",!0),$scope.generalForm.taskLogicalUnit.$setValidity("missingParent",!0);let isSelectedLU=lu_name=>_.find(taskCtrl.logicalUnits,{lu_name:lu_name}),checkGap=lu=>{if(lu.lu_parent_name&&!isSelectedLU(lu.lu_parent_name)){const luParent=_.find(taskCtrl.allLogicalUnits,{lu_name:lu.lu_parent_name});luParent&&luParent.lu_parent_name&&isSelectedLU(luParent.lu_parent_name)&&($scope.generalForm.taskLogicalUnit.$setValidity("gap",!1),taskCtrl.missingUnitInGap=luParent.lu_name)}},checkIfRootIsMissing=()=>{for(lu of($scope.generalForm.taskLogicalUnit.$setValidity("missingParent",!0),taskCtrl.missingRootLU=[],taskCtrl.logicalUnits))if(lu.lu_parent_name){const luParent=_.find(taskCtrl.allLogicalUnits,{lu_name:lu.lu_parent_name});luParent&&(luParent.lu_parent_name||isSelectedLU(luParent.lu_name)||($scope.generalForm.taskLogicalUnit.$setValidity("missingParent",!1),taskCtrl.missingRootLU.push(luParent.lu_name)))}};taskCtrl.logicalUnits&&taskCtrl.logicalUnits.length>0&&taskCtrl.logicalUnits.forEach(lu=>{"refernceOnly"!==taskCtrl.taskData.reference&&(checkGap(lu),checkIfRootIsMissing(lu))})}if(form.$valid||1==taskCtrl.disableChange){let cb=()=>{taskCtrl.step=nextStep||2,"admin"==taskCtrl.userRoleType||taskCtrl.sourceEnvOwner&&taskCtrl.targetEnvOwner||(taskCtrl.taskData.selectAllEntites=!1);var sourceEnv=_.find(taskCtrl.allSourceEnvironments,{environment_id:taskCtrl.taskData.source_environment_id});sourceEnv&&(taskCtrl.taskData.source_env_name=sourceEnv.environment_name),taskCtrl.taskData.selectAllEntites&&(taskCtrl.requestedEntities.entities_list=void 0,"EXTRACT"==taskCtrl.taskData.task_type&&(taskCtrl.taskData.task_globals?taskCtrl.step=nextStep||5:!taskCtrl.taskData.version_ind&&(taskCtrl.taskData.version_ind||taskCtrl.userRole&&taskCtrl.userRole.allowed_request_of_fresh_data||taskCtrl.sourceUserRole&&taskCtrl.sourceUserRole.allowed_request_of_fresh_data)?taskCtrl.step=nextStep||3:taskCtrl.step=nextStep||4)),null!=taskCtrl.taskData.reference&&(taskCtrl.step=nextStep||6)};"LOAD"===taskCtrl.taskData.task_type?taskCtrl.updateParams(cb):cb.apply()}else form.submitted=!0;taskCtrl.generalForm=form},taskCtrl.submitForm=function(step,nextStep){const steps=taskCtrl.getStepsArray();if(step!==nextStep)if(steps.indexOf(step)>steps.indexOf(nextStep))taskCtrl.openStep(nextStep,"back");else switch(step){case 1:$scope.generalForm.$setSubmitted(),taskCtrl.generalNext($scope.generalForm,nextStep);break;case 2:$scope.requestedEntitiesForm.$setSubmitted(),taskCtrl.requestedEntitiesNext($scope.requestedEntitiesForm,void 0,nextStep);break;case 3:$scope.requestParametersForm.$setSubmitted(),taskCtrl.requestParametersNext($scope.requestParametersForm);break;case 4:$scope.executionTimingForm.$setSubmitted(),taskCtrl.executionTimingFinish($scope.executionTimingForm);break;case 5:$scope.AddGlobalForm.$setSubmitted(),taskCtrl.globalsNext(nextStep);break;case 6:$scope.ReferenceForm.$setSubmitted(),taskCtrl.referenceNext(nextStep)}},taskCtrl.referenceNext=function(nextStep){if(0!=_.filter(taskCtrl.taskData.refList,{selected:!0}).length)if(taskCtrl.referenceTabError="",taskCtrl.taskData.task_globals)taskCtrl.step=nextStep||5;else{if("refernceOnly"!==taskCtrl.taskData.reference)return"EXTRACT"==taskCtrl.taskData.task_type&&taskCtrl.taskData.selectAllEntites?taskCtrl.step=nextStep||3:taskCtrl.step=nextStep||2;taskCtrl.step=nextStep||4}else taskCtrl.referenceTabError="Please Select Reference Table"},taskCtrl.requestedEntitiesNext=function(form,migrated,nextStep){if("LOAD"!==taskCtrl.taskData.task_type||!taskCtrl.taskData.version_ind||taskCtrl.taskData.selectAllEntites||migrated){if(taskCtrl.isFluxMode&&"LOAD"===taskCtrl.taskData.task_type&&!taskCtrl.taskData.version_ind&&("synthetic"===taskCtrl.selectFieldType||"parameters"===taskCtrl.selectFieldType)){for(lu of($scope.LUsMissingParent=[],taskCtrl.logicalUnits))lu.lu_parent_name&&!_.find(taskCtrl.logicalUnits,{lu_name:lu.lu_parent_name})&&$scope.LUsMissingParent.push(lu.lu_name);if($scope.requestedEntitiesForm.$setValidity("missingParent",!0),$scope.LUsMissingParent.length>0)return void $scope.requestedEntitiesForm.$setValidity("missingParent",!1)}if("given"===taskCtrl.selectFieldType&&taskCtrl.requestedEntities&&"string"==typeof taskCtrl.requestedEntities.entities_list&&taskCtrl.taskData.entity_exclusion_list==taskCtrl.requestedEntities.entities_list)return taskCtrl.errorList=!0,void(form.$valid||(form.submitted=!0,taskCtrl.requestedEntitiesForm=form));if(taskCtrl.enititesListNotPassedExclusionList=!1,taskCtrl.enititesListFailedPatternTest=!1,"LOAD"===taskCtrl.taskData.task_type&&!taskCtrl.taskData.version_ind&&taskCtrl.requestedEntities.entities_list&&"string"==typeof taskCtrl.taskData.entity_exclusion_list&&taskCtrl.requestedEntities.entities_list.length>0&&(taskCtrl.taskData.entity_exclusion_list=taskCtrl.taskData.entity_exclusion_list.replace(/\s/g,""),taskCtrl.taskData.entity_exclusion_list=taskCtrl.taskData.entity_exclusion_list.replace(/\r?\n|\r/g,""),taskCtrl.entitiesPattern.test(taskCtrl.taskData.entity_exclusion_list)||(taskCtrl.enititesExclusionListPatternTest=!0)),"given"==taskCtrl.selectFieldType&&"string"==typeof taskCtrl.requestedEntities.entities_list&&taskCtrl.requestedEntities.entities_list.length>0){taskCtrl.requestedEntities.entities_list=taskCtrl.requestedEntities.entities_list.replace(/\s/g,""),taskCtrl.requestedEntities.entities_list=taskCtrl.requestedEntities.entities_list.replace(/\r?\n|\r/g,"");var entitiesPattern=taskCtrl.entitiesPattern;if(("LOAD"!=taskCtrl.taskData.task_type||taskCtrl.taskData.version_ind)&&(entitiesPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,"+((taskCtrl.maxToCopy||1e9)-1)+"})?$")),entitiesPattern.test(taskCtrl.requestedEntities.entities_list))if("LOAD"!=taskCtrl.taskData.task_type||taskCtrl.taskData.version_ind)taskCtrl.errorList=!1,form.$valid||1==taskCtrl.disableChange?taskCtrl.taskData.task_globals?taskCtrl.step=nextStep||5:("EXTRACT"!=taskCtrl.taskData.task_type&&"LOAD"!=taskCtrl.taskData.task_type||!taskCtrl.taskData.version_ind)&&("EXTRACT"!=taskCtrl.taskData.task_type||taskCtrl.taskData.version_ind||taskCtrl.userRole&&taskCtrl.userRole.allowed_request_of_fresh_data||taskCtrl.sourceUserRole&&taskCtrl.sourceUserRole.allowed_request_of_fresh_data)?taskCtrl.step=nextStep||3:taskCtrl.step=nextStep||4:form.submitted=!0,taskCtrl.requestedEntitiesForm=form;else(dataForValidation={}).exclusion_list=taskCtrl.requestedEntities.entities_list,dataForValidation.be_id=taskCtrl.taskData.be_id,TDMService.postEnvExclusionListValidateList(taskCtrl.taskData.environment_id,dataForValidation).then((function(response){if("SUCCESS"==response.errorCode){if(response.result.length>0){taskCtrl.enititesListNotPassedExclusionList=!0,taskCtrl.existingEntitiesInExclusionListMembers=[];for(var i=0;i<response.result.length;i++)taskCtrl.existingEntitiesInExclusionListMembers.push(response.result[i].unnest);return}taskCtrl.errorList=!1,form.$valid||1==taskCtrl.disableChange?taskCtrl.taskData.task_globals?taskCtrl.step=nextStep||5:taskCtrl.step=nextStep||3:form.submitted=!0,taskCtrl.requestedEntitiesForm=form}else toastr.error("Unable to execute validation against Exclusion List"+response.message)}));else taskCtrl.enititesListFailedPatternTest=!0}else if("synthetic"==taskCtrl.selectFieldType&&taskCtrl.requestedEntities.synthetic){var dataForValidation;(dataForValidation={}).exclusion_list=taskCtrl.requestedEntities.synthetic,dataForValidation.be_id=taskCtrl.taskData.be_id,TDMService.postEnvExclusionListValidateList(taskCtrl.taskData.environment_id,dataForValidation).then((function(response){if("SUCCESS"==response.errorCode){if(response.result.length>0){taskCtrl.enititesListNotPassedExclusionList=!0,taskCtrl.existingEntitiesInExclusionListMembers=[];for(var i=0;i<response.result.length;i++)taskCtrl.existingEntitiesInExclusionListMembers.push(response.result[i].unnest);return}taskCtrl.errorList=!1,form.$valid||1==taskCtrl.disableChange?taskCtrl.taskData.task_globals?taskCtrl.step=nextStep||5:taskCtrl.step=nextStep||3:form.submitted=!0,taskCtrl.requestedEntitiesForm=form}else toastr.error("Unable to execute validation against Exclusion List"+response.message)}))}else taskCtrl.errorList=!1,form.$valid||1==taskCtrl.disableChange?taskCtrl.taskData.task_globals?taskCtrl.step=nextStep||5:("EXTRACT"!=taskCtrl.taskData.task_type&&"LOAD"!=taskCtrl.taskData.task_type||!taskCtrl.taskData.version_ind)&&("EXTRACT"!=taskCtrl.taskData.task_type||taskCtrl.taskData.version_ind||taskCtrl.userRole&&taskCtrl.userRole.allowed_request_of_fresh_data||taskCtrl.sourceUserRole&&taskCtrl.sourceUserRole.allowed_request_of_fresh_data)?taskCtrl.step=nextStep||3:taskCtrl.step=nextStep||4:form.submitted=!0,taskCtrl.requestedEntitiesForm=form}else taskCtrl.checkMigrateStatus()},taskCtrl.globalsNext=function(nextStep){taskCtrl.taskData.version_ind||"refernceOnly"===taskCtrl.taskData.reference?taskCtrl.step=nextStep||4:taskCtrl.step=nextStep||3},taskCtrl.initReferenceForm=ReferenceForm=>{$scope.ReferenceForm=ReferenceForm},taskCtrl.requestParametersNext=function(form){form.$valid||1==taskCtrl.disableChange?taskCtrl.step=4:form.submitted=!0,taskCtrl.requestParametersForm=form},taskCtrl.executionTimingFinish=function(form){if(form.$valid||1==taskCtrl.disableChange){if(!$scope.generalForm.$valid)return void(taskCtrl.step=1);if(taskCtrl.taskData.reference&&0==_.filter(taskCtrl.taskData.refList,{selected:!0}).length)return void(taskCtrl.step=6);if("refernceOnly"!==taskCtrl.taskData.reference&&!$scope.requestedEntitiesForm.$valid)return void(taskCtrl.step=2);if(!$scope.requestParametersForm.$valid)return void(taskCtrl.step=3);taskCtrl.saveTask()}else form.submitted=!0;taskCtrl.executionTimingForm=form},taskCtrl.cronTabConfig={allowMultiple:!0},taskCtrl.toggleVersion=function(task_execution_id){taskCtrl.versionsToggle[task_execution_id]=!taskCtrl.versionsToggle[task_execution_id],taskCtrl.dtInstanceVersions&&taskCtrl.dtInstanceVersions.reloadData&&taskCtrl.dtInstanceVersions.reloadData((function(){}))},taskCtrl.versionsToggle={},taskCtrl.versionsForLoad=[],taskCtrl.dtInstanceVersions={},taskCtrl.dtColumnsVersions=[],taskCtrl.dtColumnDefsVersions=[],taskCtrl.headersVersions=[{column:"collapse",name:"",clickAble:!1},{column:"actions",name:"",clickAble:!1},{column:"version_name",name:"Version Name",clickAble:!0},{column:"task_id",name:"Task Id",clickAble:!1},{column:"task_last_updated_by",name:"Last Updated By",clickAble:!1},{column:"version_type",name:"Version Type",clickAble:!1},{column:"version_datetime",name:"Date Time",type:"date",clickAble:!1},{column:"lu_name",name:"Logical Unit Name",clickAble:!1},{column:"number_of_extracted_entities",name:"Number of Extracted Entities",clickAble:!1},{column:"rootIndicator",name:"Root LU",clickAble:!1}];for(var changeToLocalDate=function(data,type,full,meta){return moment(data).format("DD MMM YYYY, HH:mm")},renderSelectionColumn=function(data,type,full,meta){return full.isRoot?'<input type="radio" ng-value="\''+full.fabric_execution_id+'\'" name="versionsTableSelection" ng-model="taskCtrl.selectedVersionToLoad">':""},renderCollapseColumn=function(data,type,full,meta){return full.isRoot?'<a class="toggleVersions '+(taskCtrl.versionsToggle[full.task_execution_id]?"active":"")+'" ng-click="taskCtrl.toggleVersion('+full.task_execution_id+')"><i class="fa arrow"></i> </a>':""},i=0;i<taskCtrl.headersVersions.length;i++)"actions"==taskCtrl.headersVersions[i].column?taskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(taskCtrl.headersVersions[i].column).withTitle(taskCtrl.headersVersions[i].name).renderWith(renderSelectionColumn).notSortable()):"collapse"==taskCtrl.headersVersions[i].column?taskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(taskCtrl.headersVersions[i].column).withTitle(taskCtrl.headersVersions[i].name).renderWith(renderCollapseColumn).notSortable()):"date"==taskCtrl.headersVersions[i].type?taskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(taskCtrl.headersVersions[i].column).withTitle(taskCtrl.headersVersions[i].name).renderWith(changeToLocalDate).notSortable()):"task_id"==taskCtrl.headersVersions[i].column||"version_name"==taskCtrl.headersVersions[i].column?taskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(taskCtrl.headersVersions[i].column).withTitle(taskCtrl.headersVersions[i].name).notSortable()):"rootIndicator"==taskCtrl.headersVersions[i].column?taskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(taskCtrl.headersVersions[i].column).withTitle(taskCtrl.headersVersions[i].name).notSortable().notVisible()):taskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(taskCtrl.headersVersions[i].column).withTitle(taskCtrl.headersVersions[i].name).notSortable());taskCtrl.dtOptionsVersions=DTOptionsBuilder.fromFnPromise((function(){return function(){var deferred=$q.defer(),versionsForLoad=[];taskCtrl.groupedSelections=new Set;var rootLUs=_.filter(taskCtrl.logicalUnits,{lu_parent_name:null});if(taskCtrl.versionsForLoad.forEach((function(versionForLoad){if(_.find(rootLUs,{lu_name:versionForLoad.lu_name})?versionForLoad.rootIndicator=!0:versionForLoad.rootIndicator=!1,versionForLoad.rootIndicator&&_.findIndex(versionsForLoad,{task_execution_id:versionForLoad.task_execution_id,isRoot:!0})<0)return versionForLoad.isRoot=!0,versionForLoad.rootIndicator=!0,void versionsForLoad.push(versionForLoad);taskCtrl.versionsToggle[versionForLoad.task_execution_id]&&(versionForLoad.isRoot=!1,versionsForLoad.push(versionForLoad))})),!taskCtrl.selectedVersionToLoad&&taskCtrl.taskData.selected_version_task_exe_id){var selectedVersion=_.find(taskCtrl.versionsForLoad,{rootIndicator:!0,task_execution_id:taskCtrl.taskData.selected_version_task_exe_id});selectedVersion&&(taskCtrl.selectedVersionToLoad=selectedVersion.fabric_execution_id)}return console.log(versionsForLoad),deferred.resolve(versionsForLoad),deferred.promise}()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("order",[[6,"desc"],[9,"desc"]]).withOption("search",{caseInsensitive:!1}),taskCtrl.dtOptionsVersions.withLightColumnFilter({2:{type:"text"},3:{type:"text"},4:{type:"text"},5:{type:"text"},6:{type:"text"},7:{type:"text"},8:{type:"text"}}),taskCtrl.getVersionsForLoad=function(){var entitiesPassed=!0;taskCtrl.requestedEntities.entities_list&&taskCtrl.maxToCopy&&(entitiesPassed=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,"+((taskCtrl.maxToCopy||1e9)-1)+"})?$").test(taskCtrl.requestedEntities.entities_list),taskCtrl.enititesListFailedPatternTest=!1);if(taskCtrl.versionForLoadFrom&&taskCtrl.versionForLoadTo&&taskCtrl.logicalUnits&&taskCtrl.taskData.source_env_name&&(taskCtrl.taskData.selectAllEntites||taskCtrl.requestedEntities.entities_list&&entitiesPassed)){taskCtrl.loadingTableVersions=!0;var from=new Date(taskCtrl.versionForLoadFrom);from.setHours(0),from.setMinutes(0),from.setSeconds(0);var to=new Date(taskCtrl.versionForLoadTo);to.setHours(23),to.setMinutes(59),to.setSeconds(59),TDMService.postGenericAPI("tasks/versionsForLoad",{fromDate:from,toDate:to,entitiesList:taskCtrl.taskData.selectAllEntites?"":taskCtrl.requestedEntities.entities_list,lu_list:taskCtrl.logicalUnits,source_env_name:taskCtrl.taskData.source_env_name,be_id:taskCtrl.taskData.be_id}).then((function(response){if("SUCCESS"==response.errorCode){let overrideRootIndicators=data=>{var executionIdsSet=new Set;for(item of data)executionIdsSet.has(item.task_execution_id)||"Y"!=item.root_indicator||(item.root_indicator="YY",executionIdsSet.add(item.task_execution_id))};(data=>{})(response.result),overrideRootIndicators(response.result),taskCtrl.versionsForLoad=response.result,taskCtrl.versionsForLoad=_.sortBy(taskCtrl.versionsForLoad,version=>-1*new Date(version.version_datetime)),$timeout((function(){taskCtrl.dtInstanceVersions&&taskCtrl.dtInstanceVersions.reloadData&&taskCtrl.dtInstanceVersions.reloadData((function(){}))}),100),taskCtrl.loadingTableVersions=!1}else toastr.error("New Task # Failed to get Versions for Load")}))}else taskCtrl.requestedEntities.entities_list||taskCtrl.taskData.selectAllEntites?entitiesPassed||(taskCtrl.enititesListFailedPatternTest=!0):(taskCtrl.versionsForLoad=[],taskCtrl.dtInstanceVersions&&taskCtrl.dtInstanceVersions.reloadData&&taskCtrl.dtInstanceVersions.reloadData((function(){})))},("EXTRACT"==taskCtrl.taskData.task_type||"LOAD"==taskCtrl.taskData.task_type&&taskCtrl.taskData.version_ind)&&taskCtrl.taskModeChange(!0),taskCtrl.sourceEnvironmentChange(!0,!0),taskCtrl.requestParametersPrev=function(){taskCtrl.taskData.task_globals?taskCtrl.step=5:taskCtrl.step=2},BreadCrumbsService.push({task_id:taskCtrl.taskData.task_title},"TASK_BREADCRUMB",(function(){}))},controllerAs:"taskCtrl"}}angular.module("TDM-FE").directive("taskDirective",taskDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
