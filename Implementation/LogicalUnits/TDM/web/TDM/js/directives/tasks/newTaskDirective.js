function newTaskDirective(){return{restrict:"E",templateUrl:"views/tasks/newTask.html",scope:{content:"="},controller:function($scope,TDMService,BreadCrumbsService,toastr,$timeout,AuthService,$state,DTOptionsBuilder,DTColumnBuilder,$q,$compile){var newTaskCtrl=this;if(newTaskCtrl.minDate=new Date,newTaskCtrl.minDate=moment(newTaskCtrl.minDate),newTaskCtrl.minDate.milliseconds(0),newTaskCtrl.minDate.seconds(0),newTaskCtrl.minDate.minutes(0),newTaskCtrl.minDate.hours(0),newTaskCtrl.minDate.add(1,"days"),newTaskCtrl.schedulerOptions={formInputClass:"form-control1 cron-gen-input",formSelectClass:"form-control1 cron-gen-select",formRadioClass:"cron-gen-radio",formCheckboxClass:"cron-gen-checkbox",hideMinutesTab:!1,hideHourlyTab:!1,hideDailyTab:!1,hideWeeklyTab:!1,hideMonthlyTab:!1,hideYearlyTab:!1,hideAdvancedTab:!1,use24HourTime:!0,hideSeconds:!1},newTaskCtrl.tasks=$scope.content.tasks,newTaskCtrl.isFluxMode=AuthService.isFluxMode(),newTaskCtrl.retentionPeriod=AuthService.getRetentionPeriod(),TDMService.getFabricRolesforUser(AuthService.getUserId()).then(response=>{newTaskCtrl.userFabricRoles=response.result||[]}),newTaskCtrl.timeZoneOffset=AuthService.getTimeZone(),_.remove(newTaskCtrl.retentionPeriod.availableOptions,(function(period){if(period.units>newTaskCtrl.retentionPeriod.maxRetentionPeriod)return!0})),newTaskCtrl.referenceDropDown=[{text:"None",value:null},{text:"Reference Only",value:"refernceOnly"},{text:"Both - reference and entities",value:"both"}],newTaskCtrl.step=1,newTaskCtrl.taskData={globals:[],reference:null},newTaskCtrl.versionForLoadTo=new Date,newTaskCtrl.versionForLoadFrom=new Date,newTaskCtrl.versionForLoadFrom.setDate(newTaskCtrl.versionForLoadFrom.getDate()-30),newTaskCtrl.retentionPeriod&&newTaskCtrl.retentionPeriod.defaultPeriod&&newTaskCtrl.retentionPeriod.defaultPeriod.unit){var defaultRetintion=_.find(newTaskCtrl.retentionPeriod.availableOptions,{name:newTaskCtrl.retentionPeriod.defaultPeriod.unit});defaultRetintion&&(newTaskCtrl.retention_period_type=defaultRetintion,newTaskCtrl.taskData.retention_period_type=newTaskCtrl.retention_period_type.name,newTaskCtrl.taskData.retention_period_value=newTaskCtrl.retentionPeriod.defaultPeriod.value)}newTaskCtrl.retentionPeriodTypeChanged=function(){newTaskCtrl.taskData.retention_period_type=newTaskCtrl.retention_period_type.name},newTaskCtrl.taskData.task_type="LOAD",newTaskCtrl.param={},newTaskCtrl.requestedEntities={},newTaskCtrl.selectFieldType="given",newTaskCtrl.taskTitlePattern=/^((?![_,.,#,;,%,?,/,\\,[,\]]).)*$/,newTaskCtrl.entitiesPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,})?$"),newTaskCtrl.excultionPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,})?$"),newTaskCtrl.syntheticPattern="^[a-zA-Z0-9._-]+$",newTaskCtrl.updateEntitiesPattern=function(){newTaskCtrl.taskData.number_of_entities_to_copy&&(newTaskCtrl.entitiesPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){"+(newTaskCtrl.taskData.number_of_entities_to_copy-1)+"})?$"))};var userRole=AuthService.getRole();console.log(userRole.type),newTaskCtrl.userRoleType=userRole.type,newTaskCtrl.userRole={},newTaskCtrl.userRole.allowed_random_entity_selection=!0,newTaskCtrl.userRole.allowed_creation_of_synthetic_data=!0,newTaskCtrl.userRole.allowed_refresh_reference_data=!0,newTaskCtrl.userRole.allowed_request_of_fresh_data=!0,newTaskCtrl.userRole.allowed_delete_before_load=!0,newTaskCtrl.userRole.allowed_task_scheduling=!0,newTaskCtrl.userRole.allowed_replace_sequences=!0,newTaskCtrl.sourceUserRole={},newTaskCtrl.sourceUserRole.allowed_random_entity_selection=!0,newTaskCtrl.sourceUserRole.allowed_creation_of_synthetic_data=!0,newTaskCtrl.sourceUserRole.allowed_refresh_reference_data=!0,newTaskCtrl.sourceUserRole.allowed_request_of_fresh_data=!0,newTaskCtrl.sourceUserRole.allowed_delete_before_load=!0,newTaskCtrl.sourceUserRole.allowed_task_scheduling=!0,newTaskCtrl.sourceUserRole.allowed_replace_sequences=!0,newTaskCtrl.sourceEnvOwner=!0,newTaskCtrl.targetEnvOwner=!0,TDMService.getTimeZone().then((function(response){"SUCCESS"==response.errorCode?newTaskCtrl.timeZoneMessage="Task execution time will be based on "+response.result.current_setting+" time zone":newTaskCtrl.timeZoneMessage="Task execution time will be based on DB time zone"})),"admin"==userRole.type?TDMService.getEnvironments().then((function(response){"SUCCESS"==response.errorCode?(newTaskCtrl.allEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_write||"Active"!==env.environment_status)})),newTaskCtrl.allSourceEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_read||"Active"!==env.environment_status)}))):toastr.error("Faild to get Environments for user "+AuthService.getUsername())})):TDMService.getEnvironmentsForUser().then((function(response){"SUCCESS"==response.errorCode?(newTaskCtrl.allEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_write||"Active"!==env.environment_status)})),newTaskCtrl.allSourceEnvironments=_.filter(angular.copy(response.result),(function(env){return!(!env.allow_read||"Active"!==env.environment_status)})),newTaskCtrl.allSourceEnvironments=_.unique(newTaskCtrl.allSourceEnvironments,"environment_name")):toastr.error("Faild to get Target Environments for user "+AuthService.getUsername())})),newTaskCtrl.entitiesListChange=function(){newTaskCtrl.entitiesListChangeTimeout&&$timeout.cancel(newTaskCtrl.entitiesListChangeTimeout),"LOAD"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.version_ind&&!newTaskCtrl.taskData.selectAllEntites&&(newTaskCtrl.entitiesListChangeTimeout=$timeout((function(){newTaskCtrl.getVersionsForLoad()}),1e3))},newTaskCtrl.referenceChange=function(){"refernceOnly"==newTaskCtrl.taskData.reference&&(newTaskCtrl.taskData.selectAllEntites=!1)},newTaskCtrl.taskModeChange=function(task_type){if(newTaskCtrl.taskData.version_ind&&(newTaskCtrl.taskData.number_of_entities_to_copy=void 0),task_type&&(newTaskCtrl.taskData.source_environment_id=null,newTaskCtrl.taskData.environment_id=null,newTaskCtrl.taskData.source_env_name=null,newTaskCtrl.maxToCopy=null),newTaskCtrl.taskData.version_ind&&"LOAD"==newTaskCtrl.taskData.task_type)newTaskCtrl.logicalUnits=[],newTaskCtrl.logicalUnit=null,newTaskCtrl.taskData.be_id=null;else if("EXTRACT"==newTaskCtrl.taskData.task_type){if(newTaskCtrl.logicalUnits=[],newTaskCtrl.logicalUnit=null,newTaskCtrl.taskData.be_id=null,task_type&&!newTaskCtrl.taskData.version_ind)newTaskCtrl.taskData.retention_period_value=0;else if(newTaskCtrl.taskData.version_ind&&!newTaskCtrl.taskData.retention_period_value&&newTaskCtrl.retentionPeriod&&newTaskCtrl.retentionPeriod.defaultPeriod&&newTaskCtrl.retentionPeriod.defaultPeriod.unit){var defaultRetintion=_.find(newTaskCtrl.retentionPeriod.availableOptions,{name:newTaskCtrl.retentionPeriod.defaultPeriod.unit});defaultRetintion&&(newTaskCtrl.retention_period_type=defaultRetintion,newTaskCtrl.taskData.retention_period_type=newTaskCtrl.retention_period_type.name,newTaskCtrl.taskData.retention_period_value=newTaskCtrl.retentionPeriod.defaultPeriod.value)}}else newTaskCtrl.taskData.selectAllEntites=!1,newTaskCtrl.logicalUnit=null;newTaskCtrl.taskData.selectAllEntites||(newTaskCtrl.selectFieldType="given")},newTaskCtrl.getAllLogicalUnitsForEnv=function(source_environment_id,environment_id){source_environment_id&&environment_id&&(newTaskCtrl.allSingleLogicalUnits=[],TDMService.getGenericAPI("sourceenvid/"+source_environment_id+"/targetendid/"+environment_id+"/logicalUnits").then((function(response){"SUCCESS"==response.errorCode?newTaskCtrl.allSingleLogicalUnits=response.result:toastr.error("Faild to get Logical units")})))},newTaskCtrl.sourceEnvironmentChange=function(getRoles){var sourceEnv=_.find(newTaskCtrl.allSourceEnvironments,{environment_id:newTaskCtrl.taskData.source_environment_id});sourceEnv&&(newTaskCtrl.taskData.source_env_name=sourceEnv.environment_name),getRoles&&newTaskCtrl.environmentChange(newTaskCtrl.taskData.source_environment_id,!0)},newTaskCtrl.checkReferenceIfAllowed=function(){newTaskCtrl.userRole&&newTaskCtrl.userRole.allowed_refresh_reference_data||newTaskCtrl.sourceUserRole&&newTaskCtrl.sourceUserRole.allowed_refresh_reference_data||(newTaskCtrl.taskData.reference=null)},newTaskCtrl.environmentChange=function(environment_id,source){"admin"==userRole.type?(newTaskCtrl.userRole={},newTaskCtrl.userRole.allowed_random_entity_selection=!0,newTaskCtrl.userRole.allowed_creation_of_synthetic_data=!0,newTaskCtrl.userRole.allowed_refresh_reference_data=!0,newTaskCtrl.userRole.allowed_request_of_fresh_data=!0,newTaskCtrl.userRole.allowed_delete_before_load=!0,newTaskCtrl.userRole.allowed_task_scheduling=!0,newTaskCtrl.userRole.allowed_replace_sequences=!0):TDMService.getEnvironmentOwners(environment_id||newTaskCtrl.taskData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){var ownerFound=_.find(response.result,{user_id:AuthService.getUserId()});if(!ownerFound)for(let i=0;i<newTaskCtrl.userFabricRoles.length&&!(ownerFound=_.find(response.result,{user_type:"GROUP",user_id:newTaskCtrl.userFabricRoles[i]}));i++);ownerFound?(newTaskCtrl.userRole={},newTaskCtrl.userRole.allowed_random_entity_selection=!0,newTaskCtrl.userRole.allowed_creation_of_synthetic_data=!0,newTaskCtrl.userRole.allowed_refresh_reference_data=!0,newTaskCtrl.userRole.allowed_request_of_fresh_data=!0,newTaskCtrl.userRole.allowed_delete_before_load=!0,newTaskCtrl.userRole.allowed_task_scheduling=!0,newTaskCtrl.userRole.allowed_replace_sequences=!0,environment_id?newTaskCtrl.sourceEnvOwner=!0:newTaskCtrl.targetEnvOwner=!0):(environment_id?newTaskCtrl.sourceEnvOwner=!1:newTaskCtrl.targetEnvOwner=!1,TDMService.getRoleForUserInEnv(environment_id||newTaskCtrl.taskData.environment_id).then((function(response){if("SUCCESS"==response.errorCode){environment_id?newTaskCtrl.sourceUserRole=response.result.userRole:newTaskCtrl.userRole=response.result.userRole,"LOAD"==newTaskCtrl.taskData.task_type&&newTaskCtrl.userRole.allowed_entity_versioning&&newTaskCtrl.sourceUserRole.allowed_entity_versioning||"EXTRACT"==newTaskCtrl.taskData.task_type&&newTaskCtrl.sourceUserRole.allowed_entity_versioning?newTaskCtrl.allowed_entity_versioning=!0:(newTaskCtrl.allowed_entity_versioning=!1,newTaskCtrl.taskData.version_ind=!1),newTaskCtrl.checkReferenceIfAllowed();var minRead=response.result.minRead,minWrite=response.result.minWrite;(minRead>-1||minWrite>-1)&&(minWrite=parseInt(minWrite||"0"),minRead=parseInt(minRead||"0"),environment_id?(newTaskCtrl.sourceMaxToCopy=minRead,newTaskCtrl.maxToCopy>minRead?newTaskCtrl.maxToCopy=minRead:newTaskCtrl.maxToCopy||(newTaskCtrl.maxToCopy=minRead)):(newTaskCtrl.targetMaxToCopy=minWrite,newTaskCtrl.maxToCopy>minWrite?newTaskCtrl.maxToCopy=minWrite:newTaskCtrl.maxToCopy||(newTaskCtrl.maxToCopy=minWrite)))}else toastr.error("Task # "+newTaskCtrl.taskData.task_id,"Faild to get Role for user ")})))}else toastr.error("Environment # "+newTaskCtrl.taskData.environment_id,"failed to get owners : "+response.message)})),source&&"EXTRACT"!==newTaskCtrl.taskData.task_type||!environment_id&&!newTaskCtrl.taskData.environment_id||TDMService.getBusinessEntitiesForEnvProducts(environment_id||newTaskCtrl.taskData.environment_id).then((function(response){"SUCCESS"==response.errorCode?newTaskCtrl.businessEntities=response.result:toastr.error("Task # "+newTaskCtrl.taskData.task_id,"Faild to get Business Entities")})),newTaskCtrl.taskData.be_id=void 0,newTaskCtrl.logicalUnits=[],newTaskCtrl.allLogicalUnits=[],newTaskCtrl.products=[]},newTaskCtrl.updateParams=cb=>{TDMService.getGenericAPI("businessentity/"+newTaskCtrl.taskData.be_id+"/sourceEnv/"+newTaskCtrl.taskData.source_env_name+"/parameters").then((function(response){if("SUCCESS"==response.errorCode){newTaskCtrl.parameters=response.result;let parametersKeys=Object.keys(newTaskCtrl.parameters);var chosenLUs=_.map(newTaskCtrl.logicalUnits,(function(lu){return lu.lu_name.toLowerCase()}));for(let i=0;i<parametersKeys.length;i++)chosenLUs.indexOf(parametersKeys[i].split(".")[0].toLowerCase())<0&&delete newTaskCtrl.parameters[parametersKeys[i]];newTaskCtrl.parameters=_.map(newTaskCtrl.parameters,(function(value,key){return"number"!==value.PARAM_TYPE&&value.PARAM_TYPE,{param_name:key,name:value.PARAM_NAME,param_type:value.PARAM_TYPE,valid_values:value.VALID_VALUES,min_value:"number"==value.PARAM_TYPE?parseFloat(value.MIN_VALUE):0,max_value:"number"==value.PARAM_TYPE?parseFloat(value.MAX_VALUE):0}})),console.log(1111),cb&&cb.apply()}else toastr.error("Business entity # "+newTaskCtrl.taskData.be_id,"Failed to get business entity parameters")}))},newTaskCtrl.businessEntityChange=function(){newTaskCtrl.taskData.selection_param_value=null,newTaskCtrl.taskData.parameters=null,newTaskCtrl.filter&&newTaskCtrl.filter.group&&(newTaskCtrl.filter.group.rules=[]);var be=_.find(newTaskCtrl.businessEntities,{be_id:newTaskCtrl.taskData.be_id});be&&(newTaskCtrl.be_name=be.be_name);var environmentId="EXTRACT"===newTaskCtrl.taskData.task_type?newTaskCtrl.taskData.source_environment_id:newTaskCtrl.taskData.environment_id;environmentId&&newTaskCtrl.taskData.be_id&&TDMService.getLogicalUnitsForBusinessEntityAndEnv(newTaskCtrl.taskData.be_id,environmentId).then((function(response){if("SUCCESS"==response.errorCode){newTaskCtrl.logicalUnits=[],newTaskCtrl.allLogicalUnits=response.result;for(var i=0;i<newTaskCtrl.allLogicalUnits.length;i++)newTaskCtrl.logicalUnits.push(newTaskCtrl.allLogicalUnits[i])}else toastr.error("Business entity # "+newTaskCtrl.taskData.be_id,"Failed to get products")})),newTaskCtrl.taskData.be_id&&TDMService.getBEPostExecutionProcess(newTaskCtrl.taskData.be_id).then((function(response){"SUCCESS"==response.errorCode?(newTaskCtrl.postExecutionProcesses=[],newTaskCtrl.allPostExecutionProcess=response.result,newTaskCtrl.allPostExecutionProcessIds=_.map(response.result,"process_id"),newTaskCtrl.postExecutionProcesses=newTaskCtrl.allPostExecutionProcessIds):toastr.error("Business entity # "+newTaskCtrl.taskData.be_id,"Failed to get Post Execution Processes")}))},newTaskCtrl.selectSchedule="immediate",newTaskCtrl.addTask=function(){if(1!=newTaskCtrl.createTaskInProgress){if(newTaskCtrl.createTaskInProgress=!0,!newTaskCtrl.taskData.selectAllEntites&&"refernceOnly"!==newTaskCtrl.taskData.reference)if("given"==newTaskCtrl.selectFieldType){if(newTaskCtrl.requestedEntities&&newTaskCtrl.taskData.entity_exclusion_list==newTaskCtrl.requestedEntities.entities_list)return newTaskCtrl.errorList=!0,newTaskCtrl.step=2,void(newTaskCtrl.createTaskInProgress=!1);newTaskCtrl.taskData.selection_method="L",newTaskCtrl.taskData.selection_param_value=newTaskCtrl.requestedEntities.entities_list}else if("random"==newTaskCtrl.selectFieldType)newTaskCtrl.taskData.selection_method="R",newTaskCtrl.taskData.selection_param_value=null;else if("synthetic"==newTaskCtrl.selectFieldType)newTaskCtrl.taskData.selection_method="S",newTaskCtrl.taskData.selection_param_value=newTaskCtrl.requestedEntities.synthetic;else{if(!newTaskCtrl.requestedEntities.query_parameters||"()"==newTaskCtrl.requestedEntities.query_parameters)return newTaskCtrl.parametersError=!0,newTaskCtrl.step=2,void(newTaskCtrl.createTaskInProgress=!1);1==newTaskCtrl.parametersRandom?newTaskCtrl.taskData.selection_method="PR":newTaskCtrl.taskData.selection_method="P",newTaskCtrl.taskData.selection_param_value=newTaskCtrl.requestedEntities.query_parameters,newTaskCtrl.taskData.parameters=newTaskCtrl.requestedEntities.parameters}if("immediate"==newTaskCtrl.selectSchedule?(newTaskCtrl.taskData.scheduler=newTaskCtrl.selectSchedule,newTaskCtrl.taskData.scheduling_end_date=null):(newTaskCtrl.taskData.scheduler=newTaskCtrl.scheduleData,"endBy"!==newTaskCtrl.scheduleEndBy?newTaskCtrl.taskData.scheduling_end_date=null:newTaskCtrl.taskData.scheduling_end_date.hours(12)),_.find(newTaskCtrl.tasks,{task_title:newTaskCtrl.taskData.task_title,task_status:"Active"}))return newTaskCtrl.createTaskInProgress=!1,toastr.error("Task # "+newTaskCtrl.taskData.task_title+" Already Exists");if("LOAD"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.version_ind&&(newTaskCtrl.taskData.operationMode="delete_and_load_entity"),"delete_and_load_entity"==newTaskCtrl.taskData.operationMode?(newTaskCtrl.taskData.replace_sequences=!1,newTaskCtrl.taskData.load_entity=!0,newTaskCtrl.taskData.delete_before_load=!0):"insert_entity_without_delete"==newTaskCtrl.taskData.operationMode?(newTaskCtrl.taskData.load_entity=!0,newTaskCtrl.taskData.delete_before_load=!1):"delete_without_load_entity"==newTaskCtrl.taskData.operationMode?(newTaskCtrl.taskData.replace_sequences=!1,newTaskCtrl.taskData.load_entity=!1,newTaskCtrl.taskData.delete_before_load=!0):(newTaskCtrl.taskData.load_entity=!0,newTaskCtrl.taskData.delete_before_load=!1),newTaskCtrl.taskData.request_of_fresh_data||(newTaskCtrl.taskData.sync_mode=null),"LOAD"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.version_ind&&"refernceOnly"!==newTaskCtrl.taskData.reference){if(!newTaskCtrl.selectedVersionToLoad&&"refernceOnly"!==newTaskCtrl.taskData.reference)return newTaskCtrl.step=2,void(newTaskCtrl.createTaskInProgress=!1);if(selectedVersionToLoad=_.find(newTaskCtrl.versionsForLoad,{fabric_execution_id:newTaskCtrl.selectedVersionToLoad})){newTaskCtrl.taskData.selected_version_task_name=selectedVersionToLoad.version_name;var localTimeZone=(version_datetime=new Date(selectedVersionToLoad.version_datetime)).getTimezoneOffset();version_datetime=version_datetime.getTime(),newTaskCtrl.taskData.selected_version_datetime=moment(version_datetime).format("YYYYMMDDHHmmss"),newTaskCtrl.taskData.selected_version_task_exe_id=selectedVersionToLoad.task_execution_id}}if("LOAD"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.version_ind&&("refernceOnly"==newTaskCtrl.taskData.reference||"both"==newTaskCtrl.taskData.reference)){if(!newTaskCtrl.taskData.refLoadVersions)return newTaskCtrl.step=6,void(newTaskCtrl.createTaskInProgress=!1);var selectedVersionToLoad;if(selectedVersionToLoad=_.find(newTaskCtrl.taskData.refLoadVersions,{task_execution_id:parseInt(newTaskCtrl.taskData.selectedRefVersionToLoad)})){newTaskCtrl.taskData.selected_ref_version_task_name=selectedVersionToLoad.version_name;var version_datetime;localTimeZone=(version_datetime=new Date(selectedVersionToLoad.version_datetime)).getTimezoneOffset();version_datetime=version_datetime.getTime()+6e4*localTimeZone,newTaskCtrl.taskData.selected_ref_version_datetime=moment(version_datetime-6e4*newTaskCtrl.timeZoneOffset).format("YYYYMMDDHHmmss"),newTaskCtrl.taskData.selected_ref_version_task_exe_id=selectedVersionToLoad.task_execution_id}}"EXTRACT"==newTaskCtrl.taskData.task_type&&(newTaskCtrl.taskData.load_entity=!1,newTaskCtrl.taskData.environment_id=newTaskCtrl.taskData.source_environment_id),"EXTRACT"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.version_ind||newTaskCtrl.taskData.retention_period_value||(delete newTaskCtrl.taskData.retention_period_type,delete newTaskCtrl.taskData.retention_period_value),newTaskCtrl.taskData.selectAllEntites||"LOAD"==newTaskCtrl.taskData.task_type&&!newTaskCtrl.taskData.version_ind||"refernceOnly"===newTaskCtrl.taskData.reference||(newTaskCtrl.taskData.number_of_entities_to_copy=newTaskCtrl.requestedEntities.entities_list.split(",").length),newTaskCtrl.taskData.globals&&0==newTaskCtrl.taskData.globals.length&&(newTaskCtrl.taskData.task_globals=!1),newTaskCtrl.taskData.reference||(newTaskCtrl.taskData.refList=[]),newTaskCtrl.taskData.refList&&newTaskCtrl.taskData.refList.length>0&&(newTaskCtrl.taskData.refresh_reference_data=!1),"EXTRACT"==newTaskCtrl.taskData.task_type&&(!newTaskCtrl.taskData.version_ind&&newTaskCtrl.taskData.request_of_fresh_data?newTaskCtrl.taskData.sync_mode="FORCE":delete newTaskCtrl.taskData.sync_mode),TDMService.createTask(newTaskCtrl.taskData).then((function(response){if("SUCCESS"==response.errorCode){var createTaskResult=response.result;TDMService.postTaskLogicalUnits(response.result.id,newTaskCtrl.taskData.task_title,{logicalUnits:newTaskCtrl.logicalUnits}).then((function(response){"SUCCESS"==response.errorCode?toastr.success("Task # "+createTaskResult.id," Is Created Successfully"):toastr.error("Task # "+createTaskResult.id," Failed to Update : "+response.message),$timeout((function(){$state.go("tasks",{},{reload:!0})}),300)})),newTaskCtrl.postExecutionProcesses.length>0&&TDMService.postTaskPostExecutionProcess(response.result.id,newTaskCtrl.taskData.task_title,{postexecutionprocesses:_.filter(newTaskCtrl.allPostExecutionProcess,v=>newTaskCtrl.postExecutionProcesses.indexOf(v.process_id)>=0)}).then((function(response){"SUCCESS"!==response.errorCode&&toastr.error("Task # "+createTaskResult.id," Failed to Update Post Execution Processes: "+response.message)}))}else toastr.error("Task # "+newTaskCtrl.taskData.task_id,"Unable to Create : "+response.message),newTaskCtrl.createTaskInProgress=!1}))}};function buildSubQuery(rule){var field='"'+rule.field+'"';let condition=rule.condition;var data="'"+rule.data+"'";return"number"==rule.type&&(field+="::numeric[] ",data=rule.data),"Is null"===rule.condition||"Is not null"===rule.condition?"( "+field+" "+condition+" )":"( "+data+" "+condition+" ANY("+field+") )"}function computed(group){if(!group)return"";for(var str="(",i=0;i<group.rules.length;i++)if(group.rules[i].group)i==group.rules.length-1?str+=computed(group.rules[i].group):str+=computed(group.rules[i].group)+" "+group.rules[i].group.operator+" ";else{var data;if(void 0===group.rules[i].data&&"Is null"!=group.rules[i].condition&&"Is not null"!=group.rules[i].condition)return;if("real"==group.rules[i].type)data=group.rules[i].data.toLocaleString().indexOf(".")<=0?group.rules[i].data.toFixed(1):group.rules[i].data;else if("integer"==group.rules[i].type)data=Math.floor(group.rules[i].data);else if("combo"==group.rules[i].type){if(group.rules[i].validValues.indexOf(group.rules[i].data)<0&&"Is null"!=group.rules[i].condition&&"Is not null"!=group.rules[i].condition)return;data=group.rules[i].data}else data=group.rules[i].data;null==data&&(data=""),i==group.rules.length-1?str+=buildSubQuery(group.rules[i]):(str+=buildSubQuery(group.rules[i]),str+=" "+group.rules[i].operator+" ")}return str+")"}newTaskCtrl.filter=JSON.parse('{"group": {"operator": "AND","rules": []}}'),newTaskCtrl.parametersCount=0,newTaskCtrl.perviousQueryParams=null,$scope.getEntitesCount=function(force){if("()"!=newTaskCtrl.requestedEntities.query_parameters)if(newTaskCtrl.requestedEntities.query_parameters){if(force||newTaskCtrl.requestedEntities.query_parameters!==newTaskCtrl.perviousQueryParams){newTaskCtrl.parametersError=!1;newTaskCtrl.requestedEntities.query_parameters,newTaskCtrl.taskData.source_env_name,newTaskCtrl.taskData.be_id;newTaskCtrl.parametersCount="inprogress",TDMService.postGenericAPI("businessentity/"+newTaskCtrl.taskData.be_id+"/sourceEnv/"+newTaskCtrl.taskData.source_env_name+"/analysiscount",{where:newTaskCtrl.requestedEntities.query_parameters}).then((function(response){"SUCCESS"==response.errorCode?(newTaskCtrl.perviousQueryParams=newTaskCtrl.requestedEntities.query_parameters,newTaskCtrl.parametersCount=response.result):newTaskCtrl.parametersCount=0}))}}else newTaskCtrl.parametersCount=0;else newTaskCtrl.parametersCount=0},$scope.$watch("newTaskCtrl.filter",(function(newValue){newTaskCtrl.analysisCountTimeout&&$timeout.cancel(newTaskCtrl.analysisCountTimeout),newTaskCtrl.analysisCountTimeout=$timeout((function(){if(newTaskCtrl.taskData.be_id){var checkGroup=function(group){if(""==group.operator)return!1;for(var i=0;i<group.rules.length;i++)if(0==((rule=group.rules[i]).group?checkGroup(rule.group):""!==rule.condition&&null!==rule.data&&""!==rule.field))return!1;var rule;return!0};if(1==checkGroup(newValue.group)){newTaskCtrl.requestedEntities.parameters=JSON.stringify(newValue);var query={query:computed(newValue.group)};newTaskCtrl.requestedEntities.query_parameters=query.query}$scope.getEntitesCount()}}),500)}),!0),newTaskCtrl.checkMigrateStatus=function(){if(!newTaskCtrl.requestedEntities.entities_list||!newTaskCtrl.selectedVersionToLoad)return newTaskCtrl.requestedEntitiesForm=$scope.requestedEntitiesForm,void($scope.requestedEntitiesForm.submitted=!0);var selectedVersionToLoad=_.find(newTaskCtrl.versionsForLoad,{fabric_execution_id:newTaskCtrl.selectedVersionToLoad}),taskExecutionId="",luNames="";selectedVersionToLoad&&(taskExecutionId=selectedVersionToLoad.task_execution_id,luNames=selectedVersionToLoad.lu_name);var version_datetime=new Date(selectedVersionToLoad.version_datetime),localTimeZone=version_datetime.getTimezoneOffset();version_datetime=version_datetime.getTime()+6e4*localTimeZone,TDMService.postGenericAPI("checkMigrateStatusForEntitiesList",{entitlesList:newTaskCtrl.requestedEntities.entities_list,taskExecutionId:taskExecutionId,luList:luNames}).then((function(response){if("SUCCESS"==response.errorCode){var failedEntities=[];for(var key in response.result)"false"==response.result[key]&&failedEntities.push(key);failedEntities.length>0?toastr.error("Entities "+failedEntities+" were not migrated successfully into the TDM storage by the selected version. Please remove them from the Entities List or select another version "):newTaskCtrl.requestedEntitiesNext($scope.requestedEntitiesForm,!0)}else toastr.error("Failed to check Migrate Status For Entites List")}))},newTaskCtrl.getStepsArray=function(){var stepsArray=[];return stepsArray.push(1),null!=newTaskCtrl.taskData.reference&&stepsArray.push(6),"EXTRACT"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.selectAllEntites||"refernceOnly"===newTaskCtrl.taskData.reference||stepsArray.push(2),newTaskCtrl.taskData.task_globals&&stepsArray.push(5),("LOAD"==newTaskCtrl.taskData.task_type&&!newTaskCtrl.taskData.version_ind||"EXTRACT"==newTaskCtrl.taskData.task_type&&!newTaskCtrl.taskData.version_ind&&(newTaskCtrl.sourceUserRole&&newTaskCtrl.sourceUserRole.allowed_request_of_fresh_data||newTaskCtrl.userRole&&newTaskCtrl.userRole.allowed_request_of_fresh_data))&&"refernceOnly"!==newTaskCtrl.taskData.reference&&stepsArray.push(3),stepsArray.push(4),stepsArray},newTaskCtrl.submitForm=function(step,nextStep){const steps=newTaskCtrl.getStepsArray();if(step!==nextStep)if(steps.indexOf(step)>steps.indexOf(nextStep))newTaskCtrl.openStep(nextStep);else switch(step){case 1:$scope.generalForm.$setSubmitted(),newTaskCtrl.generalNext($scope.generalForm,nextStep);break;case 2:$scope.requestedEntitiesForm.$setSubmitted(),newTaskCtrl.requestedEntitiesNext($scope.requestedEntitiesForm,void 0,nextStep);break;case 3:$scope.requestParametersForm.$setSubmitted(),newTaskCtrl.requestParametersNext($scope.requestParametersForm);break;case 4:$scope.executionTimingForm.$setSubmitted(),newTaskCtrl.executionTimingFinish($scope.executionTimingForm);break;case 5:$scope.AddGlobalForm.$setSubmitted(),newTaskCtrl.globalsNext(nextStep);break;case 6:$scope.ReferenceForm.$setSubmitted(),newTaskCtrl.referenceNext(nextStep)}},newTaskCtrl.openStep=function(step,type){if("admin"==newTaskCtrl.userRoleType||newTaskCtrl.sourceEnvOwner&&newTaskCtrl.targetEnvOwner||(newTaskCtrl.taskData.selectAllEntites=!1),2==newTaskCtrl.step&&"LOAD"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.version_ind&&!newTaskCtrl.taskData.selectAllEntites)return"back"==type&&null!=newTaskCtrl.taskData.reference?newTaskCtrl.step=6:1==step?newTaskCtrl.step=1:void newTaskCtrl.checkMigrateStatus();var arraySteps=newTaskCtrl.getStepsArray(),nextStep=step,currentIndex=arraySteps.indexOf(newTaskCtrl.step),nextIndex=arraySteps.indexOf(step);if(nextIndex<currentIndex&&nextIndex>=0)return nextStep=arraySteps[nextIndex],void(newTaskCtrl.step=nextStep);if("next"==type){if(currentIndex==arraySteps.length-1)return void console.log("there is no next");nextStep=arraySteps[currentIndex+1]}else if("back"==type)return 0==currentIndex?void console.log("there is no back"):(nextStep=arraySteps[currentIndex-1],void(newTaskCtrl.step=nextStep));return 1==newTaskCtrl.step?$scope.generalForm.$valid?void newTaskCtrl.generalNext($scope.generalForm,nextStep):(newTaskCtrl.generalForm=$scope.generalForm,void($scope.generalForm.submitted=!0)):2==newTaskCtrl.step?$scope.requestedEntitiesForm.$valid?(newTaskCtrl.requestedEntitiesNext($scope.requestedEntitiesForm,!1,nextStep),void($scope.requestedEntitiesForm.submitted=!0)):(newTaskCtrl.requestedEntitiesForm=$scope.requestedEntitiesForm,void($scope.requestedEntitiesForm.submitted=!0)):3!=newTaskCtrl.step||$scope.requestParametersForm.$valid?4!=newTaskCtrl.step||$scope.executionTimingForm.$valid?void(6!=newTaskCtrl.step?5!=newTaskCtrl.step?(newTaskCtrl.step=nextStep,1==newTaskCtrl.step?$scope.generalForm.submitted=!0:2==newTaskCtrl.step?$scope.requestedEntitiesForm.submitted=!0:3==newTaskCtrl.step?$scope.requestParametersForm.submitted=!0:4==newTaskCtrl.step&&($scope.executionTimingForm.submitted=!0)):newTaskCtrl.globalsNext(nextStep):newTaskCtrl.referenceNext(nextStep)):(newTaskCtrl.executionTimingForm=$scope.executionTimingForm,void($scope.executionTimingForm.submitted=!0)):(newTaskCtrl.requestParametersForm=$scope.requestParametersForm,void($scope.requestParametersForm.submitted=!0))},newTaskCtrl.generalNext=function(form,nextStep){if(newTaskCtrl.isFluxMode){$scope.generalForm.taskLogicalUnit.$setValidity("gap",!0),$scope.generalForm.taskLogicalUnit.$setValidity("missingParent",!0);let isSelectedLU=lu_name=>_.find(newTaskCtrl.logicalUnits,{lu_name:lu_name}),checkGap=lu=>{if(lu.lu_parent_name&&!isSelectedLU(lu.lu_parent_name)){const luParent=_.find(newTaskCtrl.allLogicalUnits,{lu_name:lu.lu_parent_name});luParent&&luParent.lu_parent_name&&isSelectedLU(luParent.lu_parent_name)&&($scope.generalForm.taskLogicalUnit.$setValidity("gap",!1),newTaskCtrl.missingUnitInGap=luParent.lu_name)}},checkIfRootIsMissing=()=>{for(lu of($scope.generalForm.taskLogicalUnit.$setValidity("missingParent",!0),newTaskCtrl.missingRootLU=[],newTaskCtrl.logicalUnits))if(lu.lu_parent_name){const luParent=_.find(newTaskCtrl.allLogicalUnits,{lu_name:lu.lu_parent_name});luParent&&(luParent.lu_parent_name||isSelectedLU(luParent.lu_name)||($scope.generalForm.taskLogicalUnit.$setValidity("missingParent",!1),newTaskCtrl.missingRootLU.push(luParent.lu_name)))}};newTaskCtrl.logicalUnits&&newTaskCtrl.logicalUnits.length>0&&newTaskCtrl.logicalUnits.forEach(lu=>{"refernceOnly"!==newTaskCtrl.taskData.reference&&(checkGap(lu),checkIfRootIsMissing(lu))})}if(form.$valid){let cb=()=>{newTaskCtrl.step=nextStep||2,"admin"==newTaskCtrl.userRoleType||newTaskCtrl.sourceEnvOwner&&newTaskCtrl.targetEnvOwner||(newTaskCtrl.taskData.selectAllEntites=!1);var sourceEnv=_.find(newTaskCtrl.allSourceEnvironments,{environment_id:newTaskCtrl.taskData.source_environment_id});sourceEnv&&(newTaskCtrl.taskData.source_env_name=sourceEnv.environment_name),newTaskCtrl.taskData.selectAllEntites&&(newTaskCtrl.requestedEntities.entities_list=void 0,"EXTRACT"==newTaskCtrl.taskData.task_type&&(newTaskCtrl.taskData.task_globals?newTaskCtrl.step=nextStep||5:!newTaskCtrl.taskData.version_ind&&(newTaskCtrl.taskData.version_ind||newTaskCtrl.userRole&&newTaskCtrl.userRole.allowed_request_of_fresh_data||newTaskCtrl.sourceUserRole&&newTaskCtrl.sourceUserRole.allowed_request_of_fresh_data)?newTaskCtrl.step=nextStep||3:newTaskCtrl.step=nextStep||4)),null!=newTaskCtrl.taskData.reference&&(newTaskCtrl.step=nextStep||6)};"LOAD"===newTaskCtrl.taskData.task_type?newTaskCtrl.updateParams(cb):cb.apply()}else form.submitted=!0;newTaskCtrl.generalForm=form},newTaskCtrl.referenceNext=function(nextStep){if(0!=_.filter(newTaskCtrl.taskData.refList,{selected:!0}).length){if(newTaskCtrl.referenceTabError="","LOAD"!=newTaskCtrl.taskData.task_type||!newTaskCtrl.taskData.version_ind||_.find(newTaskCtrl.taskData.refLoadVersions,{task_execution_id:parseInt(newTaskCtrl.taskData.selectedRefVersionToLoad)}))return newTaskCtrl.taskData.task_globals?newTaskCtrl.step=nextStep||5:"refernceOnly"!==newTaskCtrl.taskData.reference?"EXTRACT"==newTaskCtrl.taskData.task_type&&newTaskCtrl.taskData.selectAllEntites?newTaskCtrl.step=nextStep||3:newTaskCtrl.step=nextStep||2:newTaskCtrl.step=nextStep||4}else newTaskCtrl.referenceTabError="Please Select Reference Table"},newTaskCtrl.requestedEntitiesNext=function(form,migrated,nextStep){if("LOAD"!=newTaskCtrl.taskData.task_type||!newTaskCtrl.taskData.version_ind||newTaskCtrl.taskData.selectAllEntites||migrated){if(newTaskCtrl.isFluxMode&&"LOAD"==newTaskCtrl.taskData.task_type&&!newTaskCtrl.taskData.version_ind&&("synthetic"==newTaskCtrl.selectFieldType||"parameters"==newTaskCtrl.selectFieldType)){for(lu of($scope.LUsMissingParent=[],newTaskCtrl.logicalUnits))lu.lu_parent_name&&!_.find(newTaskCtrl.logicalUnits,{lu_name:lu.lu_parent_name})&&$scope.LUsMissingParent.push(lu.lu_name);if($scope.requestedEntitiesForm.$setValidity("missingParent",!0),$scope.LUsMissingParent.length>0)return void $scope.requestedEntitiesForm.$setValidity("missingParent",!1)}if("given"==newTaskCtrl.selectFieldType&&newTaskCtrl.requestedEntities&&"string"==typeof newTaskCtrl.requestedEntities.entities_list&&newTaskCtrl.taskData.entity_exclusion_list==newTaskCtrl.requestedEntities.entities_list)return newTaskCtrl.errorList=!0,void(form.$valid||(form.submitted=!0,newTaskCtrl.requestedEntitiesForm=form));if(newTaskCtrl.enititesListNotPassedExclusionList=!1,newTaskCtrl.enititesListFailedPatternTest=!1,"LOAD"==newTaskCtrl.taskData.task_type&&!newTaskCtrl.taskData.version_ind&&newTaskCtrl.requestedEntities.entities_list&&"string"==typeof newTaskCtrl.taskData.entity_exclusion_list&&newTaskCtrl.requestedEntities.entities_list.length>0&&(newTaskCtrl.taskData.entity_exclusion_list=newTaskCtrl.taskData.entity_exclusion_list.replace(/\s/g,""),newTaskCtrl.taskData.entity_exclusion_list=newTaskCtrl.taskData.entity_exclusion_list.replace(/\r?\n|\r/g,""),newTaskCtrl.entitiesPattern.test(newTaskCtrl.taskData.entity_exclusion_list)||(newTaskCtrl.enititesExclusionListPatternTest=!0)),"given"==newTaskCtrl.selectFieldType&&"string"==typeof newTaskCtrl.requestedEntities.entities_list&&newTaskCtrl.requestedEntities.entities_list.length>0){newTaskCtrl.requestedEntities.entities_list=newTaskCtrl.requestedEntities.entities_list.replace(/\s/g,""),newTaskCtrl.requestedEntities.entities_list=newTaskCtrl.requestedEntities.entities_list.replace(/\r?\n|\r/g,"");var entitiesPattern=newTaskCtrl.entitiesPattern;if(("LOAD"!=newTaskCtrl.taskData.task_type||newTaskCtrl.taskData.version_ind)&&(entitiesPattern=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,"+((newTaskCtrl.maxToCopy||1e9)-1)+"})?$")),entitiesPattern.test(newTaskCtrl.requestedEntities.entities_list))if("LOAD"!=newTaskCtrl.taskData.task_type||newTaskCtrl.taskData.version_ind)newTaskCtrl.errorList=!1,form.$valid||1==newTaskCtrl.disableChange?newTaskCtrl.taskData.task_globals?newTaskCtrl.step=nextStep||5:("EXTRACT"!=newTaskCtrl.taskData.task_type&&"LOAD"!=newTaskCtrl.taskData.task_type||!newTaskCtrl.taskData.version_ind)&&("EXTRACT"!=newTaskCtrl.taskData.task_type||newTaskCtrl.taskData.version_ind||newTaskCtrl.userRole&&newTaskCtrl.userRole.allowed_request_of_fresh_data||newTaskCtrl.sourceUserRole&&newTaskCtrl.sourceUserRole.allowed_request_of_fresh_data)?newTaskCtrl.step=nextStep||3:newTaskCtrl.step=nextStep||4:form.submitted=!0,newTaskCtrl.requestedEntitiesForm=form;else(dataForValidation={}).exclusion_list=newTaskCtrl.requestedEntities.entities_list,dataForValidation.be_id=newTaskCtrl.taskData.be_id,TDMService.postEnvExclusionListValidateList(newTaskCtrl.taskData.environment_id,dataForValidation).then((function(response){if("SUCCESS"==response.errorCode){if(response.result.length>0){newTaskCtrl.enititesListNotPassedExclusionList=!0,newTaskCtrl.existingEntitiesInExclusionListMembers=[];for(var i=0;i<response.result.length;i++)newTaskCtrl.existingEntitiesInExclusionListMembers.push(response.result[i].unnest);return}newTaskCtrl.errorList=!1,form.$valid||1==newTaskCtrl.disableChange?newTaskCtrl.taskData.task_globals?newTaskCtrl.step=nextStep||5:newTaskCtrl.step=nextStep||3:form.submitted=!0,newTaskCtrl.requestedEntitiesForm=form}else toastr.error("Unable to execute validation against Exclusion List"+response.message)}));else newTaskCtrl.enititesListFailedPatternTest=!0}else if("synthetic"==newTaskCtrl.selectFieldType&&newTaskCtrl.requestedEntities.synthetic){var dataForValidation;(dataForValidation={}).exclusion_list=newTaskCtrl.requestedEntities.synthetic,dataForValidation.be_id=newTaskCtrl.taskData.be_id,TDMService.postEnvExclusionListValidateList(newTaskCtrl.taskData.environment_id,dataForValidation).then((function(response){if("SUCCESS"==response.errorCode){if(response.result.length>0){newTaskCtrl.enititesListNotPassedExclusionList=!0,newTaskCtrl.existingEntitiesInExclusionListMembers=[];for(var i=0;i<response.result.length;i++)newTaskCtrl.existingEntitiesInExclusionListMembers.push(response.result[i].unnest);return}newTaskCtrl.errorList=!1,form.$valid||1==newTaskCtrl.disableChange?newTaskCtrl.taskData.task_globals?newTaskCtrl.step=nextStep||5:newTaskCtrl.step=nextStep||3:form.submitted=!0,newTaskCtrl.requestedEntitiesForm=form}else toastr.error("Unable to execute validation against Exclusion List"+response.message)}))}else newTaskCtrl.errorList=!1,form.$valid||1==newTaskCtrl.disableChange?newTaskCtrl.taskData.task_globals?newTaskCtrl.step=nextStep||5:("EXTRACT"!=newTaskCtrl.taskData.task_type&&"LOAD"!=newTaskCtrl.taskData.task_type||!newTaskCtrl.taskData.version_ind)&&("EXTRACT"!=newTaskCtrl.taskData.task_type||newTaskCtrl.taskData.version_ind||newTaskCtrl.userRole&&newTaskCtrl.userRole.allowed_request_of_fresh_data||newTaskCtrl.sourceUserRole&&newTaskCtrl.sourceUserRole.allowed_request_of_fresh_data)?newTaskCtrl.step=nextStep||3:newTaskCtrl.step=nextStep||4:form.submitted=!0,newTaskCtrl.requestedEntitiesForm=form}else newTaskCtrl.checkMigrateStatus()},newTaskCtrl.globalsNext=function(nextStep){newTaskCtrl.taskData.version_ind||"refernceOnly"===newTaskCtrl.taskData.reference?newTaskCtrl.step=nextStep||4:newTaskCtrl.step=nextStep||3},newTaskCtrl.requestParametersNext=function(form){form.$valid?newTaskCtrl.step=4:form.submitted=!0,newTaskCtrl.requestParametersForm=form},newTaskCtrl.executionTimingFinish=function(form){if(form.$valid){if(!$scope.generalForm.$valid)return void(newTaskCtrl.step=1);if(newTaskCtrl.taskData.reference&&0==_.filter(newTaskCtrl.taskData.refList,{selected:!0}).length)return void(newTaskCtrl.step=6);if("refernceOnly"!==newTaskCtrl.taskData.reference&&!$scope.requestedEntitiesForm.$valid)return void(newTaskCtrl.step=2);if(!$scope.requestParametersForm.$valid)return void(newTaskCtrl.step=3);newTaskCtrl.addTask()}else form.submitted=!0;newTaskCtrl.executionTimingForm=form},newTaskCtrl.cronTabConfig={allowMultiple:!0},newTaskCtrl.toggleVersion=function(task_execution_id){newTaskCtrl.versionsToggle[task_execution_id]=!newTaskCtrl.versionsToggle[task_execution_id],newTaskCtrl.dtInstanceVersions&&newTaskCtrl.dtInstanceVersions.reloadData&&newTaskCtrl.dtInstanceVersions.reloadData((function(){}))},newTaskCtrl.versionsToggle={},newTaskCtrl.versionsForLoad=[],newTaskCtrl.dtInstanceVersions={},newTaskCtrl.dtColumnsVersions=[],newTaskCtrl.dtColumnDefsVersions=[],newTaskCtrl.headersVersions=[{column:"collapse",name:"",clickAble:!1},{column:"actions",name:"",clickAble:!1},{column:"version_name",name:"Version Name",clickAble:!0},{column:"task_id",name:"Task Id",clickAble:!1},{column:"task_last_updated_by",name:"Last Updated By",clickAble:!1},{column:"version_type",name:"Version Type",clickAble:!1},{column:"version_datetime",name:"Date Time",type:"date",clickAble:!1},{column:"lu_name",name:"Logical Unit Name",clickAble:!1},{column:"number_of_extracted_entities",name:"Number of Extracted Entities",clickAble:!1},{column:"rootIndicator",name:"Root LU",clickAble:!1}];for(var changeToLocalDate=function(data,type,full,meta){return moment(data).format("DD MMM YYYY, HH:mm")},renderSelectionColumn=function(data,type,full,meta){return full.isRoot?'<input type="radio" ng-value="\''+full.fabric_execution_id+'\'" name="versionsTableSelection" ng-model="newTaskCtrl.selectedVersionToLoad" style="display:block !importnant; opacity:1 !importnant;">':""},renderCollapseColumn=function(data,type,full,meta){return full.isRoot?'<a class="toggleVersions '+(newTaskCtrl.versionsToggle[full.task_execution_id]?"active":"")+'" ng-click="newTaskCtrl.toggleVersion('+full.task_execution_id+')"><i class="fa arrow"></i> </a>':""},i=0;i<newTaskCtrl.headersVersions.length;i++)"actions"==newTaskCtrl.headersVersions[i].column?newTaskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(newTaskCtrl.headersVersions[i].column).withTitle(newTaskCtrl.headersVersions[i].name).renderWith(renderSelectionColumn).notSortable()):"collapse"==newTaskCtrl.headersVersions[i].column?newTaskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(newTaskCtrl.headersVersions[i].column).withTitle(newTaskCtrl.headersVersions[i].name).renderWith(renderCollapseColumn).notSortable()):"date"==newTaskCtrl.headersVersions[i].type?newTaskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(newTaskCtrl.headersVersions[i].column).withTitle(newTaskCtrl.headersVersions[i].name).renderWith(changeToLocalDate).notSortable()):"task_id"==newTaskCtrl.headersVersions[i].column||"version_name"==newTaskCtrl.headersVersions[i].column?newTaskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(newTaskCtrl.headersVersions[i].column).withTitle(newTaskCtrl.headersVersions[i].name).notSortable()):"rootIndicator"==newTaskCtrl.headersVersions[i].column?newTaskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(newTaskCtrl.headersVersions[i].column).withTitle(newTaskCtrl.headersVersions[i].name).notSortable().notVisible()):newTaskCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(newTaskCtrl.headersVersions[i].column).withTitle(newTaskCtrl.headersVersions[i].name).notSortable());newTaskCtrl.dtOptionsVersions=DTOptionsBuilder.fromFnPromise((function(){return deferred=$q.defer(),versionsForLoad=[],rootLUs=_.filter(newTaskCtrl.logicalUnits,{lu_parent_name:null}),newTaskCtrl.versionsForLoad.forEach((function(versionForLoad){if(_.find(rootLUs,{lu_name:versionForLoad.lu_name})?versionForLoad.rootIndicator=!0:versionForLoad.rootIndicator=!1,versionForLoad.rootIndicator&&_.findIndex(versionsForLoad,{task_execution_id:versionForLoad.task_execution_id,isRoot:!0})<0)return versionForLoad.isRoot=!0,versionForLoad.rootIndicator=!0,void versionsForLoad.push(versionForLoad);newTaskCtrl.versionsToggle[versionForLoad.task_execution_id]&&(versionForLoad.isRoot=!1,versionsForLoad.push(versionForLoad))})),console.log(versionsForLoad),deferred.resolve(versionsForLoad),deferred.promise;var deferred,versionsForLoad,rootLUs})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("order",[[6,"desc"],[9,"desc"]]).withOption("search",{caseInsensitive:!1}),newTaskCtrl.dtOptionsVersions.withLightColumnFilter({2:{type:"text"},3:{type:"text"},4:{type:"text"},5:{type:"text"},6:{type:"text"},7:{type:"text"},8:{type:"text"}}),newTaskCtrl.getVersionsForLoad=function(){var entitiesPassed=!0;newTaskCtrl.requestedEntities.entities_list&&newTaskCtrl.maxToCopy&&(entitiesPassed=new RegExp("^((\\w|-)+(?:,(\\w|-)+){0,"+((newTaskCtrl.maxToCopy||1e9)-1)+"})?$").test(newTaskCtrl.requestedEntities.entities_list),newTaskCtrl.enititesListFailedPatternTest=!1);if(newTaskCtrl.versionForLoadFrom&&newTaskCtrl.versionForLoadTo&&newTaskCtrl.logicalUnits&&newTaskCtrl.taskData.source_env_name&&(newTaskCtrl.taskData.selectAllEntites||newTaskCtrl.requestedEntities.entities_list&&entitiesPassed)){newTaskCtrl.loadingTableVersions=!0;var from=new Date(newTaskCtrl.versionForLoadFrom);from.setHours(0),from.setMinutes(0),from.setSeconds(0);var to=new Date(newTaskCtrl.versionForLoadTo);to.setHours(23),to.setMinutes(59),to.setSeconds(59),TDMService.postGenericAPI("tasks/versionsForLoad",{fromDate:from,toDate:to,entitiesList:newTaskCtrl.taskData.selectAllEntites?"":newTaskCtrl.requestedEntities.entities_list,lu_list:newTaskCtrl.logicalUnits,source_env_name:newTaskCtrl.taskData.source_env_name,be_id:newTaskCtrl.taskData.be_id}).then((function(response){if("SUCCESS"==response.errorCode){let overrideRootIndicators=data=>{for(item of(executionIdsSet=new Set,data))executionIdsSet.has(item.task_execution_id)||"Y"!=item.root_indicator||(item.root_indicator="YY",executionIdsSet.add(item.task_execution_id))};(data=>{})(response.result),overrideRootIndicators(response.result),newTaskCtrl.versionsForLoad=response.result,newTaskCtrl.versionsForLoad=_.sortBy(newTaskCtrl.versionsForLoad,version=>-1*new Date(version.version_datetime)),$timeout((function(){newTaskCtrl.dtInstanceVersions&&newTaskCtrl.dtInstanceVersions.reloadData&&newTaskCtrl.dtInstanceVersions.reloadData((function(){}))}),100),newTaskCtrl.loadingTableVersions=!1}else toastr.error("New Task # Failed to get Versions for Load")}))}else newTaskCtrl.requestedEntities.entities_list||newTaskCtrl.taskData.selectAllEntites?entitiesPassed||(newTaskCtrl.enititesListFailedPatternTest=!0):(newTaskCtrl.versionsForLoad=[],newTaskCtrl.dtInstanceVersions&&newTaskCtrl.dtInstanceVersions.reloadData&&newTaskCtrl.dtInstanceVersions.reloadData((function(){})))},newTaskCtrl.initReferenceForm=ReferenceForm=>{$scope.ReferenceForm=ReferenceForm},newTaskCtrl.requestParametersPrev=function(){newTaskCtrl.taskData.task_globals?newTaskCtrl.step=5:newTaskCtrl.step=2},BreadCrumbsService.push({},"NEW_TASK",(function(){}))},controllerAs:"newTaskCtrl"}}function queryBuilder($compile){return{restrict:"E",scope:{group:"=",params:"=",disablechange:"=",lastindex:"=",form:"=",index:"="},templateUrl:"views/tasks/queryBuilderDirective.html",compile:function(element,attrs){var content,directive;return content=element.contents().remove(),function(scope,element,attrs){scope.operators=[{name:"AND"},{name:"OR"}],scope.conditions=[{name:"=",id:"="},{name:"<>",id:"<>"},{name:"<",id:">"},{name:"<=",id:">="},{name:">",id:"<"},{name:">=",id:"<="},{name:"Is null",id:"Is null"},{name:"Is not null",id:"Is not null"}],scope.comboConditions=[{name:"="},{name:"<>"},{name:"Is null",id:"Is null"},{name:"Is not null",id:"Is not null"}],scope.changeParam=function(rule,field){rule.data=void 0,scope.data=void 0;var param=_.find(scope.params,{param_name:field});param&&(rule.type=param.param_type,"integer"==rule.type||"real"==rule.type||"number"==rule.type?(rule.min=parseFloat(param.min_value),rule.max=parseFloat(param.max_value)):rule.validValues=param.valid_values),rule.field=field},scope.changeCondition=function(rule,condition){rule.condition=condition},scope.changeData=function(rule,data){rule.data=void 0!==data?data:void 0},scope.addCondition=function(){scope.group.rules.push({condition:"",field:"",data:void 0,operator:"AND"})},scope.disableIfNull=function(rule,condition){"Is null"===condition||"Is not null"===condition?(rule.disableThird=!0,rule.data=void 0):rule.disableThird=!1},scope.removeCondition=function(index){scope.group.rules.splice(index,1)},scope.addGroup=function(){scope.group.rules.push({group:{operator:"AND",rules:[]}})},scope.removeGroup=function(){"group"in scope.$parent&&scope.$parent.group.rules.splice(scope.$parent.$index,1)},directive||(directive=$compile(content)),element.append(directive(scope,(function($compile){return $compile})))}}}}angular.module("TDM-FE").directive("newTaskDirective",newTaskDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
