function taskSummaryDirective(){return{restrict:"EA",templateUrl:"views/tasks/taskSummary.html",scope:{content:"="},link:function(scope,element,attr){},controller:function($scope,$rootScope,BreadCrumbsService,$compile,$timeout,TDMService,AuthService,DTColumnBuilder,DTOptionsBuilder,DTColumnDefBuilder,$q,$sessionStorage,ExcelService,toastr,$interval,$uibModal){var taskSummaryCtrl=this;taskSummaryCtrl.taskData=$scope.content.task,taskSummaryCtrl.stopInterval=$interval((function(){"taskSummary"===$scope.content.pageDisplay&&TDMService.getSummaryTaskHistory(taskSummaryCtrl.taskData.task_id).then((function(response){if("SUCCESS"==response.errorCode){var foundRunning=_.find(response.result,(function(exec){return"completed"!==exec.execution_status&&"failed"!==exec.execution_status}));response.result.sort((a,b)=>a.task_execution_id<b.task_execution_id?1:a.task_execution_id>b.task_execution_id?-1:0),taskSummaryCtrl.taskHistoryData=response.result,taskSummaryCtrl.dtInstance&&taskSummaryCtrl.dtInstance.reloadData&&taskSummaryCtrl.dtInstance.reloadData((function(data){}),!1),foundRunning||$interval.cancel(taskSummaryCtrl.stopInterval)}}))}),7e3),taskSummaryCtrl.loadingTable=!0,taskSummaryCtrl.openTask=function(exec_id){if($scope.content.exec_id=exec_id,$scope.content.openTaskHistory&&taskSummaryCtrl.taskData){var breadCrumbs=BreadCrumbsService.getAll();if("TASK_EXECUTION_HISTORY"===breadCrumbs[breadCrumbs.length-1].name)return;return BreadCrumbsService.push({execId:exec_id,title:taskSummaryCtrl.taskData.task_title},"TASK_EXECUTION_HISTORY",(function(){$scope.content.openTaskHistory(taskSummaryCtrl.taskData,exec_id)})),void($scope.content.pageDisplay="taskHistory")}},taskSummaryCtrl.moveToHistoryIfRunningTask=execs=>{if(execs)for(execution of execs)if("running"==execution.execution_status.toLowerCase()||"pending"==execution.execution_status.toLowerCase()){taskSummaryCtrl.openTask(execution.task_execution_id);break}};TDMService.getSummaryTaskHistory(taskSummaryCtrl.taskData.task_id).then((function(response){if("SUCCESS"==response.errorCode){response.result.sort((a,b)=>a.task_execution_id<b.task_execution_id?1:a.task_execution_id>b.task_execution_id?-1:0),taskSummaryCtrl.moveToHistoryIfRunningTask(response.result),taskSummaryCtrl.taskHistoryData=response.result,taskSummaryCtrl.taskData.task_id,taskSummaryCtrl.dtInstance={},taskSummaryCtrl.dtColumns=[],taskSummaryCtrl.headers=[{column:"task_execution_id",name:"Task Execution Id",clickable:!0},{column:"execution_status",name:"Execution Status",clickable:!1},{column:"source_env_name",name:"Source Environment Name",clickable:!1},{column:"environment_name",name:"Target Environment Name",clickable:!1},{column:"task_executed_by",name:"Task Executed by",clickable:!1},{column:"be_name",name:"Business Entity Name",clickable:!1},{column:"start_execution_time",name:"Start Execution Time",clickable:!1,date:!0},{column:"end_execution_time",name:"End Execution Time",clickable:!1,date:!0},{column:"tot_num_of_processed_root_entities",name:"Total Number of Processed Entities",clickable:!1},{column:"tot_num_of_copied_root_entities",name:"Number of Successful Entities",clickable:!1},{column:"tot_num_of_failed_root_entities",name:"Number of Failed Entities",clickable:!1},{column:"tot_num_of_processed_ref_tables",name:"Total Number of Processed Reference Tables",clickable:!1},{column:"tot_num_of_copied_ref_tables",name:"Number of Copied Reference Tables",clickable:!1},{column:"tot_num_of_failed_ref_tables",name:"Number of Failed Reference Tables",clickable:!1},{column:"tot_num_of_processed_post_executions",name:"Total Number of Processed Post Executions",clickable:!1},{column:"tot_num_of_succeeded_post_executions",name:"Total Number of Successful Post Executions",clickable:!1},{column:"tot_num_of_failed_post_executions",name:"Total Number of Failed Post Executions",clickable:!1},{column:"execution_note",name:"Execution Note",clickable:!1}],taskSummaryCtrl.dtColumnDefs=[],$sessionStorage.taskSummaryTableHideColumns?taskSummaryCtrl.hideColumns=$sessionStorage.taskSummaryTableHideColumns:taskSummaryCtrl.hideColumns=[];for(var i=0;i<taskSummaryCtrl.hideColumns.length;i++){var hideColumn=DTColumnDefBuilder.newColumnDef(taskSummaryCtrl.hideColumns[i]).withOption("visible",!1);taskSummaryCtrl.dtColumnDefs.push(hideColumn)}var changeToLocalDate=function(data,type,full,meta){return data?moment(data).format("DD MMM YYYY, HH:mm:ss"):""},clickableCol=(data,type,full)=>"<a ng-click=\"taskSummaryCtrl.openTask('"+full.task_execution_id+"')\">"+data+"</a>";for(i=0;i<taskSummaryCtrl.headers.length;i++)taskSummaryCtrl.headers[i].clickable?taskSummaryCtrl.dtColumns.push(DTColumnBuilder.newColumn(taskSummaryCtrl.headers[i].column).withTitle(taskSummaryCtrl.headers[i].name).renderWith(clickableCol)):1==taskSummaryCtrl.headers[i].date?taskSummaryCtrl.dtColumns.push(DTColumnBuilder.newColumn(taskSummaryCtrl.headers[i].column).withTitle(taskSummaryCtrl.headers[i].name).renderWith(changeToLocalDate)):taskSummaryCtrl.dtColumns.push(DTColumnBuilder.newColumn(taskSummaryCtrl.headers[i].column).withTitle(taskSummaryCtrl.headers[i].name));taskSummaryCtrl.dtColumns.unshift(DTColumnBuilder.newColumn("taskHistoryActions").withTitle("").renderWith((function(data,type,full,meta){return"<a ng-click=\"taskSummaryCtrl.downloadSummaryReport('"+full.task_execution_id+'\')"  style="margin-left: 5px;border-color: transparent;background-color: transparent; color: black;" title="Download Summary Report"><img src="icons/summary-report.svg"></img> </a>'})).withOption("width","50"));var getTableData=function(){var deferred=$q.defer();const data=_.map(taskSummaryCtrl.taskHistoryData,row=>("EXTRACT"===row.task_type&&(row.environment_name=""),row.execution_note=row.execution_note||"",row));return deferred.resolve(data),deferred.promise};taskSummaryCtrl.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("paging",!0).withOption("order",[0,"desc"]).withOption("scrollX",!1).withButtons([{extend:"colvis",text:"Show/Hide columns",columns:[12,13,14,15,16,17,18],callback:function(columnIdx,visible){var index;1==visible?(index=taskSummaryCtrl.hideColumns.indexOf(columnIdx))>=0&&taskSummaryCtrl.hideColumns.splice(index,1):(index=taskSummaryCtrl.hideColumns.indexOf(columnIdx))<0&&taskSummaryCtrl.hideColumns.push(columnIdx);$sessionStorage.taskSummaryTableHideColumns=taskSummaryCtrl.hideColumns}}]),taskSummaryCtrl.downloadSummaryReport=function(execId){TDMService.getSummaryReport(execId,"ALL").then((function(response){"FAILED"!=response.errorCode&&ExcelService.buildSummaryExcel(response.result).xlsx.writeBuffer().then((function(data){var fileName=`${taskSummaryCtrl.taskData.task_title}_Summary_Execution_Report_EXECID_${execId}.xlsx`,a=document.createElement("a");document.body.appendChild(a),a.style="display: none";var file=new Blob([data],{type:"application/vnd.ms-excel"}),fileURL=(window.URL||window.webkitURL).createObjectURL(file);a.href=fileURL,a.download=fileName,a.click(),(window.URL||window.webkitURL).revokeObjectURL(file)}))}))},taskSummaryCtrl.dtInstanceCallback=function(dtInstance){angular.isFunction(taskSummaryCtrl.dtInstance)?taskSummaryCtrl.dtInstance(dtInstance):angular.isDefined(taskSummaryCtrl.dtInstance)&&(taskSummaryCtrl.dtInstance=dtInstance)},null!=taskSummaryCtrl.dtInstance.changeData&&taskSummaryCtrl.dtInstance.changeData(getTableData()),$timeout(()=>{taskSummaryCtrl.loadingTable=!1})}}))},controllerAs:"taskSummaryCtrl"}}angular.module("TDM-FE").directive("taskSummaryDirective",taskSummaryDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
