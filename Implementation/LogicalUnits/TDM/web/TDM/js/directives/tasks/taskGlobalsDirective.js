function taskGlobals(){return{restrict:"E",templateUrl:"views/tasks/taskGlobals.html",scope:{data:"=",logicalUnits:"="},controller:function($scope,TDMService,$timeout,DTOptionsBuilder,DTColumnBuilder,$q,$uibModal,$compile){var taskGlobals=this;taskGlobals.dtInstance={},taskGlobals.dtColumns=[],taskGlobals.dtColumnDefs=[],taskGlobals.globals=$scope.data,$scope.$watch("data",()=>{taskGlobals.globals=$scope.data,taskGlobals.dtInstance&&taskGlobals.dtInstance.reloadData&&taskGlobals.dtInstance.reloadData((function(){}))},!0,!0),taskGlobals.headers=[{column:"actions",name:""},{column:"global_name",name:"Variable Name"},{column:"global_value",name:"Variable Value"},{column:"global_value",name:"Logical Unit"}];for(var renderSelectionColumn=function(data,type,full,meta){return'<div style="display: flex;justify-content: space-around;max-width: 100px;"><div><img src="icons/edit.svg"  alt="edit" uib-tooltip="Edit Global" tooltip-placement="top"ng-click="taskGlobals.editGlobal(taskGlobals.globals['+meta.row+'])"></div><div><img  src="icons/delete-icon.svg" alt="edit" uib-tooltip="Delete Global" tooltip-placement="top" ng-click="taskGlobals.removeGlobal(\''+full.global_name+"')\"></div></div>"},i=0;i<taskGlobals.headers.length;i++)"actions"==taskGlobals.headers[i].column?taskGlobals.dtColumns.push(DTColumnBuilder.newColumn(taskGlobals.headers[i].column).withTitle(taskGlobals.headers[i].name).renderWith(renderSelectionColumn).withOption("width","200")):taskGlobals.dtColumns.push(DTColumnBuilder.newColumn(taskGlobals.headers[i].column).withTitle(taskGlobals.headers[i].name));taskGlobals.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return(deferred=$q.defer()).resolve(taskGlobals.globals),console.log(taskGlobals.globals),deferred.promise;var deferred})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),taskGlobals.dtOptions.withLightColumnFilter({1:{type:"text"},2:{type:"text"}}),taskGlobals.removeGlobal=function(globalName){var index=_.findIndex(taskGlobals.globals,{global_name:globalName});index>=0&&(taskGlobals.globals.splice(index,1),$timeout((function(){taskGlobals.dtInstance&&taskGlobals.dtInstance.reloadData&&taskGlobals.dtInstance.reloadData((function(){}))}),100))},taskGlobals.editGlobal=function(globalName){taskGlobals.addGlobals(!0,globalName)},taskGlobals.addGlobals=function(edit,global){$uibModal.open({template:"views/tasks/addGlobal.html",windowTopClass:"taskGlobals",resolve:{globals:function(){return taskGlobals.globals},logicalUnits:function(){return $scope.logicalUnits}},controller:function($scope,$uibModalInstance,TDMService,globals,logicalUnits){var addGlobalCtrl=this;addGlobalCtrl.edit=edit,addGlobalCtrl.data={},edit?(addGlobalCtrl.data=global,addGlobalCtrl.globals=[{globalName:global.global_name}]):TDMService.getAllGlobals({lus:_.map(logicalUnits,"lu_name")}).then((function(response){addGlobalCtrl.globals=_.filter(response.result,(function(global){return _.findIndex(globals,{global_name:global})<0}))})),addGlobalCtrl.addNewGlobal=function(){$uibModalInstance.close(addGlobalCtrl.data)},addGlobalCtrl.close=function(){$uibModalInstance.close()}},controllerAs:"addGlobalCtrl"}).result.then((function(global){if(global&&global.global_name&&global.global_value){var origGlobal=_.find(taskGlobals.globals,{global_name:global.global_name});origGlobal?origGlobal.global_value=global.global_value:taskGlobals.globals.push(global),$timeout((function(){taskGlobals.dtInstance&&taskGlobals.dtInstance.reloadData&&taskGlobals.dtInstance.reloadData((function(){}))}),100)}}))}},controllerAs:"taskGlobals"}}angular.module("TDM-FE").directive("taskGlobals",taskGlobals);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
