function referenceTaskTable(){return{restrict:"E",templateUrl:"views/tasks/referenceTaskTable.html",scope:{data:"=",getVersions:"="},controller:function($scope,TDMService,$timeout,DTOptionsBuilder,DTColumnBuilder,$q,toastr,$compile){var referenceTaskTableCtrl=this;referenceTaskTableCtrl.dtInstance={},referenceTaskTableCtrl.dtColumns=[],referenceTaskTableCtrl.dtColumnDefs=[],referenceTaskTableCtrl.data=$scope.data,referenceTaskTableCtrl.headers=[{column:"actions",name:""},{column:"logical_unit_name",name:"LU Name"},{column:"interface_name",name:"Interface Name"},{column:"reference_table_name",name:"Reference Table Name"}];for(var renderSelectionColumn=function(data,type,full,meta){return'<input type="checkbox" ng-change="referenceTaskTableCtrl.selectionChange(referenceTaskTableCtrl.data['+meta.row+'])" name="referenceTableSelection" ng-model="referenceTaskTableCtrl.data['+meta.row+'].selected" ng-value="referenceTaskTableCtrl.data['+meta.row+'].selected"  style="display:block !importnant; opacity:1 !importnant;">'},i=0;i<referenceTaskTableCtrl.headers.length;i++)"actions"==referenceTaskTableCtrl.headers[i].column?referenceTaskTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(referenceTaskTableCtrl.headers[i].column).withTitle(referenceTaskTableCtrl.headers[i].name).renderWith(renderSelectionColumn).withOption("width","70")):referenceTaskTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(referenceTaskTableCtrl.headers[i].column).withTitle(referenceTaskTableCtrl.headers[i].name));referenceTaskTableCtrl.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return(deferred=$q.defer()).resolve(referenceTaskTableCtrl.data),deferred.promise;var deferred})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}).withOption("order",[1,"asc"]),referenceTaskTableCtrl.dtOptions.withLightColumnFilter({1:{type:"text"},2:{type:"text"},3:{type:"text"},4:{type:"text"}}),referenceTaskTableCtrl.selectionChange=function(refTable,selectAll){if(refTable.selected&&_.countBy(referenceTaskTableCtrl.data,{interface_name:refTable.interface_name,schema_name:refTable.schema_name,reference_table_name:refTable.reference_table_name,selected:!0}).true>1)return $timeout((function(){refTable.selected=!1})),void toastr.error(refTable.schema_name+"."+refTable.reference_table_name,"Duplicate table selected:");selectAll||$scope.getVersions()},referenceTaskTableCtrl.selectReference=function(value){referenceTaskTableCtrl.data.forEach((function(el){el.selected=value,referenceTaskTableCtrl.selectionChange(el)})),$scope.getVersions()}},controllerAs:"referenceTaskTableCtrl"}}angular.module("TDM-FE").directive("referenceTaskTable",referenceTaskTable);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdGFza3MvcmVmZXJlbmNlVGFza1RhYmxlRGlyZWN0aXZlLmpzIl0sIm5hbWVzIjpbInJlZmVyZW5jZVRhc2tUYWJsZSIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJzY29wZSIsImRhdGEiLCJnZXRWZXJzaW9ucyIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJURE1TZXJ2aWNlIiwiJHRpbWVvdXQiLCJEVE9wdGlvbnNCdWlsZGVyIiwiRFRDb2x1bW5CdWlsZGVyIiwiJHEiLCJ0b2FzdHIiLCIkY29tcGlsZSIsInJlZmVyZW5jZVRhc2tUYWJsZUN0cmwiLCJ0aGlzIiwiZHRJbnN0YW5jZSIsImR0Q29sdW1ucyIsImR0Q29sdW1uRGVmcyIsImhlYWRlcnMiLCJjb2x1bW4iLCJuYW1lIiwicmVuZGVyU2VsZWN0aW9uQ29sdW1uIiwidHlwZSIsImZ1bGwiLCJtZXRhIiwicm93IiwiaSIsImxlbmd0aCIsInB1c2giLCJuZXdDb2x1bW4iLCJ3aXRoVGl0bGUiLCJyZW5kZXJXaXRoIiwid2l0aE9wdGlvbiIsImR0T3B0aW9ucyIsImZyb21GblByb21pc2UiLCJkZWZlcnJlZCIsImRlZmVyIiwicmVzb2x2ZSIsInByb21pc2UiLCJ3aXRoRE9NIiwiYW5ndWxhciIsImVsZW1lbnQiLCJjb250ZW50cyIsIndpdGhCdXR0b25zIiwiY2FzZUluc2Vuc2l0aXZlIiwid2l0aExpZ2h0Q29sdW1uRmlsdGVyIiwiMSIsIjIiLCIzIiwiNCIsInNlbGVjdGlvbkNoYW5nZSIsInJlZlRhYmxlIiwic2VsZWN0QWxsIiwic2VsZWN0ZWQiLCJfIiwiY291bnRCeSIsImludGVyZmFjZV9uYW1lIiwic2NoZW1hX25hbWUiLCJyZWZlcmVuY2VfdGFibGVfbmFtZSIsInRydWUiLCJlcnJvciIsInNlbGVjdFJlZmVyZW5jZSIsInZhbHVlIiwiZm9yRWFjaCIsImVsIiwiY29udHJvbGxlckFzIiwibW9kdWxlIiwiZGlyZWN0aXZlIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxxQkE4R0wsTUFBTyxDQUNIQyxTQUFVLElBQ1ZDLFlBOUdjLHNDQStHZEMsTUFBTyxDQUNIQyxLQUFNLElBQ05DLFlBQWEsS0FFakJDLFdBakhhLFNBQVVDLE9BQVFDLFdBQVlDLFNBQVNDLGlCQUFtQkMsZ0JBQWlCQyxHQUFJQyxPQUFRQyxVQUNwRyxJQUFJQyx1QkFBeUJDLEtBQzdCRCx1QkFBdUJFLFdBQWEsR0FDcENGLHVCQUF1QkcsVUFBWSxHQUNuQ0gsdUJBQXVCSSxhQUFlLEdBQ3RDSix1QkFBdUJYLEtBQU9HLE9BQU9ILEtBQ3JDVyx1QkFBdUJLLFFBQVUsQ0FDN0IsQ0FDSUMsT0FBUyxVQUNUQyxLQUFPLElBRVgsQ0FDSUQsT0FBUyxvQkFDVEMsS0FBTyxXQUVYLENBQ0lELE9BQVMsaUJBQ1RDLEtBQU8sa0JBRVgsQ0FDSUQsT0FBUyx1QkFDVEMsS0FBTyx5QkFTZixJQUxBLElBQUlDLHNCQUF3QixTQUFTbkIsS0FBTW9CLEtBQU1DLEtBQU1DLE1BQ25ELE1BQU8sd0dBQTBHQSxLQUFLQyxJQUFLLDRFQUE4RUQsS0FBS0MsSUFBSyxxREFBdURELEtBQUtDLElBQUssMkVBSS9RQyxFQUFJLEVBQUdBLEVBQUliLHVCQUF1QkssUUFBUVMsT0FBU0QsSUFDUixXQUE1Q2IsdUJBQXVCSyxRQUFRUSxHQUFHUCxPQUNsQ04sdUJBQXVCRyxVQUFVWSxLQUFLbkIsZ0JBQWdCb0IsVUFBVWhCLHVCQUF1QkssUUFBUVEsR0FBR1AsUUFBUVcsVUFBVWpCLHVCQUF1QkssUUFBUVEsR0FBR04sTUFBTVcsV0FBV1YsdUJBQXVCVyxXQUFXLFFBQVMsT0FHbE5uQix1QkFBdUJHLFVBQVVZLEtBQUtuQixnQkFBZ0JvQixVQUFVaEIsdUJBQXVCSyxRQUFRUSxHQUFHUCxRQUFRVyxVQUFVakIsdUJBQXVCSyxRQUFRUSxHQUFHTixPQVU5SlAsdUJBQXVCb0IsVUFBWXpCLGlCQUFpQjBCLGVBQWMsV0FDMUQsT0FOQUMsU0FBV3pCLEdBQUcwQixTQUNUQyxRQUFReEIsdUJBQXVCWCxNQUNqQ2lDLFNBQVNHLFFBSEQsSUFDWEgsWUFRSEksUUFBUSw0QkFDUlAsV0FBVyxjQUFjLFNBQVVQLEtBRWhDYixTQUFTNEIsUUFBUUMsUUFBUWhCLEtBQUtpQixXQUE5QjlCLENBQTBDUCxXQUU3QzJCLFdBQVcsV0FBVyxHQUN0QkEsV0FBVyxnQkFBZ0IsR0FDM0JBLFdBQVcsVUFBVSxHQUNyQlcsWUFBWSxJQUNaWCxXQUFXLG1CQUFtQixHQUM5QkEsV0FBVyxTQUFTLENBQ2pCWSxpQkFBbUIsSUFFdEJaLFdBQVcsUUFBUyxDQUFDLEVBQUcsUUFHekJuQix1QkFBdUJvQixVQUFVWSxzQkFBc0IsQ0FDbkRDLEVBQUcsQ0FDQ3hCLEtBQU0sUUFFVnlCLEVBQUcsQ0FDQ3pCLEtBQU0sUUFFVjBCLEVBQUcsQ0FDQzFCLEtBQU0sUUFFVjJCLEVBQUcsQ0FDQzNCLEtBQU0sVUFJZFQsdUJBQXVCcUMsZ0JBQWtCLFNBQVNDLFNBQVVDLFdBQ3hELEdBQUlELFNBQVNFLFVBQVlDLEVBQUVDLFFBQVExQyx1QkFBdUJYLEtBQUssQ0FDM0RzRCxlQUFpQkwsU0FBU0ssZUFDMUJDLFlBQWNOLFNBQVNNLFlBQ3ZCQyxxQkFBdUJQLFNBQVNPLHFCQUNoQ0wsVUFBVyxJQUNaTSxLQUFPLEVBS04sT0FKQXBELFVBQVMsV0FDTDRDLFNBQVNFLFVBQVcsVUFFeEIxQyxPQUFPaUQsTUFBTVQsU0FBU00sWUFBYyxJQUFNTixTQUFTTyxxQkFBc0IsNkJBR3hFTixXQUNEL0MsT0FBT0YsZUFJZlUsdUJBQXVCZ0QsZ0JBQWtCLFNBQVNDLE9BQzlDakQsdUJBQXVCWCxLQUFLNkQsU0FBUSxTQUFTQyxJQUN6Q0EsR0FBR1gsU0FBV1MsTUFDZGpELHVCQUF1QnFDLGdCQUFnQmMsT0FFM0MzRCxPQUFPRixnQkFZZjhELGFBQWMsMEJBS3RCekIsUUFDSzBCLE9BQU8sVUFDUEMsVUFBVSxxQkFBc0JyRSIsImZpbGUiOiJkaXJlY3RpdmVzL3Rhc2tzL3JlZmVyZW5jZVRhc2tUYWJsZURpcmVjdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHJlZmVyZW5jZVRhc2tUYWJsZSgpIHtcblxuICAgIHZhciB0ZW1wbGF0ZVVybCA9IFwidmlld3MvdGFza3MvcmVmZXJlbmNlVGFza1RhYmxlLmh0bWxcIjtcblxuICAgIHZhciBjb250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgVERNU2VydmljZSwgJHRpbWVvdXQsRFRPcHRpb25zQnVpbGRlciAsIERUQ29sdW1uQnVpbGRlciwgJHEsIHRvYXN0ciwgJGNvbXBpbGUpIHtcbiAgICAgICAgdmFyIHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwgPSB0aGlzO1xuICAgICAgICByZWZlcmVuY2VUYXNrVGFibGVDdHJsLmR0SW5zdGFuY2UgPSB7fTtcbiAgICAgICAgcmVmZXJlbmNlVGFza1RhYmxlQ3RybC5kdENvbHVtbnMgPSBbXTtcbiAgICAgICAgcmVmZXJlbmNlVGFza1RhYmxlQ3RybC5kdENvbHVtbkRlZnMgPSBbXTtcbiAgICAgICAgcmVmZXJlbmNlVGFza1RhYmxlQ3RybC5kYXRhID0gJHNjb3BlLmRhdGE7XG4gICAgICAgIHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuaGVhZGVycyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4gOiAnYWN0aW9ucycsXG4gICAgICAgICAgICAgICAgbmFtZSA6ICcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbHVtbiA6ICdsb2dpY2FsX3VuaXRfbmFtZScsXG4gICAgICAgICAgICAgICAgbmFtZSA6ICdMVSBOYW1lJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb2x1bW4gOiAnaW50ZXJmYWNlX25hbWUnLFxuICAgICAgICAgICAgICAgIG5hbWUgOiAnSW50ZXJmYWNlIE5hbWUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbHVtbiA6ICdyZWZlcmVuY2VfdGFibGVfbmFtZScsXG4gICAgICAgICAgICAgICAgbmFtZSA6ICdSZWZlcmVuY2UgVGFibGUgTmFtZSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcblxuICAgICAgICB2YXIgcmVuZGVyU2VsZWN0aW9uQ29sdW1uID0gZnVuY3Rpb24oZGF0YSwgdHlwZSwgZnVsbCwgbWV0YSl7XG4gICAgICAgICAgICByZXR1cm4gJzxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1jaGFuZ2U9XCJyZWZlcmVuY2VUYXNrVGFibGVDdHJsLnNlbGVjdGlvbkNoYW5nZShyZWZlcmVuY2VUYXNrVGFibGVDdHJsLmRhdGFbJyArIG1ldGEucm93ICsnXSlcIiBuYW1lPVwicmVmZXJlbmNlVGFibGVTZWxlY3Rpb25cIiBuZy1tb2RlbD1cInJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuZGF0YVsnICsgbWV0YS5yb3cgKyddLnNlbGVjdGVkXCIgbmctdmFsdWU9XCJyZWZlcmVuY2VUYXNrVGFibGVDdHJsLmRhdGFbJyArIG1ldGEucm93ICsnXS5zZWxlY3RlZFwiICBzdHlsZT1cImRpc3BsYXk6YmxvY2sgIWltcG9ydG5hbnQ7IG9wYWNpdHk6MSAhaW1wb3J0bmFudDtcIj4nXG5cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuaGVhZGVycy5sZW5ndGggOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChyZWZlcmVuY2VUYXNrVGFibGVDdHJsLmhlYWRlcnNbaV0uY29sdW1uID09ICdhY3Rpb25zJyl7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlVGFza1RhYmxlQ3RybC5kdENvbHVtbnMucHVzaChEVENvbHVtbkJ1aWxkZXIubmV3Q29sdW1uKHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuaGVhZGVyc1tpXS5jb2x1bW4pLndpdGhUaXRsZShyZWZlcmVuY2VUYXNrVGFibGVDdHJsLmhlYWRlcnNbaV0ubmFtZSkucmVuZGVyV2l0aChyZW5kZXJTZWxlY3Rpb25Db2x1bW4pLndpdGhPcHRpb24oJ3dpZHRoJywgJzcwJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VUYXNrVGFibGVDdHJsLmR0Q29sdW1ucy5wdXNoKERUQ29sdW1uQnVpbGRlci5uZXdDb2x1bW4ocmVmZXJlbmNlVGFza1RhYmxlQ3RybC5oZWFkZXJzW2ldLmNvbHVtbikud2l0aFRpdGxlKHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuaGVhZGVyc1tpXS5uYW1lKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZ2V0VGFibGVEYXRhID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVmZXJlbmNlVGFza1RhYmxlQ3RybC5kYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuZHRPcHRpb25zID0gRFRPcHRpb25zQnVpbGRlci5mcm9tRm5Qcm9taXNlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGFibGVEYXRhKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndpdGhET00oJzxcImh0bWw1YnV0dG9uc1wiQj5sVGZnaXRwJylcbiAgICAgICAgICAgIC53aXRoT3B0aW9uKCdjcmVhdGVkUm93JywgZnVuY3Rpb24gKHJvdykge1xuICAgICAgICAgICAgICAgIC8vIFJlY29tcGlsaW5nIHNvIHdlIGNhbiBiaW5kIEFuZ3VsYXIgZGlyZWN0aXZlIHRvIHRoZSBEVFxuICAgICAgICAgICAgICAgICRjb21waWxlKGFuZ3VsYXIuZWxlbWVudChyb3cpLmNvbnRlbnRzKCkpKCRzY29wZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLndpdGhPcHRpb24oJ3Njcm9sbFgnLCBmYWxzZSlcbiAgICAgICAgICAgIC53aXRoT3B0aW9uKCdsZW5ndGhDaGFuZ2UnLCBmYWxzZSlcbiAgICAgICAgICAgIC53aXRoT3B0aW9uKCdwYWdpbmcnLCBmYWxzZSlcbiAgICAgICAgICAgIC53aXRoQnV0dG9ucyhbXSlcbiAgICAgICAgICAgIC53aXRoT3B0aW9uKFwiY2FzZUluc2Vuc2l0aXZlXCIsIHRydWUpXG4gICAgICAgICAgICAud2l0aE9wdGlvbignc2VhcmNoJyx7XG4gICAgICAgICAgICAgICAgXCJjYXNlSW5zZW5zaXRpdmVcIjogZmFsc2VcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAud2l0aE9wdGlvbignb3JkZXInLCBbMSwgJ2FzYyddKTtcbiAgICAgICAgO1xuXG4gICAgICAgICAgICByZWZlcmVuY2VUYXNrVGFibGVDdHJsLmR0T3B0aW9ucy53aXRoTGlnaHRDb2x1bW5GaWx0ZXIoe1xuICAgICAgICAgICAgICAgIDE6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAyOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICd0ZXh0J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgMzoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndGV4dCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIDQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3RleHQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuc2VsZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24ocmVmVGFibGUsIHNlbGVjdEFsbCl7XG4gICAgICAgICAgICAgICAgaWYgKHJlZlRhYmxlLnNlbGVjdGVkICYmIF8uY291bnRCeShyZWZlcmVuY2VUYXNrVGFibGVDdHJsLmRhdGEse1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmZhY2VfbmFtZSA6IHJlZlRhYmxlLmludGVyZmFjZV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBzY2hlbWFfbmFtZSA6IHJlZlRhYmxlLnNjaGVtYV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VfdGFibGVfbmFtZSA6IHJlZlRhYmxlLnJlZmVyZW5jZV90YWJsZV9uYW1lLFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA6IHRydWVcbiAgICAgICAgICAgICAgICB9KS50cnVlID4gMSl7XG4gICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZUYWJsZS5zZWxlY3RlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IocmVmVGFibGUuc2NoZW1hX25hbWUgKyBcIi5cIiArIHJlZlRhYmxlLnJlZmVyZW5jZV90YWJsZV9uYW1lLCBcIkR1cGxpY2F0ZSB0YWJsZSBzZWxlY3RlZDpcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFzZWxlY3RBbGwpe1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0VmVyc2lvbnMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZWZlcmVuY2VUYXNrVGFibGVDdHJsLnNlbGVjdFJlZmVyZW5jZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VUYXNrVGFibGVDdHJsLmRhdGEuZm9yRWFjaChmdW5jdGlvbihlbCl7XG4gICAgICAgICAgICAgICAgICAgIGVsLnNlbGVjdGVkID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZVRhc2tUYWJsZUN0cmwuc2VsZWN0aW9uQ2hhbmdlKGVsKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0VmVyc2lvbnMoKTtcbiAgICAgICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxuICAgICAgICB0ZW1wbGF0ZVVybDogdGVtcGxhdGVVcmwsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiAnPScsXG4gICAgICAgICAgICBnZXRWZXJzaW9uczogJz0nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbnRyb2xsZXI6IGNvbnRyb2xsZXIsXG4gICAgICAgIGNvbnRyb2xsZXJBczogJ3JlZmVyZW5jZVRhc2tUYWJsZUN0cmwnXG4gICAgfTtcbn1cblxuXG5hbmd1bGFyXG4gICAgLm1vZHVsZSgnVERNLUZFJylcbiAgICAuZGlyZWN0aXZlKCdyZWZlcmVuY2VUYXNrVGFibGUnLCByZWZlcmVuY2VUYXNrVGFibGUpIl19
