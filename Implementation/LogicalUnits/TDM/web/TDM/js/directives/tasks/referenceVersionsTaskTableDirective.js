function referenceVersionsTaskTable(){return{restrict:"E",templateUrl:"views/tasks/referenceVersionsTaskTable.html",scope:{versionsList:"=",loading:"=",timeRange:"=",getVersions:"=",selectedVersion:"=",reloadVersionsTable:"="},controller:function($scope,TDMService,$timeout,DTOptionsBuilder,DTColumnBuilder,$q,$uibModal,$compile){var referenceVersionsTaskTableCtrl=this;referenceVersionsTaskTableCtrl.dtColumnsVersions=[],referenceVersionsTaskTableCtrl.dtColumnDefsVersions=[],$scope.reloadVersionsTable.dtInstanceVersions={},referenceVersionsTaskTableCtrl.groupedSelections=new Set,referenceVersionsTaskTableCtrl.headersVersions=[{column:"actions",name:"",clickAble:!1},{column:"lu_name",name:"LU Name",clickAble:!0},{column:"version_name",name:"Version Name",clickAble:!0},{column:"task_id",name:"Task Id",clickAble:!1},{column:"task_last_updated_by",name:"Last Updated By",clickAble:!1},{column:"version_type",name:"Version Type",clickAble:!1},{column:"version_datetime",name:"Date Time",type:"date",clickAble:!1}];for(var changeToLocalDate=function(data,type,full,meta){return moment(data).format("DD MMM YYYY, HH:mm")},renderSelectionColumn=function(data,type,full,meta){var selectionIcon='<input type="radio" ng-value="'+full.task_execution_id+'" name="referenceVersionsTableSelection" ng-model="selectedVersion.selectedRefVersionToLoad">';return referenceVersionsTaskTableCtrl.groupedSelections||referenceVersionsTaskTableCtrl.groupedSelections.add(full.task_execution_id),full.task_execution_id?referenceVersionsTaskTableCtrl.groupedSelections.has(full.task_execution_id)?"":(referenceVersionsTaskTableCtrl.groupedSelections.add(full.task_execution_id),selectionIcon):selectionIcon},i=0;i<referenceVersionsTaskTableCtrl.headersVersions.length;i++)"actions"==referenceVersionsTaskTableCtrl.headersVersions[i].column?referenceVersionsTaskTableCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(referenceVersionsTaskTableCtrl.headersVersions[i].column).withTitle(referenceVersionsTaskTableCtrl.headersVersions[i].name).renderWith(renderSelectionColumn)):"date"==referenceVersionsTaskTableCtrl.headersVersions[i].type?referenceVersionsTaskTableCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(referenceVersionsTaskTableCtrl.headersVersions[i].column).withTitle(referenceVersionsTaskTableCtrl.headersVersions[i].name).renderWith(changeToLocalDate)):referenceVersionsTaskTableCtrl.dtColumnsVersions.push(DTColumnBuilder.newColumn(referenceVersionsTaskTableCtrl.headersVersions[i].column).withTitle(referenceVersionsTaskTableCtrl.headersVersions[i].name));referenceVersionsTaskTableCtrl.dtOptionsVersions=DTOptionsBuilder.fromFnPromise((function(){return deferred=$q.defer(),referenceVersionsTaskTableCtrl.groupedSelections=new Set,deferred.resolve($scope.versionsList||[]),deferred.promise;var deferred})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withOption("lengthChange",!1).withOption("paging",!1).withButtons([]).withOption("caseInsensitive",!0).withOption("search",{caseInsensitive:!1}),referenceVersionsTaskTableCtrl.dtOptionsVersions.withLightColumnFilter({1:{type:"text"},2:{type:"text"},3:{type:"text"},4:{type:"text"},5:{type:"text"},6:{type:"text"}})},controllerAs:"referenceVersionsTaskTableCtrl"}}angular.module("TDM-FE").directive("referenceVersionsTaskTable",referenceVersionsTaskTable);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
