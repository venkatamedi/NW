function centersDataTableDirective(){return{restrict:"E",templateUrl:"views/dataCenters/dataCentersTable.html",scope:{content:"="},controller:function($scope,$compile,TDMService,DTColumnBuilder,DTOptionsBuilder,$q,$timeout){var dataCentersTableCtrl=this;dataCentersTableCtrl.loadingTable=!0,TDMService.getDataCenters().then((function(response){if("SUCCESS"==response.errorCode){dataCentersTableCtrl.dataCentersData=response.result,dataCentersTableCtrl.dtInstance={},dataCentersTableCtrl.dtColumns=[],dataCentersTableCtrl.dtColumnDefs=[],dataCentersTableCtrl.headers=[{column:"dc",name:"Name",clickAble:!0},{column:"effective_ip",name:"IP Address",clickAble:!0},{column:"node_id",name:"Node Id",clickAble:!0},{column:"notes",name:"Description",clickAble:!1},{column:"status",name:"Status",clickAble:!1}];for(var changeToLocalDate=function(data,type,full,meta){return moment(data).format("DD MMM YYYY, HH:mm")},i=0;i<dataCentersTableCtrl.headers.length;i++)"date"==dataCentersTableCtrl.headers[i].type?dataCentersTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(dataCentersTableCtrl.headers[i].column).withTitle(dataCentersTableCtrl.headers[i].name).renderWith(changeToLocalDate)):dataCentersTableCtrl.dtColumns.push(DTColumnBuilder.newColumn(dataCentersTableCtrl.headers[i].column).withTitle(dataCentersTableCtrl.headers[i].name));var getTableData=function(){var deferred=$q.defer();return deferred.resolve(dataCentersTableCtrl.dataCentersData),deferred.promise};dataCentersTableCtrl.dtOptions=DTOptionsBuilder.fromFnPromise((function(){return getTableData()})).withDOM('<"html5buttons"B>lTfgitp').withOption("createdRow",(function(row){$compile(angular.element(row).contents())($scope)})).withOption("scrollX",!1).withButtons([]).withOption("search",{caseInsensitive:!0,useWildcards:!1}),dataCentersTableCtrl.dataCentersData&&dataCentersTableCtrl.dataCentersData.length>0&&dataCentersTableCtrl.dtOptions.withLightColumnFilter({0:{type:"text"},1:{type:"text"},2:{type:"text"},3:{type:"text"},4:{type:"text"}}),dataCentersTableCtrl.dtInstanceCallback=function(dtInstance){angular.isFunction(dataCentersTableCtrl.dtInstance)?dataCentersTableCtrl.dtInstance(dtInstance):angular.isDefined(dataCentersTableCtrl.dtInstance)&&(dataCentersTableCtrl.dtInstance=dtInstance)},null!=dataCentersTableCtrl.dtInstance.changeData&&dataCentersTableCtrl.dtInstance.changeData(getTableData()),$timeout(()=>{dataCentersTableCtrl.loadingTable=!1})}})),dataCentersTableCtrl.openDataCenter=function(data_center_id){if($scope.content.openDataCenter){var dataCenterData=_.find(dataCentersTableCtrl.dataCentersData,{data_center_id:data_center_id});if(dataCenterData)return void $scope.content.openDataCenter(dataCenterData)}},dataCentersTableCtrl.openNewDataCenter=function(){$scope.content.openNewDataCenter&&$scope.content.openNewDataCenter(dataCentersTableCtrl.dataCentersData)}},controllerAs:"dataCentersTableCtrl"}}angular.module("TDM-FE").directive("centersDataTableDirective",centersDataTableDirective);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
